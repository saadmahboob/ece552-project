$date
	Fri Nov 09 18:51:25 2018
$end
$version
	ModelSim Version 10.4a
$end
$timescale
	1ns
$end

$scope module cpu_ptb $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [3] $end
$var wire 1 C WriteRegister [2] $end
$var wire 1 D WriteRegister [1] $end
$var wire 1 E WriteRegister [0] $end
$var wire 1 F WriteData [15] $end
$var wire 1 G WriteData [14] $end
$var wire 1 H WriteData [13] $end
$var wire 1 I WriteData [12] $end
$var wire 1 J WriteData [11] $end
$var wire 1 K WriteData [10] $end
$var wire 1 L WriteData [9] $end
$var wire 1 M WriteData [8] $end
$var wire 1 N WriteData [7] $end
$var wire 1 O WriteData [6] $end
$var wire 1 P WriteData [5] $end
$var wire 1 Q WriteData [4] $end
$var wire 1 R WriteData [3] $end
$var wire 1 S WriteData [2] $end
$var wire 1 T WriteData [1] $end
$var wire 1 U WriteData [0] $end
$var wire 1 V MemWrite $end
$var wire 1 W MemRead $end
$var wire 1 X MemAddress [15] $end
$var wire 1 Y MemAddress [14] $end
$var wire 1 Z MemAddress [13] $end
$var wire 1 [ MemAddress [12] $end
$var wire 1 \ MemAddress [11] $end
$var wire 1 ] MemAddress [10] $end
$var wire 1 ^ MemAddress [9] $end
$var wire 1 _ MemAddress [8] $end
$var wire 1 ` MemAddress [7] $end
$var wire 1 a MemAddress [6] $end
$var wire 1 b MemAddress [5] $end
$var wire 1 c MemAddress [4] $end
$var wire 1 d MemAddress [3] $end
$var wire 1 e MemAddress [2] $end
$var wire 1 f MemAddress [1] $end
$var wire 1 g MemAddress [0] $end
$var wire 1 h MemDataIn [15] $end
$var wire 1 i MemDataIn [14] $end
$var wire 1 j MemDataIn [13] $end
$var wire 1 k MemDataIn [12] $end
$var wire 1 l MemDataIn [11] $end
$var wire 1 m MemDataIn [10] $end
$var wire 1 n MemDataIn [9] $end
$var wire 1 o MemDataIn [8] $end
$var wire 1 p MemDataIn [7] $end
$var wire 1 q MemDataIn [6] $end
$var wire 1 r MemDataIn [5] $end
$var wire 1 s MemDataIn [4] $end
$var wire 1 t MemDataIn [3] $end
$var wire 1 u MemDataIn [2] $end
$var wire 1 v MemDataIn [1] $end
$var wire 1 w MemDataIn [0] $end
$var wire 1 x MemDataOut [15] $end
$var wire 1 y MemDataOut [14] $end
$var wire 1 z MemDataOut [13] $end
$var wire 1 { MemDataOut [12] $end
$var wire 1 | MemDataOut [11] $end
$var wire 1 } MemDataOut [10] $end
$var wire 1 ~ MemDataOut [9] $end
$var wire 1 !! MemDataOut [8] $end
$var wire 1 "! MemDataOut [7] $end
$var wire 1 #! MemDataOut [6] $end
$var wire 1 $! MemDataOut [5] $end
$var wire 1 %! MemDataOut [4] $end
$var wire 1 &! MemDataOut [3] $end
$var wire 1 '! MemDataOut [2] $end
$var wire 1 (! MemDataOut [1] $end
$var wire 1 )! MemDataOut [0] $end
$var wire 1 *! Halt $end
$var integer 32 +! inst_count $end
$var integer 32 ,! cycle_count $end
$var integer 32 -! trace_file $end
$var integer 32 .! sim_log_file $end
$var reg 1 /! clk $end
$var reg 1 0! rst_n $end

$scope module DUT $end
$var wire 1 1! clk $end
$var wire 1 2! rst_n $end
$var wire 1 *! hlt $end
$var wire 1 ! pc [15] $end
$var wire 1 " pc [14] $end
$var wire 1 # pc [13] $end
$var wire 1 $ pc [12] $end
$var wire 1 % pc [11] $end
$var wire 1 & pc [10] $end
$var wire 1 ' pc [9] $end
$var wire 1 ( pc [8] $end
$var wire 1 ) pc [7] $end
$var wire 1 * pc [6] $end
$var wire 1 + pc [5] $end
$var wire 1 , pc [4] $end
$var wire 1 - pc [3] $end
$var wire 1 . pc [2] $end
$var wire 1 / pc [1] $end
$var wire 1 0 pc [0] $end
$var wire 1 3! curr_pc [15] $end
$var wire 1 4! curr_pc [14] $end
$var wire 1 5! curr_pc [13] $end
$var wire 1 6! curr_pc [12] $end
$var wire 1 7! curr_pc [11] $end
$var wire 1 8! curr_pc [10] $end
$var wire 1 9! curr_pc [9] $end
$var wire 1 :! curr_pc [8] $end
$var wire 1 ;! curr_pc [7] $end
$var wire 1 <! curr_pc [6] $end
$var wire 1 =! curr_pc [5] $end
$var wire 1 >! curr_pc [4] $end
$var wire 1 ?! curr_pc [3] $end
$var wire 1 @! curr_pc [2] $end
$var wire 1 A! curr_pc [1] $end
$var wire 1 B! curr_pc [0] $end
$var wire 1 C! next_pc [15] $end
$var wire 1 D! next_pc [14] $end
$var wire 1 E! next_pc [13] $end
$var wire 1 F! next_pc [12] $end
$var wire 1 G! next_pc [11] $end
$var wire 1 H! next_pc [10] $end
$var wire 1 I! next_pc [9] $end
$var wire 1 J! next_pc [8] $end
$var wire 1 K! next_pc [7] $end
$var wire 1 L! next_pc [6] $end
$var wire 1 M! next_pc [5] $end
$var wire 1 N! next_pc [4] $end
$var wire 1 O! next_pc [3] $end
$var wire 1 P! next_pc [2] $end
$var wire 1 Q! next_pc [1] $end
$var wire 1 R! next_pc [0] $end
$var wire 1 S! if_id_npc [15] $end
$var wire 1 T! if_id_npc [14] $end
$var wire 1 U! if_id_npc [13] $end
$var wire 1 V! if_id_npc [12] $end
$var wire 1 W! if_id_npc [11] $end
$var wire 1 X! if_id_npc [10] $end
$var wire 1 Y! if_id_npc [9] $end
$var wire 1 Z! if_id_npc [8] $end
$var wire 1 [! if_id_npc [7] $end
$var wire 1 \! if_id_npc [6] $end
$var wire 1 ]! if_id_npc [5] $end
$var wire 1 ^! if_id_npc [4] $end
$var wire 1 _! if_id_npc [3] $end
$var wire 1 `! if_id_npc [2] $end
$var wire 1 a! if_id_npc [1] $end
$var wire 1 b! if_id_npc [0] $end
$var wire 1 c! id_ex_npc [15] $end
$var wire 1 d! id_ex_npc [14] $end
$var wire 1 e! id_ex_npc [13] $end
$var wire 1 f! id_ex_npc [12] $end
$var wire 1 g! id_ex_npc [11] $end
$var wire 1 h! id_ex_npc [10] $end
$var wire 1 i! id_ex_npc [9] $end
$var wire 1 j! id_ex_npc [8] $end
$var wire 1 k! id_ex_npc [7] $end
$var wire 1 l! id_ex_npc [6] $end
$var wire 1 m! id_ex_npc [5] $end
$var wire 1 n! id_ex_npc [4] $end
$var wire 1 o! id_ex_npc [3] $end
$var wire 1 p! id_ex_npc [2] $end
$var wire 1 q! id_ex_npc [1] $end
$var wire 1 r! id_ex_npc [0] $end
$var wire 1 s! ex_mem_npc [15] $end
$var wire 1 t! ex_mem_npc [14] $end
$var wire 1 u! ex_mem_npc [13] $end
$var wire 1 v! ex_mem_npc [12] $end
$var wire 1 w! ex_mem_npc [11] $end
$var wire 1 x! ex_mem_npc [10] $end
$var wire 1 y! ex_mem_npc [9] $end
$var wire 1 z! ex_mem_npc [8] $end
$var wire 1 {! ex_mem_npc [7] $end
$var wire 1 |! ex_mem_npc [6] $end
$var wire 1 }! ex_mem_npc [5] $end
$var wire 1 ~! ex_mem_npc [4] $end
$var wire 1 !" ex_mem_npc [3] $end
$var wire 1 "" ex_mem_npc [2] $end
$var wire 1 #" ex_mem_npc [1] $end
$var wire 1 $" ex_mem_npc [0] $end
$var wire 1 %" mem_wb_npc [15] $end
$var wire 1 &" mem_wb_npc [14] $end
$var wire 1 '" mem_wb_npc [13] $end
$var wire 1 (" mem_wb_npc [12] $end
$var wire 1 )" mem_wb_npc [11] $end
$var wire 1 *" mem_wb_npc [10] $end
$var wire 1 +" mem_wb_npc [9] $end
$var wire 1 ," mem_wb_npc [8] $end
$var wire 1 -" mem_wb_npc [7] $end
$var wire 1 ." mem_wb_npc [6] $end
$var wire 1 /" mem_wb_npc [5] $end
$var wire 1 0" mem_wb_npc [4] $end
$var wire 1 1" mem_wb_npc [3] $end
$var wire 1 2" mem_wb_npc [2] $end
$var wire 1 3" mem_wb_npc [1] $end
$var wire 1 4" mem_wb_npc [0] $end
$var wire 1 5" flag [2] $end
$var wire 1 6" flag [1] $end
$var wire 1 7" flag [0] $end
$var wire 1 8" ccc [2] $end
$var wire 1 9" ccc [1] $end
$var wire 1 :" ccc [0] $end
$var wire 1 ;" en [2] $end
$var wire 1 <" en [1] $end
$var wire 1 =" en [0] $end
$var wire 1 >" rs [3] $end
$var wire 1 ?" rs [2] $end
$var wire 1 @" rs [1] $end
$var wire 1 A" rs [0] $end
$var wire 1 B" rt [3] $end
$var wire 1 C" rt [2] $end
$var wire 1 D" rt [1] $end
$var wire 1 E" rt [0] $end
$var wire 1 F" rd [3] $end
$var wire 1 G" rd [2] $end
$var wire 1 H" rd [1] $end
$var wire 1 I" rd [0] $end
$var wire 1 J" destReg [3] $end
$var wire 1 K" destReg [2] $end
$var wire 1 L" destReg [1] $end
$var wire 1 M" destReg [0] $end
$var wire 1 N" id_ex_wreg [3] $end
$var wire 1 O" id_ex_wreg [2] $end
$var wire 1 P" id_ex_wreg [1] $end
$var wire 1 Q" id_ex_wreg [0] $end
$var wire 1 R" ex_mem_wreg [3] $end
$var wire 1 S" ex_mem_wreg [2] $end
$var wire 1 T" ex_mem_wreg [1] $end
$var wire 1 U" ex_mem_wreg [0] $end
$var wire 1 V" mem_wb_wreg [3] $end
$var wire 1 W" mem_wb_wreg [2] $end
$var wire 1 X" mem_wb_wreg [1] $end
$var wire 1 Y" mem_wb_wreg [0] $end
$var wire 1 Z" ex_mem_opc [3] $end
$var wire 1 [" ex_mem_opc [2] $end
$var wire 1 \" ex_mem_opc [1] $end
$var wire 1 ]" ex_mem_opc [0] $end
$var wire 1 ^" instr [15] $end
$var wire 1 _" instr [14] $end
$var wire 1 `" instr [13] $end
$var wire 1 a" instr [12] $end
$var wire 1 b" instr [11] $end
$var wire 1 c" instr [10] $end
$var wire 1 d" instr [9] $end
$var wire 1 e" instr [8] $end
$var wire 1 f" instr [7] $end
$var wire 1 g" instr [6] $end
$var wire 1 h" instr [5] $end
$var wire 1 i" instr [4] $end
$var wire 1 j" instr [3] $end
$var wire 1 k" instr [2] $end
$var wire 1 l" instr [1] $end
$var wire 1 m" instr [0] $end
$var wire 1 n" instr_if_id [15] $end
$var wire 1 o" instr_if_id [14] $end
$var wire 1 p" instr_if_id [13] $end
$var wire 1 q" instr_if_id [12] $end
$var wire 1 r" instr_if_id [11] $end
$var wire 1 s" instr_if_id [10] $end
$var wire 1 t" instr_if_id [9] $end
$var wire 1 u" instr_if_id [8] $end
$var wire 1 v" instr_if_id [7] $end
$var wire 1 w" instr_if_id [6] $end
$var wire 1 x" instr_if_id [5] $end
$var wire 1 y" instr_if_id [4] $end
$var wire 1 z" instr_if_id [3] $end
$var wire 1 {" instr_if_id [2] $end
$var wire 1 |" instr_if_id [1] $end
$var wire 1 }" instr_if_id [0] $end
$var wire 1 ~" if_id_reg1 [15] $end
$var wire 1 !# if_id_reg1 [14] $end
$var wire 1 "# if_id_reg1 [13] $end
$var wire 1 ## if_id_reg1 [12] $end
$var wire 1 $# if_id_reg1 [11] $end
$var wire 1 %# if_id_reg1 [10] $end
$var wire 1 &# if_id_reg1 [9] $end
$var wire 1 '# if_id_reg1 [8] $end
$var wire 1 (# if_id_reg1 [7] $end
$var wire 1 )# if_id_reg1 [6] $end
$var wire 1 *# if_id_reg1 [5] $end
$var wire 1 +# if_id_reg1 [4] $end
$var wire 1 ,# if_id_reg1 [3] $end
$var wire 1 -# if_id_reg1 [2] $end
$var wire 1 .# if_id_reg1 [1] $end
$var wire 1 /# if_id_reg1 [0] $end
$var wire 1 0# if_id_reg2 [15] $end
$var wire 1 1# if_id_reg2 [14] $end
$var wire 1 2# if_id_reg2 [13] $end
$var wire 1 3# if_id_reg2 [12] $end
$var wire 1 4# if_id_reg2 [11] $end
$var wire 1 5# if_id_reg2 [10] $end
$var wire 1 6# if_id_reg2 [9] $end
$var wire 1 7# if_id_reg2 [8] $end
$var wire 1 8# if_id_reg2 [7] $end
$var wire 1 9# if_id_reg2 [6] $end
$var wire 1 :# if_id_reg2 [5] $end
$var wire 1 ;# if_id_reg2 [4] $end
$var wire 1 <# if_id_reg2 [3] $end
$var wire 1 =# if_id_reg2 [2] $end
$var wire 1 ># if_id_reg2 [1] $end
$var wire 1 ?# if_id_reg2 [0] $end
$var wire 1 @# id_ex_reg1 [15] $end
$var wire 1 A# id_ex_reg1 [14] $end
$var wire 1 B# id_ex_reg1 [13] $end
$var wire 1 C# id_ex_reg1 [12] $end
$var wire 1 D# id_ex_reg1 [11] $end
$var wire 1 E# id_ex_reg1 [10] $end
$var wire 1 F# id_ex_reg1 [9] $end
$var wire 1 G# id_ex_reg1 [8] $end
$var wire 1 H# id_ex_reg1 [7] $end
$var wire 1 I# id_ex_reg1 [6] $end
$var wire 1 J# id_ex_reg1 [5] $end
$var wire 1 K# id_ex_reg1 [4] $end
$var wire 1 L# id_ex_reg1 [3] $end
$var wire 1 M# id_ex_reg1 [2] $end
$var wire 1 N# id_ex_reg1 [1] $end
$var wire 1 O# id_ex_reg1 [0] $end
$var wire 1 P# id_ex_reg2 [15] $end
$var wire 1 Q# id_ex_reg2 [14] $end
$var wire 1 R# id_ex_reg2 [13] $end
$var wire 1 S# id_ex_reg2 [12] $end
$var wire 1 T# id_ex_reg2 [11] $end
$var wire 1 U# id_ex_reg2 [10] $end
$var wire 1 V# id_ex_reg2 [9] $end
$var wire 1 W# id_ex_reg2 [8] $end
$var wire 1 X# id_ex_reg2 [7] $end
$var wire 1 Y# id_ex_reg2 [6] $end
$var wire 1 Z# id_ex_reg2 [5] $end
$var wire 1 [# id_ex_reg2 [4] $end
$var wire 1 \# id_ex_reg2 [3] $end
$var wire 1 ]# id_ex_reg2 [2] $end
$var wire 1 ^# id_ex_reg2 [1] $end
$var wire 1 _# id_ex_reg2 [0] $end
$var wire 1 `# ex_mem_reg2 [15] $end
$var wire 1 a# ex_mem_reg2 [14] $end
$var wire 1 b# ex_mem_reg2 [13] $end
$var wire 1 c# ex_mem_reg2 [12] $end
$var wire 1 d# ex_mem_reg2 [11] $end
$var wire 1 e# ex_mem_reg2 [10] $end
$var wire 1 f# ex_mem_reg2 [9] $end
$var wire 1 g# ex_mem_reg2 [8] $end
$var wire 1 h# ex_mem_reg2 [7] $end
$var wire 1 i# ex_mem_reg2 [6] $end
$var wire 1 j# ex_mem_reg2 [5] $end
$var wire 1 k# ex_mem_reg2 [4] $end
$var wire 1 l# ex_mem_reg2 [3] $end
$var wire 1 m# ex_mem_reg2 [2] $end
$var wire 1 n# ex_mem_reg2 [1] $end
$var wire 1 o# ex_mem_reg2 [0] $end
$var wire 1 p# ex_aluout [15] $end
$var wire 1 q# ex_aluout [14] $end
$var wire 1 r# ex_aluout [13] $end
$var wire 1 s# ex_aluout [12] $end
$var wire 1 t# ex_aluout [11] $end
$var wire 1 u# ex_aluout [10] $end
$var wire 1 v# ex_aluout [9] $end
$var wire 1 w# ex_aluout [8] $end
$var wire 1 x# ex_aluout [7] $end
$var wire 1 y# ex_aluout [6] $end
$var wire 1 z# ex_aluout [5] $end
$var wire 1 {# ex_aluout [4] $end
$var wire 1 |# ex_aluout [3] $end
$var wire 1 }# ex_aluout [2] $end
$var wire 1 ~# ex_aluout [1] $end
$var wire 1 !$ ex_aluout [0] $end
$var wire 1 "$ ex_mem_aluout [15] $end
$var wire 1 #$ ex_mem_aluout [14] $end
$var wire 1 $$ ex_mem_aluout [13] $end
$var wire 1 %$ ex_mem_aluout [12] $end
$var wire 1 &$ ex_mem_aluout [11] $end
$var wire 1 '$ ex_mem_aluout [10] $end
$var wire 1 ($ ex_mem_aluout [9] $end
$var wire 1 )$ ex_mem_aluout [8] $end
$var wire 1 *$ ex_mem_aluout [7] $end
$var wire 1 +$ ex_mem_aluout [6] $end
$var wire 1 ,$ ex_mem_aluout [5] $end
$var wire 1 -$ ex_mem_aluout [4] $end
$var wire 1 .$ ex_mem_aluout [3] $end
$var wire 1 /$ ex_mem_aluout [2] $end
$var wire 1 0$ ex_mem_aluout [1] $end
$var wire 1 1$ ex_mem_aluout [0] $end
$var wire 1 2$ mem_wb_aluout [15] $end
$var wire 1 3$ mem_wb_aluout [14] $end
$var wire 1 4$ mem_wb_aluout [13] $end
$var wire 1 5$ mem_wb_aluout [12] $end
$var wire 1 6$ mem_wb_aluout [11] $end
$var wire 1 7$ mem_wb_aluout [10] $end
$var wire 1 8$ mem_wb_aluout [9] $end
$var wire 1 9$ mem_wb_aluout [8] $end
$var wire 1 :$ mem_wb_aluout [7] $end
$var wire 1 ;$ mem_wb_aluout [6] $end
$var wire 1 <$ mem_wb_aluout [5] $end
$var wire 1 =$ mem_wb_aluout [4] $end
$var wire 1 >$ mem_wb_aluout [3] $end
$var wire 1 ?$ mem_wb_aluout [2] $end
$var wire 1 @$ mem_wb_aluout [1] $end
$var wire 1 A$ mem_wb_aluout [0] $end
$var wire 1 B$ mem_memdata [15] $end
$var wire 1 C$ mem_memdata [14] $end
$var wire 1 D$ mem_memdata [13] $end
$var wire 1 E$ mem_memdata [12] $end
$var wire 1 F$ mem_memdata [11] $end
$var wire 1 G$ mem_memdata [10] $end
$var wire 1 H$ mem_memdata [9] $end
$var wire 1 I$ mem_memdata [8] $end
$var wire 1 J$ mem_memdata [7] $end
$var wire 1 K$ mem_memdata [6] $end
$var wire 1 L$ mem_memdata [5] $end
$var wire 1 M$ mem_memdata [4] $end
$var wire 1 N$ mem_memdata [3] $end
$var wire 1 O$ mem_memdata [2] $end
$var wire 1 P$ mem_memdata [1] $end
$var wire 1 Q$ mem_memdata [0] $end
$var wire 1 R$ mem_wb_memdata [15] $end
$var wire 1 S$ mem_wb_memdata [14] $end
$var wire 1 T$ mem_wb_memdata [13] $end
$var wire 1 U$ mem_wb_memdata [12] $end
$var wire 1 V$ mem_wb_memdata [11] $end
$var wire 1 W$ mem_wb_memdata [10] $end
$var wire 1 X$ mem_wb_memdata [9] $end
$var wire 1 Y$ mem_wb_memdata [8] $end
$var wire 1 Z$ mem_wb_memdata [7] $end
$var wire 1 [$ mem_wb_memdata [6] $end
$var wire 1 \$ mem_wb_memdata [5] $end
$var wire 1 ]$ mem_wb_memdata [4] $end
$var wire 1 ^$ mem_wb_memdata [3] $end
$var wire 1 _$ mem_wb_memdata [2] $end
$var wire 1 `$ mem_wb_memdata [1] $end
$var wire 1 a$ mem_wb_memdata [0] $end
$var wire 1 b$ wb_regdata [15] $end
$var wire 1 c$ wb_regdata [14] $end
$var wire 1 d$ wb_regdata [13] $end
$var wire 1 e$ wb_regdata [12] $end
$var wire 1 f$ wb_regdata [11] $end
$var wire 1 g$ wb_regdata [10] $end
$var wire 1 h$ wb_regdata [9] $end
$var wire 1 i$ wb_regdata [8] $end
$var wire 1 j$ wb_regdata [7] $end
$var wire 1 k$ wb_regdata [6] $end
$var wire 1 l$ wb_regdata [5] $end
$var wire 1 m$ wb_regdata [4] $end
$var wire 1 n$ wb_regdata [3] $end
$var wire 1 o$ wb_regdata [2] $end
$var wire 1 p$ wb_regdata [1] $end
$var wire 1 q$ wb_regdata [0] $end
$var wire 1 r$ aluA [15] $end
$var wire 1 s$ aluA [14] $end
$var wire 1 t$ aluA [13] $end
$var wire 1 u$ aluA [12] $end
$var wire 1 v$ aluA [11] $end
$var wire 1 w$ aluA [10] $end
$var wire 1 x$ aluA [9] $end
$var wire 1 y$ aluA [8] $end
$var wire 1 z$ aluA [7] $end
$var wire 1 {$ aluA [6] $end
$var wire 1 |$ aluA [5] $end
$var wire 1 }$ aluA [4] $end
$var wire 1 ~$ aluA [3] $end
$var wire 1 !% aluA [2] $end
$var wire 1 "% aluA [1] $end
$var wire 1 #% aluA [0] $end
$var wire 1 $% aluB [15] $end
$var wire 1 %% aluB [14] $end
$var wire 1 &% aluB [13] $end
$var wire 1 '% aluB [12] $end
$var wire 1 (% aluB [11] $end
$var wire 1 )% aluB [10] $end
$var wire 1 *% aluB [9] $end
$var wire 1 +% aluB [8] $end
$var wire 1 ,% aluB [7] $end
$var wire 1 -% aluB [6] $end
$var wire 1 .% aluB [5] $end
$var wire 1 /% aluB [4] $end
$var wire 1 0% aluB [3] $end
$var wire 1 1% aluB [2] $end
$var wire 1 2% aluB [1] $end
$var wire 1 3% aluB [0] $end
$var wire 1 4% id_imm [15] $end
$var wire 1 5% id_imm [14] $end
$var wire 1 6% id_imm [13] $end
$var wire 1 7% id_imm [12] $end
$var wire 1 8% id_imm [11] $end
$var wire 1 9% id_imm [10] $end
$var wire 1 :% id_imm [9] $end
$var wire 1 ;% id_imm [8] $end
$var wire 1 <% id_imm [7] $end
$var wire 1 =% id_imm [6] $end
$var wire 1 >% id_imm [5] $end
$var wire 1 ?% id_imm [4] $end
$var wire 1 @% id_imm [3] $end
$var wire 1 A% id_imm [2] $end
$var wire 1 B% id_imm [1] $end
$var wire 1 C% id_imm [0] $end
$var wire 1 D% id_ex_immm [15] $end
$var wire 1 E% id_ex_immm [14] $end
$var wire 1 F% id_ex_immm [13] $end
$var wire 1 G% id_ex_immm [12] $end
$var wire 1 H% id_ex_immm [11] $end
$var wire 1 I% id_ex_immm [10] $end
$var wire 1 J% id_ex_immm [9] $end
$var wire 1 K% id_ex_immm [8] $end
$var wire 1 L% id_ex_immm [7] $end
$var wire 1 M% id_ex_immm [6] $end
$var wire 1 N% id_ex_immm [5] $end
$var wire 1 O% id_ex_immm [4] $end
$var wire 1 P% id_ex_immm [3] $end
$var wire 1 Q% id_ex_immm [2] $end
$var wire 1 R% id_ex_immm [1] $end
$var wire 1 S% id_ex_immm [0] $end
$var wire 1 T% brAddr [15] $end
$var wire 1 U% brAddr [14] $end
$var wire 1 V% brAddr [13] $end
$var wire 1 W% brAddr [12] $end
$var wire 1 X% brAddr [11] $end
$var wire 1 Y% brAddr [10] $end
$var wire 1 Z% brAddr [9] $end
$var wire 1 [% brAddr [8] $end
$var wire 1 \% brAddr [7] $end
$var wire 1 ]% brAddr [6] $end
$var wire 1 ^% brAddr [5] $end
$var wire 1 _% brAddr [4] $end
$var wire 1 `% brAddr [3] $end
$var wire 1 a% brAddr [2] $end
$var wire 1 b% brAddr [1] $end
$var wire 1 c% brAddr [0] $end
$var wire 1 d% stall $end
$var wire 1 e% flush $end
$var wire 1 f% if_flush $end
$var wire 1 g% if_id_halt $end
$var wire 1 h% if_id_RegDst $end
$var wire 1 i% id_ex_RegDst $end
$var wire 1 j% if_id_ALUSrc $end
$var wire 1 k% id_ex_ALUSrc $end
$var wire 1 l% if_id_MemRead $end
$var wire 1 m% id_ex_MemRead $end
$var wire 1 n% ex_mem_MemRead $end
$var wire 1 o% if_id_MemWrite $end
$var wire 1 p% id_ex_MemWrite $end
$var wire 1 q% ex_mem_MemWrite $end
$var wire 1 r% if_id_MemtoReg $end
$var wire 1 s% id_ex_MemtoReg $end
$var wire 1 t% ex_mem_MemtoReg $end
$var wire 1 u% mem_wb_MemtoReg $end
$var wire 1 v% if_id_RegWrite $end
$var wire 1 w% id_ex_RegWrite $end
$var wire 1 x% ex_mem_RegWrite $end
$var wire 1 y% mem_wb_RegWrite $end
$var wire 1 z% if_id_Lower $end
$var wire 1 {% id_ex_Lower $end
$var wire 1 |% if_id_Higher $end
$var wire 1 }% id_ex_Higher $end
$var wire 1 ~% if_id_BEn $end
$var wire 1 !& id_ex_BEn $end
$var wire 1 "& ex_mem_BEn $end
$var wire 1 #& mem_wb_BEn $end
$var wire 1 $& if_id_Br $end
$var wire 1 %& id_ex_Br $end
$var wire 1 && ex_mem_Br $end
$var wire 1 '& mem_wb_Br $end
$var wire 1 (& if_id_PCS $end
$var wire 1 )& id_ex_PCS $end
$var wire 1 *& ex_mem_PCS $end
$var wire 1 +& mem_wb_PCS $end

$scope module if_id $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 ,& en $end
$var wire 1 T% npc_in [15] $end
$var wire 1 U% npc_in [14] $end
$var wire 1 V% npc_in [13] $end
$var wire 1 W% npc_in [12] $end
$var wire 1 X% npc_in [11] $end
$var wire 1 Y% npc_in [10] $end
$var wire 1 Z% npc_in [9] $end
$var wire 1 [% npc_in [8] $end
$var wire 1 \% npc_in [7] $end
$var wire 1 ]% npc_in [6] $end
$var wire 1 ^% npc_in [5] $end
$var wire 1 _% npc_in [4] $end
$var wire 1 `% npc_in [3] $end
$var wire 1 a% npc_in [2] $end
$var wire 1 b% npc_in [1] $end
$var wire 1 c% npc_in [0] $end
$var wire 1 ^" instr_in [15] $end
$var wire 1 _" instr_in [14] $end
$var wire 1 `" instr_in [13] $end
$var wire 1 a" instr_in [12] $end
$var wire 1 b" instr_in [11] $end
$var wire 1 c" instr_in [10] $end
$var wire 1 d" instr_in [9] $end
$var wire 1 e" instr_in [8] $end
$var wire 1 f" instr_in [7] $end
$var wire 1 g" instr_in [6] $end
$var wire 1 h" instr_in [5] $end
$var wire 1 i" instr_in [4] $end
$var wire 1 j" instr_in [3] $end
$var wire 1 k" instr_in [2] $end
$var wire 1 l" instr_in [1] $end
$var wire 1 m" instr_in [0] $end
$var wire 1 S! npc_out [15] $end
$var wire 1 T! npc_out [14] $end
$var wire 1 U! npc_out [13] $end
$var wire 1 V! npc_out [12] $end
$var wire 1 W! npc_out [11] $end
$var wire 1 X! npc_out [10] $end
$var wire 1 Y! npc_out [9] $end
$var wire 1 Z! npc_out [8] $end
$var wire 1 [! npc_out [7] $end
$var wire 1 \! npc_out [6] $end
$var wire 1 ]! npc_out [5] $end
$var wire 1 ^! npc_out [4] $end
$var wire 1 _! npc_out [3] $end
$var wire 1 `! npc_out [2] $end
$var wire 1 a! npc_out [1] $end
$var wire 1 b! npc_out [0] $end
$var wire 1 n" instr_out [15] $end
$var wire 1 o" instr_out [14] $end
$var wire 1 p" instr_out [13] $end
$var wire 1 q" instr_out [12] $end
$var wire 1 r" instr_out [11] $end
$var wire 1 s" instr_out [10] $end
$var wire 1 t" instr_out [9] $end
$var wire 1 u" instr_out [8] $end
$var wire 1 v" instr_out [7] $end
$var wire 1 w" instr_out [6] $end
$var wire 1 x" instr_out [5] $end
$var wire 1 y" instr_out [4] $end
$var wire 1 z" instr_out [3] $end
$var wire 1 {" instr_out [2] $end
$var wire 1 |" instr_out [1] $end
$var wire 1 }" instr_out [0] $end

$scope module instr_reg $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 ,& WriteReg $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 ^" D [15] $end
$var wire 1 _" D [14] $end
$var wire 1 `" D [13] $end
$var wire 1 a" D [12] $end
$var wire 1 b" D [11] $end
$var wire 1 c" D [10] $end
$var wire 1 d" D [9] $end
$var wire 1 e" D [8] $end
$var wire 1 f" D [7] $end
$var wire 1 g" D [6] $end
$var wire 1 h" D [5] $end
$var wire 1 i" D [4] $end
$var wire 1 j" D [3] $end
$var wire 1 k" D [2] $end
$var wire 1 l" D [1] $end
$var wire 1 m" D [0] $end
$var wire 1 n" Bitline1 [15] $end
$var wire 1 o" Bitline1 [14] $end
$var wire 1 p" Bitline1 [13] $end
$var wire 1 q" Bitline1 [12] $end
$var wire 1 r" Bitline1 [11] $end
$var wire 1 s" Bitline1 [10] $end
$var wire 1 t" Bitline1 [9] $end
$var wire 1 u" Bitline1 [8] $end
$var wire 1 v" Bitline1 [7] $end
$var wire 1 w" Bitline1 [6] $end
$var wire 1 x" Bitline1 [5] $end
$var wire 1 y" Bitline1 [4] $end
$var wire 1 z" Bitline1 [3] $end
$var wire 1 {" Bitline1 [2] $end
$var wire 1 |" Bitline1 [1] $end
$var wire 1 }" Bitline1 [0] $end
$var wire 1 /& Bitline2 [15] $end
$var wire 1 0& Bitline2 [14] $end
$var wire 1 1& Bitline2 [13] $end
$var wire 1 2& Bitline2 [12] $end
$var wire 1 3& Bitline2 [11] $end
$var wire 1 4& Bitline2 [10] $end
$var wire 1 5& Bitline2 [9] $end
$var wire 1 6& Bitline2 [8] $end
$var wire 1 7& Bitline2 [7] $end
$var wire 1 8& Bitline2 [6] $end
$var wire 1 9& Bitline2 [5] $end
$var wire 1 :& Bitline2 [4] $end
$var wire 1 ;& Bitline2 [3] $end
$var wire 1 <& Bitline2 [2] $end
$var wire 1 =& Bitline2 [1] $end
$var wire 1 >& Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 m" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 }" Bitline1 $end
$var wire 1 >& Bitline2 $end
$var wire 1 ?& ff_out $end

$scope module flipflop $end
$var wire 1 ?& q $end
$var wire 1 m" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 @& state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 l" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 |" Bitline1 $end
$var wire 1 =& Bitline2 $end
$var wire 1 A& ff_out $end

$scope module flipflop $end
$var wire 1 A& q $end
$var wire 1 l" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 B& state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 k" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 {" Bitline1 $end
$var wire 1 <& Bitline2 $end
$var wire 1 C& ff_out $end

$scope module flipflop $end
$var wire 1 C& q $end
$var wire 1 k" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 D& state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 j" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 z" Bitline1 $end
$var wire 1 ;& Bitline2 $end
$var wire 1 E& ff_out $end

$scope module flipflop $end
$var wire 1 E& q $end
$var wire 1 j" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 F& state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 i" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 y" Bitline1 $end
$var wire 1 :& Bitline2 $end
$var wire 1 G& ff_out $end

$scope module flipflop $end
$var wire 1 G& q $end
$var wire 1 i" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 H& state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 h" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 x" Bitline1 $end
$var wire 1 9& Bitline2 $end
$var wire 1 I& ff_out $end

$scope module flipflop $end
$var wire 1 I& q $end
$var wire 1 h" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 J& state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 g" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 w" Bitline1 $end
$var wire 1 8& Bitline2 $end
$var wire 1 K& ff_out $end

$scope module flipflop $end
$var wire 1 K& q $end
$var wire 1 g" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 L& state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 f" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 v" Bitline1 $end
$var wire 1 7& Bitline2 $end
$var wire 1 M& ff_out $end

$scope module flipflop $end
$var wire 1 M& q $end
$var wire 1 f" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 N& state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 e" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 u" Bitline1 $end
$var wire 1 6& Bitline2 $end
$var wire 1 O& ff_out $end

$scope module flipflop $end
$var wire 1 O& q $end
$var wire 1 e" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 P& state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 d" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 t" Bitline1 $end
$var wire 1 5& Bitline2 $end
$var wire 1 Q& ff_out $end

$scope module flipflop $end
$var wire 1 Q& q $end
$var wire 1 d" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 R& state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 c" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 s" Bitline1 $end
$var wire 1 4& Bitline2 $end
$var wire 1 S& ff_out $end

$scope module flipflop $end
$var wire 1 S& q $end
$var wire 1 c" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 T& state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 b" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 r" Bitline1 $end
$var wire 1 3& Bitline2 $end
$var wire 1 U& ff_out $end

$scope module flipflop $end
$var wire 1 U& q $end
$var wire 1 b" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 V& state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 a" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 q" Bitline1 $end
$var wire 1 2& Bitline2 $end
$var wire 1 W& ff_out $end

$scope module flipflop $end
$var wire 1 W& q $end
$var wire 1 a" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 X& state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 `" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 p" Bitline1 $end
$var wire 1 1& Bitline2 $end
$var wire 1 Y& ff_out $end

$scope module flipflop $end
$var wire 1 Y& q $end
$var wire 1 `" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 Z& state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 _" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 o" Bitline1 $end
$var wire 1 0& Bitline2 $end
$var wire 1 [& ff_out $end

$scope module flipflop $end
$var wire 1 [& q $end
$var wire 1 _" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 \& state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 ^" D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 -& ReadEnable1 $end
$var wire 1 .& ReadEnable2 $end
$var wire 1 n" Bitline1 $end
$var wire 1 /& Bitline2 $end
$var wire 1 ]& ff_out $end

$scope module flipflop $end
$var wire 1 ]& q $end
$var wire 1 ^" d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 ^& state $end
$upscope $end
$upscope $end
$upscope $end

$scope module npc_reg $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 ,& WriteReg $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 T% D [15] $end
$var wire 1 U% D [14] $end
$var wire 1 V% D [13] $end
$var wire 1 W% D [12] $end
$var wire 1 X% D [11] $end
$var wire 1 Y% D [10] $end
$var wire 1 Z% D [9] $end
$var wire 1 [% D [8] $end
$var wire 1 \% D [7] $end
$var wire 1 ]% D [6] $end
$var wire 1 ^% D [5] $end
$var wire 1 _% D [4] $end
$var wire 1 `% D [3] $end
$var wire 1 a% D [2] $end
$var wire 1 b% D [1] $end
$var wire 1 c% D [0] $end
$var wire 1 S! Bitline1 [15] $end
$var wire 1 T! Bitline1 [14] $end
$var wire 1 U! Bitline1 [13] $end
$var wire 1 V! Bitline1 [12] $end
$var wire 1 W! Bitline1 [11] $end
$var wire 1 X! Bitline1 [10] $end
$var wire 1 Y! Bitline1 [9] $end
$var wire 1 Z! Bitline1 [8] $end
$var wire 1 [! Bitline1 [7] $end
$var wire 1 \! Bitline1 [6] $end
$var wire 1 ]! Bitline1 [5] $end
$var wire 1 ^! Bitline1 [4] $end
$var wire 1 _! Bitline1 [3] $end
$var wire 1 `! Bitline1 [2] $end
$var wire 1 a! Bitline1 [1] $end
$var wire 1 b! Bitline1 [0] $end
$var wire 1 a& Bitline2 [15] $end
$var wire 1 b& Bitline2 [14] $end
$var wire 1 c& Bitline2 [13] $end
$var wire 1 d& Bitline2 [12] $end
$var wire 1 e& Bitline2 [11] $end
$var wire 1 f& Bitline2 [10] $end
$var wire 1 g& Bitline2 [9] $end
$var wire 1 h& Bitline2 [8] $end
$var wire 1 i& Bitline2 [7] $end
$var wire 1 j& Bitline2 [6] $end
$var wire 1 k& Bitline2 [5] $end
$var wire 1 l& Bitline2 [4] $end
$var wire 1 m& Bitline2 [3] $end
$var wire 1 n& Bitline2 [2] $end
$var wire 1 o& Bitline2 [1] $end
$var wire 1 p& Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 c% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 b! Bitline1 $end
$var wire 1 p& Bitline2 $end
$var wire 1 q& ff_out $end

$scope module flipflop $end
$var wire 1 q& q $end
$var wire 1 c% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 r& state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 b% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 a! Bitline1 $end
$var wire 1 o& Bitline2 $end
$var wire 1 s& ff_out $end

$scope module flipflop $end
$var wire 1 s& q $end
$var wire 1 b% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 t& state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 a% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 `! Bitline1 $end
$var wire 1 n& Bitline2 $end
$var wire 1 u& ff_out $end

$scope module flipflop $end
$var wire 1 u& q $end
$var wire 1 a% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 v& state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 `% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 _! Bitline1 $end
$var wire 1 m& Bitline2 $end
$var wire 1 w& ff_out $end

$scope module flipflop $end
$var wire 1 w& q $end
$var wire 1 `% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 x& state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 _% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 ^! Bitline1 $end
$var wire 1 l& Bitline2 $end
$var wire 1 y& ff_out $end

$scope module flipflop $end
$var wire 1 y& q $end
$var wire 1 _% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 z& state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 ^% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 ]! Bitline1 $end
$var wire 1 k& Bitline2 $end
$var wire 1 {& ff_out $end

$scope module flipflop $end
$var wire 1 {& q $end
$var wire 1 ^% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 |& state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 ]% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 \! Bitline1 $end
$var wire 1 j& Bitline2 $end
$var wire 1 }& ff_out $end

$scope module flipflop $end
$var wire 1 }& q $end
$var wire 1 ]% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 ~& state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 \% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 [! Bitline1 $end
$var wire 1 i& Bitline2 $end
$var wire 1 !' ff_out $end

$scope module flipflop $end
$var wire 1 !' q $end
$var wire 1 \% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 "' state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 [% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Z! Bitline1 $end
$var wire 1 h& Bitline2 $end
$var wire 1 #' ff_out $end

$scope module flipflop $end
$var wire 1 #' q $end
$var wire 1 [% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 $' state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 Z% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 Y! Bitline1 $end
$var wire 1 g& Bitline2 $end
$var wire 1 %' ff_out $end

$scope module flipflop $end
$var wire 1 %' q $end
$var wire 1 Z% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 &' state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 Y% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 X! Bitline1 $end
$var wire 1 f& Bitline2 $end
$var wire 1 '' ff_out $end

$scope module flipflop $end
$var wire 1 '' q $end
$var wire 1 Y% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 (' state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 X% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 W! Bitline1 $end
$var wire 1 e& Bitline2 $end
$var wire 1 )' ff_out $end

$scope module flipflop $end
$var wire 1 )' q $end
$var wire 1 X% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 *' state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 W% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 V! Bitline1 $end
$var wire 1 d& Bitline2 $end
$var wire 1 +' ff_out $end

$scope module flipflop $end
$var wire 1 +' q $end
$var wire 1 W% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 ,' state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 V% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 U! Bitline1 $end
$var wire 1 c& Bitline2 $end
$var wire 1 -' ff_out $end

$scope module flipflop $end
$var wire 1 -' q $end
$var wire 1 V% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 .' state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 U% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 T! Bitline1 $end
$var wire 1 b& Bitline2 $end
$var wire 1 /' ff_out $end

$scope module flipflop $end
$var wire 1 /' q $end
$var wire 1 U% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 0' state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var wire 1 T% D $end
$var wire 1 ,& WriteEnable $end
$var wire 1 _& ReadEnable1 $end
$var wire 1 `& ReadEnable2 $end
$var wire 1 S! Bitline1 $end
$var wire 1 a& Bitline2 $end
$var wire 1 1' ff_out $end

$scope module flipflop $end
$var wire 1 1' q $end
$var wire 1 T% d $end
$var wire 1 ,& wen $end
$var wire 1 1! clk $end
$var wire 1 f% rst $end
$var reg 1 2' state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module pcReg $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var wire 1 4' WriteEnable $end
$var wire 1 T% D [15] $end
$var wire 1 U% D [14] $end
$var wire 1 V% D [13] $end
$var wire 1 W% D [12] $end
$var wire 1 X% D [11] $end
$var wire 1 Y% D [10] $end
$var wire 1 Z% D [9] $end
$var wire 1 [% D [8] $end
$var wire 1 \% D [7] $end
$var wire 1 ]% D [6] $end
$var wire 1 ^% D [5] $end
$var wire 1 _% D [4] $end
$var wire 1 `% D [3] $end
$var wire 1 a% D [2] $end
$var wire 1 b% D [1] $end
$var wire 1 c% D [0] $end
$var wire 1 3! q [15] $end
$var wire 1 4! q [14] $end
$var wire 1 5! q [13] $end
$var wire 1 6! q [12] $end
$var wire 1 7! q [11] $end
$var wire 1 8! q [10] $end
$var wire 1 9! q [9] $end
$var wire 1 :! q [8] $end
$var wire 1 ;! q [7] $end
$var wire 1 <! q [6] $end
$var wire 1 =! q [5] $end
$var wire 1 >! q [4] $end
$var wire 1 ?! q [3] $end
$var wire 1 @! q [2] $end
$var wire 1 A! q [1] $end
$var wire 1 B! q [0] $end

$scope module ff0 $end
$var wire 1 B! q $end
$var wire 1 c% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 5' state $end
$upscope $end

$scope module ff1 $end
$var wire 1 A! q $end
$var wire 1 b% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 6' state $end
$upscope $end

$scope module ff2 $end
$var wire 1 @! q $end
$var wire 1 a% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 7' state $end
$upscope $end

$scope module ff3 $end
$var wire 1 ?! q $end
$var wire 1 `% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 8' state $end
$upscope $end

$scope module ff4 $end
$var wire 1 >! q $end
$var wire 1 _% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 9' state $end
$upscope $end

$scope module ff5 $end
$var wire 1 =! q $end
$var wire 1 ^% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 :' state $end
$upscope $end

$scope module ff6 $end
$var wire 1 <! q $end
$var wire 1 ]% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 ;' state $end
$upscope $end

$scope module ff7 $end
$var wire 1 ;! q $end
$var wire 1 \% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 <' state $end
$upscope $end

$scope module ff8 $end
$var wire 1 :! q $end
$var wire 1 [% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 =' state $end
$upscope $end

$scope module ff9 $end
$var wire 1 9! q $end
$var wire 1 Z% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 >' state $end
$upscope $end

$scope module ff10 $end
$var wire 1 8! q $end
$var wire 1 Y% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 ?' state $end
$upscope $end

$scope module ff11 $end
$var wire 1 7! q $end
$var wire 1 X% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 @' state $end
$upscope $end

$scope module ff12 $end
$var wire 1 6! q $end
$var wire 1 W% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 A' state $end
$upscope $end

$scope module ff13 $end
$var wire 1 5! q $end
$var wire 1 V% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 B' state $end
$upscope $end

$scope module ff14 $end
$var wire 1 4! q $end
$var wire 1 U% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 C' state $end
$upscope $end

$scope module ff15 $end
$var wire 1 3! q $end
$var wire 1 T% d $end
$var wire 1 4' wen $end
$var wire 1 1! clk $end
$var wire 1 3' rst $end
$var reg 1 D' state $end
$upscope $end
$upscope $end

$scope module iMem $end
$var parameter 32 E' ADDR_WIDTH $end
$var wire 1 ^" data_out [15] $end
$var wire 1 _" data_out [14] $end
$var wire 1 `" data_out [13] $end
$var wire 1 a" data_out [12] $end
$var wire 1 b" data_out [11] $end
$var wire 1 c" data_out [10] $end
$var wire 1 d" data_out [9] $end
$var wire 1 e" data_out [8] $end
$var wire 1 f" data_out [7] $end
$var wire 1 g" data_out [6] $end
$var wire 1 h" data_out [5] $end
$var wire 1 i" data_out [4] $end
$var wire 1 j" data_out [3] $end
$var wire 1 k" data_out [2] $end
$var wire 1 l" data_out [1] $end
$var wire 1 m" data_out [0] $end
$var wire 1 3! addr [15] $end
$var wire 1 4! addr [14] $end
$var wire 1 5! addr [13] $end
$var wire 1 6! addr [12] $end
$var wire 1 7! addr [11] $end
$var wire 1 8! addr [10] $end
$var wire 1 9! addr [9] $end
$var wire 1 :! addr [8] $end
$var wire 1 ;! addr [7] $end
$var wire 1 <! addr [6] $end
$var wire 1 =! addr [5] $end
$var wire 1 >! addr [4] $end
$var wire 1 ?! addr [3] $end
$var wire 1 @! addr [2] $end
$var wire 1 A! addr [1] $end
$var wire 1 B! addr [0] $end
$var wire 1 1! clk $end
$var wire 1 F' rst $end
$var reg 1 G' loaded $end
$upscope $end

$scope module pcControl $end
$var wire 1 ~% B $end
$var wire 1 b" C [2] $end
$var wire 1 c" C [1] $end
$var wire 1 d" C [0] $end
$var wire 1 e" I [8] $end
$var wire 1 f" I [7] $end
$var wire 1 g" I [6] $end
$var wire 1 h" I [5] $end
$var wire 1 i" I [4] $end
$var wire 1 j" I [3] $end
$var wire 1 k" I [2] $end
$var wire 1 l" I [1] $end
$var wire 1 m" I [0] $end
$var wire 1 5" F [2] $end
$var wire 1 6" F [1] $end
$var wire 1 7" F [0] $end
$var wire 1 3! PC_in [15] $end
$var wire 1 4! PC_in [14] $end
$var wire 1 5! PC_in [13] $end
$var wire 1 6! PC_in [12] $end
$var wire 1 7! PC_in [11] $end
$var wire 1 8! PC_in [10] $end
$var wire 1 9! PC_in [9] $end
$var wire 1 :! PC_in [8] $end
$var wire 1 ;! PC_in [7] $end
$var wire 1 <! PC_in [6] $end
$var wire 1 =! PC_in [5] $end
$var wire 1 >! PC_in [4] $end
$var wire 1 ?! PC_in [3] $end
$var wire 1 @! PC_in [2] $end
$var wire 1 A! PC_in [1] $end
$var wire 1 B! PC_in [0] $end
$var wire 1 C! PC_out [15] $end
$var wire 1 D! PC_out [14] $end
$var wire 1 E! PC_out [13] $end
$var wire 1 F! PC_out [12] $end
$var wire 1 G! PC_out [11] $end
$var wire 1 H! PC_out [10] $end
$var wire 1 I! PC_out [9] $end
$var wire 1 J! PC_out [8] $end
$var wire 1 K! PC_out [7] $end
$var wire 1 L! PC_out [6] $end
$var wire 1 M! PC_out [5] $end
$var wire 1 N! PC_out [4] $end
$var wire 1 O! PC_out [3] $end
$var wire 1 P! PC_out [2] $end
$var wire 1 Q! PC_out [1] $end
$var wire 1 R! PC_out [0] $end
$var wire 1 H' taken [15] $end
$var wire 1 I' taken [14] $end
$var wire 1 J' taken [13] $end
$var wire 1 K' taken [12] $end
$var wire 1 L' taken [11] $end
$var wire 1 M' taken [10] $end
$var wire 1 N' taken [9] $end
$var wire 1 O' taken [8] $end
$var wire 1 P' taken [7] $end
$var wire 1 Q' taken [6] $end
$var wire 1 R' taken [5] $end
$var wire 1 S' taken [4] $end
$var wire 1 T' taken [3] $end
$var wire 1 U' taken [2] $end
$var wire 1 V' taken [1] $end
$var wire 1 W' taken [0] $end
$var wire 1 X' notTaken [15] $end
$var wire 1 Y' notTaken [14] $end
$var wire 1 Z' notTaken [13] $end
$var wire 1 [' notTaken [12] $end
$var wire 1 \' notTaken [11] $end
$var wire 1 ]' notTaken [10] $end
$var wire 1 ^' notTaken [9] $end
$var wire 1 _' notTaken [8] $end
$var wire 1 `' notTaken [7] $end
$var wire 1 a' notTaken [6] $end
$var wire 1 b' notTaken [5] $end
$var wire 1 c' notTaken [4] $end
$var wire 1 d' notTaken [3] $end
$var wire 1 e' notTaken [2] $end
$var wire 1 f' notTaken [1] $end
$var wire 1 g' notTaken [0] $end
$var reg 16 h' target_addr [15:0] $end
$var wire 1 i' sext [15] $end
$var wire 1 j' sext [14] $end
$var wire 1 k' sext [13] $end
$var wire 1 l' sext [12] $end
$var wire 1 m' sext [11] $end
$var wire 1 n' sext [10] $end
$var wire 1 o' sext [9] $end
$var wire 1 p' sext [8] $end
$var wire 1 q' sext [7] $end
$var wire 1 r' sext [6] $end
$var wire 1 s' sext [5] $end
$var wire 1 t' sext [4] $end
$var wire 1 u' sext [3] $end
$var wire 1 v' sext [2] $end
$var wire 1 w' sext [1] $end
$var wire 1 x' sext [0] $end
$var wire 1 y' lshift [15] $end
$var wire 1 z' lshift [14] $end
$var wire 1 {' lshift [13] $end
$var wire 1 |' lshift [12] $end
$var wire 1 }' lshift [11] $end
$var wire 1 ~' lshift [10] $end
$var wire 1 !( lshift [9] $end
$var wire 1 "( lshift [8] $end
$var wire 1 #( lshift [7] $end
$var wire 1 $( lshift [6] $end
$var wire 1 %( lshift [5] $end
$var wire 1 &( lshift [4] $end
$var wire 1 '( lshift [3] $end
$var wire 1 (( lshift [2] $end
$var wire 1 )( lshift [1] $end
$var wire 1 *( lshift [0] $end
$var wire 1 +( OvflSub $end
$var wire 1 ,( OvflAdd $end

$scope module ntaken_add $end
$var wire 1 3! a [15] $end
$var wire 1 4! a [14] $end
$var wire 1 5! a [13] $end
$var wire 1 6! a [12] $end
$var wire 1 7! a [11] $end
$var wire 1 8! a [10] $end
$var wire 1 9! a [9] $end
$var wire 1 :! a [8] $end
$var wire 1 ;! a [7] $end
$var wire 1 <! a [6] $end
$var wire 1 =! a [5] $end
$var wire 1 >! a [4] $end
$var wire 1 ?! a [3] $end
$var wire 1 @! a [2] $end
$var wire 1 A! a [1] $end
$var wire 1 B! a [0] $end
$var wire 1 -( b [15] $end
$var wire 1 .( b [14] $end
$var wire 1 /( b [13] $end
$var wire 1 0( b [12] $end
$var wire 1 1( b [11] $end
$var wire 1 2( b [10] $end
$var wire 1 3( b [9] $end
$var wire 1 4( b [8] $end
$var wire 1 5( b [7] $end
$var wire 1 6( b [6] $end
$var wire 1 7( b [5] $end
$var wire 1 8( b [4] $end
$var wire 1 9( b [3] $end
$var wire 1 :( b [2] $end
$var wire 1 ;( b [1] $end
$var wire 1 <( b [0] $end
$var wire 1 =( sub $end
$var wire 1 X' sum [15] $end
$var wire 1 Y' sum [14] $end
$var wire 1 Z' sum [13] $end
$var wire 1 [' sum [12] $end
$var wire 1 \' sum [11] $end
$var wire 1 ]' sum [10] $end
$var wire 1 ^' sum [9] $end
$var wire 1 _' sum [8] $end
$var wire 1 `' sum [7] $end
$var wire 1 a' sum [6] $end
$var wire 1 b' sum [5] $end
$var wire 1 c' sum [4] $end
$var wire 1 d' sum [3] $end
$var wire 1 e' sum [2] $end
$var wire 1 f' sum [1] $end
$var wire 1 g' sum [0] $end
$var wire 1 +( ovfl $end
$var wire 1 >( c [4] $end
$var wire 1 ?( c [3] $end
$var wire 1 @( c [2] $end
$var wire 1 A( c [1] $end
$var wire 1 B( c [0] $end
$var wire 1 C( b_in [15] $end
$var wire 1 D( b_in [14] $end
$var wire 1 E( b_in [13] $end
$var wire 1 F( b_in [12] $end
$var wire 1 G( b_in [11] $end
$var wire 1 H( b_in [10] $end
$var wire 1 I( b_in [9] $end
$var wire 1 J( b_in [8] $end
$var wire 1 K( b_in [7] $end
$var wire 1 L( b_in [6] $end
$var wire 1 M( b_in [5] $end
$var wire 1 N( b_in [4] $end
$var wire 1 O( b_in [3] $end
$var wire 1 P( b_in [2] $end
$var wire 1 Q( b_in [1] $end
$var wire 1 R( b_in [0] $end
$var wire 1 S( g [3] $end
$var wire 1 T( g [2] $end
$var wire 1 U( g [1] $end
$var wire 1 V( g [0] $end
$var wire 1 W( p [3] $end
$var wire 1 X( p [2] $end
$var wire 1 Y( p [1] $end
$var wire 1 Z( p [0] $end
$var wire 1 [( sum_temp [15] $end
$var wire 1 \( sum_temp [14] $end
$var wire 1 ]( sum_temp [13] $end
$var wire 1 ^( sum_temp [12] $end
$var wire 1 _( sum_temp [11] $end
$var wire 1 `( sum_temp [10] $end
$var wire 1 a( sum_temp [9] $end
$var wire 1 b( sum_temp [8] $end
$var wire 1 c( sum_temp [7] $end
$var wire 1 d( sum_temp [6] $end
$var wire 1 e( sum_temp [5] $end
$var wire 1 f( sum_temp [4] $end
$var wire 1 g( sum_temp [3] $end
$var wire 1 h( sum_temp [2] $end
$var wire 1 i( sum_temp [1] $end
$var wire 1 j( sum_temp [0] $end

$scope module U_CLA4_0 $end
$var wire 1 ?! a [3] $end
$var wire 1 @! a [2] $end
$var wire 1 A! a [1] $end
$var wire 1 B! a [0] $end
$var wire 1 O( b [3] $end
$var wire 1 P( b [2] $end
$var wire 1 Q( b [1] $end
$var wire 1 R( b [0] $end
$var wire 1 B( cin $end
$var wire 1 g( sum [3] $end
$var wire 1 h( sum [2] $end
$var wire 1 i( sum [1] $end
$var wire 1 j( sum [0] $end
$var wire 1 k( cout $end
$var wire 1 l( ovfl $end
$var wire 1 V( tg $end
$var wire 1 Z( tp $end
$var wire 1 m( c [4] $end
$var wire 1 n( c [3] $end
$var wire 1 o( c [2] $end
$var wire 1 p( c [1] $end
$var wire 1 q( c [0] $end
$var wire 1 r( g [3] $end
$var wire 1 s( g [2] $end
$var wire 1 t( g [1] $end
$var wire 1 u( g [0] $end
$var wire 1 v( p [3] $end
$var wire 1 w( p [2] $end
$var wire 1 x( p [1] $end
$var wire 1 y( p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 B! a $end
$var wire 1 R( b $end
$var wire 1 q( cin $end
$var wire 1 j( sum $end
$var wire 1 z( cout $end
$var wire 1 {( w1 $end
$var wire 1 |( w2 $end
$var wire 1 }( w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 A! a $end
$var wire 1 Q( b $end
$var wire 1 p( cin $end
$var wire 1 i( sum $end
$var wire 1 ~( cout $end
$var wire 1 !) w1 $end
$var wire 1 ") w2 $end
$var wire 1 #) w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 @! a $end
$var wire 1 P( b $end
$var wire 1 o( cin $end
$var wire 1 h( sum $end
$var wire 1 $) cout $end
$var wire 1 %) w1 $end
$var wire 1 &) w2 $end
$var wire 1 ') w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 ?! a $end
$var wire 1 O( b $end
$var wire 1 n( cin $end
$var wire 1 g( sum $end
$var wire 1 () cout $end
$var wire 1 )) w1 $end
$var wire 1 *) w2 $end
$var wire 1 +) w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_1 $end
$var wire 1 ;! a [3] $end
$var wire 1 <! a [2] $end
$var wire 1 =! a [1] $end
$var wire 1 >! a [0] $end
$var wire 1 K( b [3] $end
$var wire 1 L( b [2] $end
$var wire 1 M( b [1] $end
$var wire 1 N( b [0] $end
$var wire 1 A( cin $end
$var wire 1 c( sum [3] $end
$var wire 1 d( sum [2] $end
$var wire 1 e( sum [1] $end
$var wire 1 f( sum [0] $end
$var wire 1 ,) cout $end
$var wire 1 -) ovfl $end
$var wire 1 U( tg $end
$var wire 1 Y( tp $end
$var wire 1 .) c [4] $end
$var wire 1 /) c [3] $end
$var wire 1 0) c [2] $end
$var wire 1 1) c [1] $end
$var wire 1 2) c [0] $end
$var wire 1 3) g [3] $end
$var wire 1 4) g [2] $end
$var wire 1 5) g [1] $end
$var wire 1 6) g [0] $end
$var wire 1 7) p [3] $end
$var wire 1 8) p [2] $end
$var wire 1 9) p [1] $end
$var wire 1 :) p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 >! a $end
$var wire 1 N( b $end
$var wire 1 2) cin $end
$var wire 1 f( sum $end
$var wire 1 ;) cout $end
$var wire 1 <) w1 $end
$var wire 1 =) w2 $end
$var wire 1 >) w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 =! a $end
$var wire 1 M( b $end
$var wire 1 1) cin $end
$var wire 1 e( sum $end
$var wire 1 ?) cout $end
$var wire 1 @) w1 $end
$var wire 1 A) w2 $end
$var wire 1 B) w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 <! a $end
$var wire 1 L( b $end
$var wire 1 0) cin $end
$var wire 1 d( sum $end
$var wire 1 C) cout $end
$var wire 1 D) w1 $end
$var wire 1 E) w2 $end
$var wire 1 F) w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 ;! a $end
$var wire 1 K( b $end
$var wire 1 /) cin $end
$var wire 1 c( sum $end
$var wire 1 G) cout $end
$var wire 1 H) w1 $end
$var wire 1 I) w2 $end
$var wire 1 J) w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_2 $end
$var wire 1 7! a [3] $end
$var wire 1 8! a [2] $end
$var wire 1 9! a [1] $end
$var wire 1 :! a [0] $end
$var wire 1 G( b [3] $end
$var wire 1 H( b [2] $end
$var wire 1 I( b [1] $end
$var wire 1 J( b [0] $end
$var wire 1 @( cin $end
$var wire 1 _( sum [3] $end
$var wire 1 `( sum [2] $end
$var wire 1 a( sum [1] $end
$var wire 1 b( sum [0] $end
$var wire 1 K) cout $end
$var wire 1 L) ovfl $end
$var wire 1 T( tg $end
$var wire 1 X( tp $end
$var wire 1 M) c [4] $end
$var wire 1 N) c [3] $end
$var wire 1 O) c [2] $end
$var wire 1 P) c [1] $end
$var wire 1 Q) c [0] $end
$var wire 1 R) g [3] $end
$var wire 1 S) g [2] $end
$var wire 1 T) g [1] $end
$var wire 1 U) g [0] $end
$var wire 1 V) p [3] $end
$var wire 1 W) p [2] $end
$var wire 1 X) p [1] $end
$var wire 1 Y) p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 :! a $end
$var wire 1 J( b $end
$var wire 1 Q) cin $end
$var wire 1 b( sum $end
$var wire 1 Z) cout $end
$var wire 1 [) w1 $end
$var wire 1 \) w2 $end
$var wire 1 ]) w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 9! a $end
$var wire 1 I( b $end
$var wire 1 P) cin $end
$var wire 1 a( sum $end
$var wire 1 ^) cout $end
$var wire 1 _) w1 $end
$var wire 1 `) w2 $end
$var wire 1 a) w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 8! a $end
$var wire 1 H( b $end
$var wire 1 O) cin $end
$var wire 1 `( sum $end
$var wire 1 b) cout $end
$var wire 1 c) w1 $end
$var wire 1 d) w2 $end
$var wire 1 e) w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 7! a $end
$var wire 1 G( b $end
$var wire 1 N) cin $end
$var wire 1 _( sum $end
$var wire 1 f) cout $end
$var wire 1 g) w1 $end
$var wire 1 h) w2 $end
$var wire 1 i) w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_3 $end
$var wire 1 3! a [3] $end
$var wire 1 4! a [2] $end
$var wire 1 5! a [1] $end
$var wire 1 6! a [0] $end
$var wire 1 C( b [3] $end
$var wire 1 D( b [2] $end
$var wire 1 E( b [1] $end
$var wire 1 F( b [0] $end
$var wire 1 ?( cin $end
$var wire 1 [( sum [3] $end
$var wire 1 \( sum [2] $end
$var wire 1 ]( sum [1] $end
$var wire 1 ^( sum [0] $end
$var wire 1 j) cout $end
$var wire 1 k) ovfl $end
$var wire 1 S( tg $end
$var wire 1 W( tp $end
$var wire 1 l) c [4] $end
$var wire 1 m) c [3] $end
$var wire 1 n) c [2] $end
$var wire 1 o) c [1] $end
$var wire 1 p) c [0] $end
$var wire 1 q) g [3] $end
$var wire 1 r) g [2] $end
$var wire 1 s) g [1] $end
$var wire 1 t) g [0] $end
$var wire 1 u) p [3] $end
$var wire 1 v) p [2] $end
$var wire 1 w) p [1] $end
$var wire 1 x) p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 6! a $end
$var wire 1 F( b $end
$var wire 1 p) cin $end
$var wire 1 ^( sum $end
$var wire 1 y) cout $end
$var wire 1 z) w1 $end
$var wire 1 {) w2 $end
$var wire 1 |) w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 5! a $end
$var wire 1 E( b $end
$var wire 1 o) cin $end
$var wire 1 ]( sum $end
$var wire 1 }) cout $end
$var wire 1 ~) w1 $end
$var wire 1 !* w2 $end
$var wire 1 "* w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 4! a $end
$var wire 1 D( b $end
$var wire 1 n) cin $end
$var wire 1 \( sum $end
$var wire 1 #* cout $end
$var wire 1 $* w1 $end
$var wire 1 %* w2 $end
$var wire 1 &* w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 3! a $end
$var wire 1 C( b $end
$var wire 1 m) cin $end
$var wire 1 [( sum $end
$var wire 1 '* cout $end
$var wire 1 (* w1 $end
$var wire 1 )* w2 $end
$var wire 1 ** w3 $end
$upscope $end
$upscope $end
$upscope $end

$scope module taken_add $end
$var wire 1 X' a [15] $end
$var wire 1 Y' a [14] $end
$var wire 1 Z' a [13] $end
$var wire 1 [' a [12] $end
$var wire 1 \' a [11] $end
$var wire 1 ]' a [10] $end
$var wire 1 ^' a [9] $end
$var wire 1 _' a [8] $end
$var wire 1 `' a [7] $end
$var wire 1 a' a [6] $end
$var wire 1 b' a [5] $end
$var wire 1 c' a [4] $end
$var wire 1 d' a [3] $end
$var wire 1 e' a [2] $end
$var wire 1 f' a [1] $end
$var wire 1 g' a [0] $end
$var wire 1 y' b [15] $end
$var wire 1 z' b [14] $end
$var wire 1 {' b [13] $end
$var wire 1 |' b [12] $end
$var wire 1 }' b [11] $end
$var wire 1 ~' b [10] $end
$var wire 1 !( b [9] $end
$var wire 1 "( b [8] $end
$var wire 1 #( b [7] $end
$var wire 1 $( b [6] $end
$var wire 1 %( b [5] $end
$var wire 1 &( b [4] $end
$var wire 1 '( b [3] $end
$var wire 1 (( b [2] $end
$var wire 1 )( b [1] $end
$var wire 1 *( b [0] $end
$var wire 1 +* sub $end
$var wire 1 H' sum [15] $end
$var wire 1 I' sum [14] $end
$var wire 1 J' sum [13] $end
$var wire 1 K' sum [12] $end
$var wire 1 L' sum [11] $end
$var wire 1 M' sum [10] $end
$var wire 1 N' sum [9] $end
$var wire 1 O' sum [8] $end
$var wire 1 P' sum [7] $end
$var wire 1 Q' sum [6] $end
$var wire 1 R' sum [5] $end
$var wire 1 S' sum [4] $end
$var wire 1 T' sum [3] $end
$var wire 1 U' sum [2] $end
$var wire 1 V' sum [1] $end
$var wire 1 W' sum [0] $end
$var wire 1 ,( ovfl $end
$var wire 1 ,* c [4] $end
$var wire 1 -* c [3] $end
$var wire 1 .* c [2] $end
$var wire 1 /* c [1] $end
$var wire 1 0* c [0] $end
$var wire 1 1* b_in [15] $end
$var wire 1 2* b_in [14] $end
$var wire 1 3* b_in [13] $end
$var wire 1 4* b_in [12] $end
$var wire 1 5* b_in [11] $end
$var wire 1 6* b_in [10] $end
$var wire 1 7* b_in [9] $end
$var wire 1 8* b_in [8] $end
$var wire 1 9* b_in [7] $end
$var wire 1 :* b_in [6] $end
$var wire 1 ;* b_in [5] $end
$var wire 1 <* b_in [4] $end
$var wire 1 =* b_in [3] $end
$var wire 1 >* b_in [2] $end
$var wire 1 ?* b_in [1] $end
$var wire 1 @* b_in [0] $end
$var wire 1 A* g [3] $end
$var wire 1 B* g [2] $end
$var wire 1 C* g [1] $end
$var wire 1 D* g [0] $end
$var wire 1 E* p [3] $end
$var wire 1 F* p [2] $end
$var wire 1 G* p [1] $end
$var wire 1 H* p [0] $end
$var wire 1 I* sum_temp [15] $end
$var wire 1 J* sum_temp [14] $end
$var wire 1 K* sum_temp [13] $end
$var wire 1 L* sum_temp [12] $end
$var wire 1 M* sum_temp [11] $end
$var wire 1 N* sum_temp [10] $end
$var wire 1 O* sum_temp [9] $end
$var wire 1 P* sum_temp [8] $end
$var wire 1 Q* sum_temp [7] $end
$var wire 1 R* sum_temp [6] $end
$var wire 1 S* sum_temp [5] $end
$var wire 1 T* sum_temp [4] $end
$var wire 1 U* sum_temp [3] $end
$var wire 1 V* sum_temp [2] $end
$var wire 1 W* sum_temp [1] $end
$var wire 1 X* sum_temp [0] $end

$scope module U_CLA4_0 $end
$var wire 1 d' a [3] $end
$var wire 1 e' a [2] $end
$var wire 1 f' a [1] $end
$var wire 1 g' a [0] $end
$var wire 1 =* b [3] $end
$var wire 1 >* b [2] $end
$var wire 1 ?* b [1] $end
$var wire 1 @* b [0] $end
$var wire 1 0* cin $end
$var wire 1 U* sum [3] $end
$var wire 1 V* sum [2] $end
$var wire 1 W* sum [1] $end
$var wire 1 X* sum [0] $end
$var wire 1 Y* cout $end
$var wire 1 Z* ovfl $end
$var wire 1 D* tg $end
$var wire 1 H* tp $end
$var wire 1 [* c [4] $end
$var wire 1 \* c [3] $end
$var wire 1 ]* c [2] $end
$var wire 1 ^* c [1] $end
$var wire 1 _* c [0] $end
$var wire 1 `* g [3] $end
$var wire 1 a* g [2] $end
$var wire 1 b* g [1] $end
$var wire 1 c* g [0] $end
$var wire 1 d* p [3] $end
$var wire 1 e* p [2] $end
$var wire 1 f* p [1] $end
$var wire 1 g* p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 g' a $end
$var wire 1 @* b $end
$var wire 1 _* cin $end
$var wire 1 X* sum $end
$var wire 1 h* cout $end
$var wire 1 i* w1 $end
$var wire 1 j* w2 $end
$var wire 1 k* w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 f' a $end
$var wire 1 ?* b $end
$var wire 1 ^* cin $end
$var wire 1 W* sum $end
$var wire 1 l* cout $end
$var wire 1 m* w1 $end
$var wire 1 n* w2 $end
$var wire 1 o* w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 e' a $end
$var wire 1 >* b $end
$var wire 1 ]* cin $end
$var wire 1 V* sum $end
$var wire 1 p* cout $end
$var wire 1 q* w1 $end
$var wire 1 r* w2 $end
$var wire 1 s* w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 d' a $end
$var wire 1 =* b $end
$var wire 1 \* cin $end
$var wire 1 U* sum $end
$var wire 1 t* cout $end
$var wire 1 u* w1 $end
$var wire 1 v* w2 $end
$var wire 1 w* w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_1 $end
$var wire 1 `' a [3] $end
$var wire 1 a' a [2] $end
$var wire 1 b' a [1] $end
$var wire 1 c' a [0] $end
$var wire 1 9* b [3] $end
$var wire 1 :* b [2] $end
$var wire 1 ;* b [1] $end
$var wire 1 <* b [0] $end
$var wire 1 /* cin $end
$var wire 1 Q* sum [3] $end
$var wire 1 R* sum [2] $end
$var wire 1 S* sum [1] $end
$var wire 1 T* sum [0] $end
$var wire 1 x* cout $end
$var wire 1 y* ovfl $end
$var wire 1 C* tg $end
$var wire 1 G* tp $end
$var wire 1 z* c [4] $end
$var wire 1 {* c [3] $end
$var wire 1 |* c [2] $end
$var wire 1 }* c [1] $end
$var wire 1 ~* c [0] $end
$var wire 1 !+ g [3] $end
$var wire 1 "+ g [2] $end
$var wire 1 #+ g [1] $end
$var wire 1 $+ g [0] $end
$var wire 1 %+ p [3] $end
$var wire 1 &+ p [2] $end
$var wire 1 '+ p [1] $end
$var wire 1 (+ p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 c' a $end
$var wire 1 <* b $end
$var wire 1 ~* cin $end
$var wire 1 T* sum $end
$var wire 1 )+ cout $end
$var wire 1 *+ w1 $end
$var wire 1 ++ w2 $end
$var wire 1 ,+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 b' a $end
$var wire 1 ;* b $end
$var wire 1 }* cin $end
$var wire 1 S* sum $end
$var wire 1 -+ cout $end
$var wire 1 .+ w1 $end
$var wire 1 /+ w2 $end
$var wire 1 0+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 a' a $end
$var wire 1 :* b $end
$var wire 1 |* cin $end
$var wire 1 R* sum $end
$var wire 1 1+ cout $end
$var wire 1 2+ w1 $end
$var wire 1 3+ w2 $end
$var wire 1 4+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 `' a $end
$var wire 1 9* b $end
$var wire 1 {* cin $end
$var wire 1 Q* sum $end
$var wire 1 5+ cout $end
$var wire 1 6+ w1 $end
$var wire 1 7+ w2 $end
$var wire 1 8+ w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_2 $end
$var wire 1 \' a [3] $end
$var wire 1 ]' a [2] $end
$var wire 1 ^' a [1] $end
$var wire 1 _' a [0] $end
$var wire 1 5* b [3] $end
$var wire 1 6* b [2] $end
$var wire 1 7* b [1] $end
$var wire 1 8* b [0] $end
$var wire 1 .* cin $end
$var wire 1 M* sum [3] $end
$var wire 1 N* sum [2] $end
$var wire 1 O* sum [1] $end
$var wire 1 P* sum [0] $end
$var wire 1 9+ cout $end
$var wire 1 :+ ovfl $end
$var wire 1 B* tg $end
$var wire 1 F* tp $end
$var wire 1 ;+ c [4] $end
$var wire 1 <+ c [3] $end
$var wire 1 =+ c [2] $end
$var wire 1 >+ c [1] $end
$var wire 1 ?+ c [0] $end
$var wire 1 @+ g [3] $end
$var wire 1 A+ g [2] $end
$var wire 1 B+ g [1] $end
$var wire 1 C+ g [0] $end
$var wire 1 D+ p [3] $end
$var wire 1 E+ p [2] $end
$var wire 1 F+ p [1] $end
$var wire 1 G+ p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 _' a $end
$var wire 1 8* b $end
$var wire 1 ?+ cin $end
$var wire 1 P* sum $end
$var wire 1 H+ cout $end
$var wire 1 I+ w1 $end
$var wire 1 J+ w2 $end
$var wire 1 K+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 ^' a $end
$var wire 1 7* b $end
$var wire 1 >+ cin $end
$var wire 1 O* sum $end
$var wire 1 L+ cout $end
$var wire 1 M+ w1 $end
$var wire 1 N+ w2 $end
$var wire 1 O+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 ]' a $end
$var wire 1 6* b $end
$var wire 1 =+ cin $end
$var wire 1 N* sum $end
$var wire 1 P+ cout $end
$var wire 1 Q+ w1 $end
$var wire 1 R+ w2 $end
$var wire 1 S+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 \' a $end
$var wire 1 5* b $end
$var wire 1 <+ cin $end
$var wire 1 M* sum $end
$var wire 1 T+ cout $end
$var wire 1 U+ w1 $end
$var wire 1 V+ w2 $end
$var wire 1 W+ w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_3 $end
$var wire 1 X' a [3] $end
$var wire 1 Y' a [2] $end
$var wire 1 Z' a [1] $end
$var wire 1 [' a [0] $end
$var wire 1 1* b [3] $end
$var wire 1 2* b [2] $end
$var wire 1 3* b [1] $end
$var wire 1 4* b [0] $end
$var wire 1 -* cin $end
$var wire 1 I* sum [3] $end
$var wire 1 J* sum [2] $end
$var wire 1 K* sum [1] $end
$var wire 1 L* sum [0] $end
$var wire 1 X+ cout $end
$var wire 1 Y+ ovfl $end
$var wire 1 A* tg $end
$var wire 1 E* tp $end
$var wire 1 Z+ c [4] $end
$var wire 1 [+ c [3] $end
$var wire 1 \+ c [2] $end
$var wire 1 ]+ c [1] $end
$var wire 1 ^+ c [0] $end
$var wire 1 _+ g [3] $end
$var wire 1 `+ g [2] $end
$var wire 1 a+ g [1] $end
$var wire 1 b+ g [0] $end
$var wire 1 c+ p [3] $end
$var wire 1 d+ p [2] $end
$var wire 1 e+ p [1] $end
$var wire 1 f+ p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 [' a $end
$var wire 1 4* b $end
$var wire 1 ^+ cin $end
$var wire 1 L* sum $end
$var wire 1 g+ cout $end
$var wire 1 h+ w1 $end
$var wire 1 i+ w2 $end
$var wire 1 j+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 Z' a $end
$var wire 1 3* b $end
$var wire 1 ]+ cin $end
$var wire 1 K* sum $end
$var wire 1 k+ cout $end
$var wire 1 l+ w1 $end
$var wire 1 m+ w2 $end
$var wire 1 n+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 Y' a $end
$var wire 1 2* b $end
$var wire 1 \+ cin $end
$var wire 1 J* sum $end
$var wire 1 o+ cout $end
$var wire 1 p+ w1 $end
$var wire 1 q+ w2 $end
$var wire 1 r+ w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 X' a $end
$var wire 1 1* b $end
$var wire 1 [+ cin $end
$var wire 1 I* sum $end
$var wire 1 s+ cout $end
$var wire 1 t+ w1 $end
$var wire 1 u+ w2 $end
$var wire 1 v+ w3 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module id_ex $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 x+ en $end
$var wire 1 h% RegDst_in $end
$var wire 1 j% ALUSrc_in $end
$var wire 1 l% MemRead_in $end
$var wire 1 o% MemWrite_in $end
$var wire 1 r% MemtoReg_in $end
$var wire 1 v% RegWrite_in $end
$var wire 1 z% Lower_in $end
$var wire 1 |% Higher_in $end
$var wire 1 ~% BEn_in $end
$var wire 1 $& Br_in $end
$var wire 1 (& PCS_in $end
$var wire 1 J" wreg_in [3] $end
$var wire 1 K" wreg_in [2] $end
$var wire 1 L" wreg_in [1] $end
$var wire 1 M" wreg_in [0] $end
$var wire 1 S! npc_in [15] $end
$var wire 1 T! npc_in [14] $end
$var wire 1 U! npc_in [13] $end
$var wire 1 V! npc_in [12] $end
$var wire 1 W! npc_in [11] $end
$var wire 1 X! npc_in [10] $end
$var wire 1 Y! npc_in [9] $end
$var wire 1 Z! npc_in [8] $end
$var wire 1 [! npc_in [7] $end
$var wire 1 \! npc_in [6] $end
$var wire 1 ]! npc_in [5] $end
$var wire 1 ^! npc_in [4] $end
$var wire 1 _! npc_in [3] $end
$var wire 1 `! npc_in [2] $end
$var wire 1 a! npc_in [1] $end
$var wire 1 b! npc_in [0] $end
$var wire 1 ~" a_in [15] $end
$var wire 1 !# a_in [14] $end
$var wire 1 "# a_in [13] $end
$var wire 1 ## a_in [12] $end
$var wire 1 $# a_in [11] $end
$var wire 1 %# a_in [10] $end
$var wire 1 &# a_in [9] $end
$var wire 1 '# a_in [8] $end
$var wire 1 (# a_in [7] $end
$var wire 1 )# a_in [6] $end
$var wire 1 *# a_in [5] $end
$var wire 1 +# a_in [4] $end
$var wire 1 ,# a_in [3] $end
$var wire 1 -# a_in [2] $end
$var wire 1 .# a_in [1] $end
$var wire 1 /# a_in [0] $end
$var wire 1 0# b_in [15] $end
$var wire 1 1# b_in [14] $end
$var wire 1 2# b_in [13] $end
$var wire 1 3# b_in [12] $end
$var wire 1 4# b_in [11] $end
$var wire 1 5# b_in [10] $end
$var wire 1 6# b_in [9] $end
$var wire 1 7# b_in [8] $end
$var wire 1 8# b_in [7] $end
$var wire 1 9# b_in [6] $end
$var wire 1 :# b_in [5] $end
$var wire 1 ;# b_in [4] $end
$var wire 1 <# b_in [3] $end
$var wire 1 =# b_in [2] $end
$var wire 1 ># b_in [1] $end
$var wire 1 ?# b_in [0] $end
$var wire 1 4% imm_in [15] $end
$var wire 1 5% imm_in [14] $end
$var wire 1 6% imm_in [13] $end
$var wire 1 7% imm_in [12] $end
$var wire 1 8% imm_in [11] $end
$var wire 1 9% imm_in [10] $end
$var wire 1 :% imm_in [9] $end
$var wire 1 ;% imm_in [8] $end
$var wire 1 <% imm_in [7] $end
$var wire 1 =% imm_in [6] $end
$var wire 1 >% imm_in [5] $end
$var wire 1 ?% imm_in [4] $end
$var wire 1 @% imm_in [3] $end
$var wire 1 A% imm_in [2] $end
$var wire 1 B% imm_in [1] $end
$var wire 1 C% imm_in [0] $end
$var wire 1 i% RegDst_out $end
$var wire 1 k% ALUSrc_out $end
$var wire 1 m% MemRead_out $end
$var wire 1 p% MemWrite_out $end
$var wire 1 s% MemtoReg_out $end
$var wire 1 w% RegWrite_out $end
$var wire 1 {% Lower_out $end
$var wire 1 }% Higher_out $end
$var wire 1 !& BEn_out $end
$var wire 1 %& Br_out $end
$var wire 1 )& PCS_out $end
$var wire 1 N" wreg_out [3] $end
$var wire 1 O" wreg_out [2] $end
$var wire 1 P" wreg_out [1] $end
$var wire 1 Q" wreg_out [0] $end
$var wire 1 c! npc_out [15] $end
$var wire 1 d! npc_out [14] $end
$var wire 1 e! npc_out [13] $end
$var wire 1 f! npc_out [12] $end
$var wire 1 g! npc_out [11] $end
$var wire 1 h! npc_out [10] $end
$var wire 1 i! npc_out [9] $end
$var wire 1 j! npc_out [8] $end
$var wire 1 k! npc_out [7] $end
$var wire 1 l! npc_out [6] $end
$var wire 1 m! npc_out [5] $end
$var wire 1 n! npc_out [4] $end
$var wire 1 o! npc_out [3] $end
$var wire 1 p! npc_out [2] $end
$var wire 1 q! npc_out [1] $end
$var wire 1 r! npc_out [0] $end
$var wire 1 @# a_out [15] $end
$var wire 1 A# a_out [14] $end
$var wire 1 B# a_out [13] $end
$var wire 1 C# a_out [12] $end
$var wire 1 D# a_out [11] $end
$var wire 1 E# a_out [10] $end
$var wire 1 F# a_out [9] $end
$var wire 1 G# a_out [8] $end
$var wire 1 H# a_out [7] $end
$var wire 1 I# a_out [6] $end
$var wire 1 J# a_out [5] $end
$var wire 1 K# a_out [4] $end
$var wire 1 L# a_out [3] $end
$var wire 1 M# a_out [2] $end
$var wire 1 N# a_out [1] $end
$var wire 1 O# a_out [0] $end
$var wire 1 P# b_out [15] $end
$var wire 1 Q# b_out [14] $end
$var wire 1 R# b_out [13] $end
$var wire 1 S# b_out [12] $end
$var wire 1 T# b_out [11] $end
$var wire 1 U# b_out [10] $end
$var wire 1 V# b_out [9] $end
$var wire 1 W# b_out [8] $end
$var wire 1 X# b_out [7] $end
$var wire 1 Y# b_out [6] $end
$var wire 1 Z# b_out [5] $end
$var wire 1 [# b_out [4] $end
$var wire 1 \# b_out [3] $end
$var wire 1 ]# b_out [2] $end
$var wire 1 ^# b_out [1] $end
$var wire 1 _# b_out [0] $end
$var wire 1 D% imm_out [15] $end
$var wire 1 E% imm_out [14] $end
$var wire 1 F% imm_out [13] $end
$var wire 1 G% imm_out [12] $end
$var wire 1 H% imm_out [11] $end
$var wire 1 I% imm_out [10] $end
$var wire 1 J% imm_out [9] $end
$var wire 1 K% imm_out [8] $end
$var wire 1 L% imm_out [7] $end
$var wire 1 M% imm_out [6] $end
$var wire 1 N% imm_out [5] $end
$var wire 1 O% imm_out [4] $end
$var wire 1 P% imm_out [3] $end
$var wire 1 Q% imm_out [2] $end
$var wire 1 R% imm_out [1] $end
$var wire 1 S% imm_out [0] $end

$scope module regdst $end
$var wire 1 i% q $end
$var wire 1 h% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 y+ state $end
$upscope $end

$scope module alusrc $end
$var wire 1 k% q $end
$var wire 1 j% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 z+ state $end
$upscope $end

$scope module memread $end
$var wire 1 m% q $end
$var wire 1 l% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 {+ state $end
$upscope $end

$scope module memwrite $end
$var wire 1 p% q $end
$var wire 1 o% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 |+ state $end
$upscope $end

$scope module memtoreg $end
$var wire 1 s% q $end
$var wire 1 r% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 }+ state $end
$upscope $end

$scope module regwrite $end
$var wire 1 w% q $end
$var wire 1 v% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 ~+ state $end
$upscope $end

$scope module lower $end
$var wire 1 {% q $end
$var wire 1 z% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 !, state $end
$upscope $end

$scope module higher $end
$var wire 1 }% q $end
$var wire 1 z% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 ", state $end
$upscope $end

$scope module ben $end
$var wire 1 !& q $end
$var wire 1 ~% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 #, state $end
$upscope $end

$scope module br $end
$var wire 1 %& q $end
$var wire 1 $& d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 $, state $end
$upscope $end

$scope module pcs $end
$var wire 1 )& q $end
$var wire 1 (& d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 %, state $end
$upscope $end

$scope module b_ff0 $end
$var wire 1 Q" q $end
$var wire 1 M" d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 &, state $end
$upscope $end

$scope module b_ff1 $end
$var wire 1 P" q $end
$var wire 1 L" d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 ', state $end
$upscope $end

$scope module b_ff2 $end
$var wire 1 O" q $end
$var wire 1 K" d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 (, state $end
$upscope $end

$scope module b_ff3 $end
$var wire 1 N" q $end
$var wire 1 J" d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 ), state $end
$upscope $end

$scope module npc_reg $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 x+ WriteReg $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 S! D [15] $end
$var wire 1 T! D [14] $end
$var wire 1 U! D [13] $end
$var wire 1 V! D [12] $end
$var wire 1 W! D [11] $end
$var wire 1 X! D [10] $end
$var wire 1 Y! D [9] $end
$var wire 1 Z! D [8] $end
$var wire 1 [! D [7] $end
$var wire 1 \! D [6] $end
$var wire 1 ]! D [5] $end
$var wire 1 ^! D [4] $end
$var wire 1 _! D [3] $end
$var wire 1 `! D [2] $end
$var wire 1 a! D [1] $end
$var wire 1 b! D [0] $end
$var wire 1 c! Bitline1 [15] $end
$var wire 1 d! Bitline1 [14] $end
$var wire 1 e! Bitline1 [13] $end
$var wire 1 f! Bitline1 [12] $end
$var wire 1 g! Bitline1 [11] $end
$var wire 1 h! Bitline1 [10] $end
$var wire 1 i! Bitline1 [9] $end
$var wire 1 j! Bitline1 [8] $end
$var wire 1 k! Bitline1 [7] $end
$var wire 1 l! Bitline1 [6] $end
$var wire 1 m! Bitline1 [5] $end
$var wire 1 n! Bitline1 [4] $end
$var wire 1 o! Bitline1 [3] $end
$var wire 1 p! Bitline1 [2] $end
$var wire 1 q! Bitline1 [1] $end
$var wire 1 r! Bitline1 [0] $end
$var wire 1 ,, Bitline2 [15] $end
$var wire 1 -, Bitline2 [14] $end
$var wire 1 ., Bitline2 [13] $end
$var wire 1 /, Bitline2 [12] $end
$var wire 1 0, Bitline2 [11] $end
$var wire 1 1, Bitline2 [10] $end
$var wire 1 2, Bitline2 [9] $end
$var wire 1 3, Bitline2 [8] $end
$var wire 1 4, Bitline2 [7] $end
$var wire 1 5, Bitline2 [6] $end
$var wire 1 6, Bitline2 [5] $end
$var wire 1 7, Bitline2 [4] $end
$var wire 1 8, Bitline2 [3] $end
$var wire 1 9, Bitline2 [2] $end
$var wire 1 :, Bitline2 [1] $end
$var wire 1 ;, Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 b! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 r! Bitline1 $end
$var wire 1 ;, Bitline2 $end
$var wire 1 <, ff_out $end

$scope module flipflop $end
$var wire 1 <, q $end
$var wire 1 b! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 =, state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 a! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 q! Bitline1 $end
$var wire 1 :, Bitline2 $end
$var wire 1 >, ff_out $end

$scope module flipflop $end
$var wire 1 >, q $end
$var wire 1 a! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 ?, state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 `! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 p! Bitline1 $end
$var wire 1 9, Bitline2 $end
$var wire 1 @, ff_out $end

$scope module flipflop $end
$var wire 1 @, q $end
$var wire 1 `! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 A, state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 _! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 o! Bitline1 $end
$var wire 1 8, Bitline2 $end
$var wire 1 B, ff_out $end

$scope module flipflop $end
$var wire 1 B, q $end
$var wire 1 _! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 C, state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ^! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 n! Bitline1 $end
$var wire 1 7, Bitline2 $end
$var wire 1 D, ff_out $end

$scope module flipflop $end
$var wire 1 D, q $end
$var wire 1 ^! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 E, state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ]! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 m! Bitline1 $end
$var wire 1 6, Bitline2 $end
$var wire 1 F, ff_out $end

$scope module flipflop $end
$var wire 1 F, q $end
$var wire 1 ]! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 G, state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 \! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 l! Bitline1 $end
$var wire 1 5, Bitline2 $end
$var wire 1 H, ff_out $end

$scope module flipflop $end
$var wire 1 H, q $end
$var wire 1 \! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 I, state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 [! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 k! Bitline1 $end
$var wire 1 4, Bitline2 $end
$var wire 1 J, ff_out $end

$scope module flipflop $end
$var wire 1 J, q $end
$var wire 1 [! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 K, state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 Z! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 j! Bitline1 $end
$var wire 1 3, Bitline2 $end
$var wire 1 L, ff_out $end

$scope module flipflop $end
$var wire 1 L, q $end
$var wire 1 Z! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 M, state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 Y! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 i! Bitline1 $end
$var wire 1 2, Bitline2 $end
$var wire 1 N, ff_out $end

$scope module flipflop $end
$var wire 1 N, q $end
$var wire 1 Y! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 O, state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 X! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 h! Bitline1 $end
$var wire 1 1, Bitline2 $end
$var wire 1 P, ff_out $end

$scope module flipflop $end
$var wire 1 P, q $end
$var wire 1 X! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 Q, state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 W! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 g! Bitline1 $end
$var wire 1 0, Bitline2 $end
$var wire 1 R, ff_out $end

$scope module flipflop $end
$var wire 1 R, q $end
$var wire 1 W! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 S, state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 V! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 f! Bitline1 $end
$var wire 1 /, Bitline2 $end
$var wire 1 T, ff_out $end

$scope module flipflop $end
$var wire 1 T, q $end
$var wire 1 V! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 U, state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 U! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 e! Bitline1 $end
$var wire 1 ., Bitline2 $end
$var wire 1 V, ff_out $end

$scope module flipflop $end
$var wire 1 V, q $end
$var wire 1 U! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 W, state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 T! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 d! Bitline1 $end
$var wire 1 -, Bitline2 $end
$var wire 1 X, ff_out $end

$scope module flipflop $end
$var wire 1 X, q $end
$var wire 1 T! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 Y, state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 S! D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 *, ReadEnable1 $end
$var wire 1 +, ReadEnable2 $end
$var wire 1 c! Bitline1 $end
$var wire 1 ,, Bitline2 $end
$var wire 1 Z, ff_out $end

$scope module flipflop $end
$var wire 1 Z, q $end
$var wire 1 S! d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 [, state $end
$upscope $end
$upscope $end
$upscope $end

$scope module a_reg $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 x+ WriteReg $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 ~" D [15] $end
$var wire 1 !# D [14] $end
$var wire 1 "# D [13] $end
$var wire 1 ## D [12] $end
$var wire 1 $# D [11] $end
$var wire 1 %# D [10] $end
$var wire 1 &# D [9] $end
$var wire 1 '# D [8] $end
$var wire 1 (# D [7] $end
$var wire 1 )# D [6] $end
$var wire 1 *# D [5] $end
$var wire 1 +# D [4] $end
$var wire 1 ,# D [3] $end
$var wire 1 -# D [2] $end
$var wire 1 .# D [1] $end
$var wire 1 /# D [0] $end
$var wire 1 @# Bitline1 [15] $end
$var wire 1 A# Bitline1 [14] $end
$var wire 1 B# Bitline1 [13] $end
$var wire 1 C# Bitline1 [12] $end
$var wire 1 D# Bitline1 [11] $end
$var wire 1 E# Bitline1 [10] $end
$var wire 1 F# Bitline1 [9] $end
$var wire 1 G# Bitline1 [8] $end
$var wire 1 H# Bitline1 [7] $end
$var wire 1 I# Bitline1 [6] $end
$var wire 1 J# Bitline1 [5] $end
$var wire 1 K# Bitline1 [4] $end
$var wire 1 L# Bitline1 [3] $end
$var wire 1 M# Bitline1 [2] $end
$var wire 1 N# Bitline1 [1] $end
$var wire 1 O# Bitline1 [0] $end
$var wire 1 ^, Bitline2 [15] $end
$var wire 1 _, Bitline2 [14] $end
$var wire 1 `, Bitline2 [13] $end
$var wire 1 a, Bitline2 [12] $end
$var wire 1 b, Bitline2 [11] $end
$var wire 1 c, Bitline2 [10] $end
$var wire 1 d, Bitline2 [9] $end
$var wire 1 e, Bitline2 [8] $end
$var wire 1 f, Bitline2 [7] $end
$var wire 1 g, Bitline2 [6] $end
$var wire 1 h, Bitline2 [5] $end
$var wire 1 i, Bitline2 [4] $end
$var wire 1 j, Bitline2 [3] $end
$var wire 1 k, Bitline2 [2] $end
$var wire 1 l, Bitline2 [1] $end
$var wire 1 m, Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 /# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 O# Bitline1 $end
$var wire 1 m, Bitline2 $end
$var wire 1 n, ff_out $end

$scope module flipflop $end
$var wire 1 n, q $end
$var wire 1 /# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 o, state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 .# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 N# Bitline1 $end
$var wire 1 l, Bitline2 $end
$var wire 1 p, ff_out $end

$scope module flipflop $end
$var wire 1 p, q $end
$var wire 1 .# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 q, state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 -# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 M# Bitline1 $end
$var wire 1 k, Bitline2 $end
$var wire 1 r, ff_out $end

$scope module flipflop $end
$var wire 1 r, q $end
$var wire 1 -# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 s, state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ,# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 L# Bitline1 $end
$var wire 1 j, Bitline2 $end
$var wire 1 t, ff_out $end

$scope module flipflop $end
$var wire 1 t, q $end
$var wire 1 ,# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 u, state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 +# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 K# Bitline1 $end
$var wire 1 i, Bitline2 $end
$var wire 1 v, ff_out $end

$scope module flipflop $end
$var wire 1 v, q $end
$var wire 1 +# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 w, state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 *# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 J# Bitline1 $end
$var wire 1 h, Bitline2 $end
$var wire 1 x, ff_out $end

$scope module flipflop $end
$var wire 1 x, q $end
$var wire 1 *# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 y, state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 )# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 I# Bitline1 $end
$var wire 1 g, Bitline2 $end
$var wire 1 z, ff_out $end

$scope module flipflop $end
$var wire 1 z, q $end
$var wire 1 )# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 {, state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 (# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 H# Bitline1 $end
$var wire 1 f, Bitline2 $end
$var wire 1 |, ff_out $end

$scope module flipflop $end
$var wire 1 |, q $end
$var wire 1 (# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 }, state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 '# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 G# Bitline1 $end
$var wire 1 e, Bitline2 $end
$var wire 1 ~, ff_out $end

$scope module flipflop $end
$var wire 1 ~, q $end
$var wire 1 '# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 !- state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 &# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 F# Bitline1 $end
$var wire 1 d, Bitline2 $end
$var wire 1 "- ff_out $end

$scope module flipflop $end
$var wire 1 "- q $end
$var wire 1 &# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 #- state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 %# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 E# Bitline1 $end
$var wire 1 c, Bitline2 $end
$var wire 1 $- ff_out $end

$scope module flipflop $end
$var wire 1 $- q $end
$var wire 1 %# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 %- state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 $# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 D# Bitline1 $end
$var wire 1 b, Bitline2 $end
$var wire 1 &- ff_out $end

$scope module flipflop $end
$var wire 1 &- q $end
$var wire 1 $# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 '- state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ## D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 C# Bitline1 $end
$var wire 1 a, Bitline2 $end
$var wire 1 (- ff_out $end

$scope module flipflop $end
$var wire 1 (- q $end
$var wire 1 ## d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 )- state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 "# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 B# Bitline1 $end
$var wire 1 `, Bitline2 $end
$var wire 1 *- ff_out $end

$scope module flipflop $end
$var wire 1 *- q $end
$var wire 1 "# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 +- state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 !# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 A# Bitline1 $end
$var wire 1 _, Bitline2 $end
$var wire 1 ,- ff_out $end

$scope module flipflop $end
$var wire 1 ,- q $end
$var wire 1 !# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 -- state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ~" D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 \, ReadEnable1 $end
$var wire 1 ], ReadEnable2 $end
$var wire 1 @# Bitline1 $end
$var wire 1 ^, Bitline2 $end
$var wire 1 .- ff_out $end

$scope module flipflop $end
$var wire 1 .- q $end
$var wire 1 ~" d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 /- state $end
$upscope $end
$upscope $end
$upscope $end

$scope module b_reg $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 x+ WriteReg $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 0# D [15] $end
$var wire 1 1# D [14] $end
$var wire 1 2# D [13] $end
$var wire 1 3# D [12] $end
$var wire 1 4# D [11] $end
$var wire 1 5# D [10] $end
$var wire 1 6# D [9] $end
$var wire 1 7# D [8] $end
$var wire 1 8# D [7] $end
$var wire 1 9# D [6] $end
$var wire 1 :# D [5] $end
$var wire 1 ;# D [4] $end
$var wire 1 <# D [3] $end
$var wire 1 =# D [2] $end
$var wire 1 ># D [1] $end
$var wire 1 ?# D [0] $end
$var wire 1 P# Bitline1 [15] $end
$var wire 1 Q# Bitline1 [14] $end
$var wire 1 R# Bitline1 [13] $end
$var wire 1 S# Bitline1 [12] $end
$var wire 1 T# Bitline1 [11] $end
$var wire 1 U# Bitline1 [10] $end
$var wire 1 V# Bitline1 [9] $end
$var wire 1 W# Bitline1 [8] $end
$var wire 1 X# Bitline1 [7] $end
$var wire 1 Y# Bitline1 [6] $end
$var wire 1 Z# Bitline1 [5] $end
$var wire 1 [# Bitline1 [4] $end
$var wire 1 \# Bitline1 [3] $end
$var wire 1 ]# Bitline1 [2] $end
$var wire 1 ^# Bitline1 [1] $end
$var wire 1 _# Bitline1 [0] $end
$var wire 1 2- Bitline2 [15] $end
$var wire 1 3- Bitline2 [14] $end
$var wire 1 4- Bitline2 [13] $end
$var wire 1 5- Bitline2 [12] $end
$var wire 1 6- Bitline2 [11] $end
$var wire 1 7- Bitline2 [10] $end
$var wire 1 8- Bitline2 [9] $end
$var wire 1 9- Bitline2 [8] $end
$var wire 1 :- Bitline2 [7] $end
$var wire 1 ;- Bitline2 [6] $end
$var wire 1 <- Bitline2 [5] $end
$var wire 1 =- Bitline2 [4] $end
$var wire 1 >- Bitline2 [3] $end
$var wire 1 ?- Bitline2 [2] $end
$var wire 1 @- Bitline2 [1] $end
$var wire 1 A- Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ?# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 _# Bitline1 $end
$var wire 1 A- Bitline2 $end
$var wire 1 B- ff_out $end

$scope module flipflop $end
$var wire 1 B- q $end
$var wire 1 ?# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 C- state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ># D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 ^# Bitline1 $end
$var wire 1 @- Bitline2 $end
$var wire 1 D- ff_out $end

$scope module flipflop $end
$var wire 1 D- q $end
$var wire 1 ># d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 E- state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 =# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 ]# Bitline1 $end
$var wire 1 ?- Bitline2 $end
$var wire 1 F- ff_out $end

$scope module flipflop $end
$var wire 1 F- q $end
$var wire 1 =# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 G- state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 <# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 \# Bitline1 $end
$var wire 1 >- Bitline2 $end
$var wire 1 H- ff_out $end

$scope module flipflop $end
$var wire 1 H- q $end
$var wire 1 <# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 I- state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ;# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 [# Bitline1 $end
$var wire 1 =- Bitline2 $end
$var wire 1 J- ff_out $end

$scope module flipflop $end
$var wire 1 J- q $end
$var wire 1 ;# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 K- state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 :# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 Z# Bitline1 $end
$var wire 1 <- Bitline2 $end
$var wire 1 L- ff_out $end

$scope module flipflop $end
$var wire 1 L- q $end
$var wire 1 :# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 M- state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 9# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 Y# Bitline1 $end
$var wire 1 ;- Bitline2 $end
$var wire 1 N- ff_out $end

$scope module flipflop $end
$var wire 1 N- q $end
$var wire 1 9# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 O- state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 8# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 X# Bitline1 $end
$var wire 1 :- Bitline2 $end
$var wire 1 P- ff_out $end

$scope module flipflop $end
$var wire 1 P- q $end
$var wire 1 8# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 Q- state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 7# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 W# Bitline1 $end
$var wire 1 9- Bitline2 $end
$var wire 1 R- ff_out $end

$scope module flipflop $end
$var wire 1 R- q $end
$var wire 1 7# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 S- state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 6# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 V# Bitline1 $end
$var wire 1 8- Bitline2 $end
$var wire 1 T- ff_out $end

$scope module flipflop $end
$var wire 1 T- q $end
$var wire 1 6# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 U- state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 5# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 U# Bitline1 $end
$var wire 1 7- Bitline2 $end
$var wire 1 V- ff_out $end

$scope module flipflop $end
$var wire 1 V- q $end
$var wire 1 5# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 W- state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 4# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 T# Bitline1 $end
$var wire 1 6- Bitline2 $end
$var wire 1 X- ff_out $end

$scope module flipflop $end
$var wire 1 X- q $end
$var wire 1 4# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 Y- state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 3# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 S# Bitline1 $end
$var wire 1 5- Bitline2 $end
$var wire 1 Z- ff_out $end

$scope module flipflop $end
$var wire 1 Z- q $end
$var wire 1 3# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 [- state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 2# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 R# Bitline1 $end
$var wire 1 4- Bitline2 $end
$var wire 1 \- ff_out $end

$scope module flipflop $end
$var wire 1 \- q $end
$var wire 1 2# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 ]- state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 1# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 Q# Bitline1 $end
$var wire 1 3- Bitline2 $end
$var wire 1 ^- ff_out $end

$scope module flipflop $end
$var wire 1 ^- q $end
$var wire 1 1# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 _- state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 0# D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 0- ReadEnable1 $end
$var wire 1 1- ReadEnable2 $end
$var wire 1 P# Bitline1 $end
$var wire 1 2- Bitline2 $end
$var wire 1 `- ff_out $end

$scope module flipflop $end
$var wire 1 `- q $end
$var wire 1 0# d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 a- state $end
$upscope $end
$upscope $end
$upscope $end

$scope module imm_reg $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 x+ WriteReg $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 4% D [15] $end
$var wire 1 5% D [14] $end
$var wire 1 6% D [13] $end
$var wire 1 7% D [12] $end
$var wire 1 8% D [11] $end
$var wire 1 9% D [10] $end
$var wire 1 :% D [9] $end
$var wire 1 ;% D [8] $end
$var wire 1 <% D [7] $end
$var wire 1 =% D [6] $end
$var wire 1 >% D [5] $end
$var wire 1 ?% D [4] $end
$var wire 1 @% D [3] $end
$var wire 1 A% D [2] $end
$var wire 1 B% D [1] $end
$var wire 1 C% D [0] $end
$var wire 1 D% Bitline1 [15] $end
$var wire 1 E% Bitline1 [14] $end
$var wire 1 F% Bitline1 [13] $end
$var wire 1 G% Bitline1 [12] $end
$var wire 1 H% Bitline1 [11] $end
$var wire 1 I% Bitline1 [10] $end
$var wire 1 J% Bitline1 [9] $end
$var wire 1 K% Bitline1 [8] $end
$var wire 1 L% Bitline1 [7] $end
$var wire 1 M% Bitline1 [6] $end
$var wire 1 N% Bitline1 [5] $end
$var wire 1 O% Bitline1 [4] $end
$var wire 1 P% Bitline1 [3] $end
$var wire 1 Q% Bitline1 [2] $end
$var wire 1 R% Bitline1 [1] $end
$var wire 1 S% Bitline1 [0] $end
$var wire 1 d- Bitline2 [15] $end
$var wire 1 e- Bitline2 [14] $end
$var wire 1 f- Bitline2 [13] $end
$var wire 1 g- Bitline2 [12] $end
$var wire 1 h- Bitline2 [11] $end
$var wire 1 i- Bitline2 [10] $end
$var wire 1 j- Bitline2 [9] $end
$var wire 1 k- Bitline2 [8] $end
$var wire 1 l- Bitline2 [7] $end
$var wire 1 m- Bitline2 [6] $end
$var wire 1 n- Bitline2 [5] $end
$var wire 1 o- Bitline2 [4] $end
$var wire 1 p- Bitline2 [3] $end
$var wire 1 q- Bitline2 [2] $end
$var wire 1 r- Bitline2 [1] $end
$var wire 1 s- Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 C% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 S% Bitline1 $end
$var wire 1 s- Bitline2 $end
$var wire 1 t- ff_out $end

$scope module flipflop $end
$var wire 1 t- q $end
$var wire 1 C% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 u- state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 B% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 R% Bitline1 $end
$var wire 1 r- Bitline2 $end
$var wire 1 v- ff_out $end

$scope module flipflop $end
$var wire 1 v- q $end
$var wire 1 B% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 w- state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 A% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 Q% Bitline1 $end
$var wire 1 q- Bitline2 $end
$var wire 1 x- ff_out $end

$scope module flipflop $end
$var wire 1 x- q $end
$var wire 1 A% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 y- state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 @% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 P% Bitline1 $end
$var wire 1 p- Bitline2 $end
$var wire 1 z- ff_out $end

$scope module flipflop $end
$var wire 1 z- q $end
$var wire 1 @% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 {- state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ?% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 O% Bitline1 $end
$var wire 1 o- Bitline2 $end
$var wire 1 |- ff_out $end

$scope module flipflop $end
$var wire 1 |- q $end
$var wire 1 ?% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 }- state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 >% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 N% Bitline1 $end
$var wire 1 n- Bitline2 $end
$var wire 1 ~- ff_out $end

$scope module flipflop $end
$var wire 1 ~- q $end
$var wire 1 >% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 !. state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 =% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 M% Bitline1 $end
$var wire 1 m- Bitline2 $end
$var wire 1 ". ff_out $end

$scope module flipflop $end
$var wire 1 ". q $end
$var wire 1 =% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 #. state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 <% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 L% Bitline1 $end
$var wire 1 l- Bitline2 $end
$var wire 1 $. ff_out $end

$scope module flipflop $end
$var wire 1 $. q $end
$var wire 1 <% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 %. state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 ;% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 K% Bitline1 $end
$var wire 1 k- Bitline2 $end
$var wire 1 &. ff_out $end

$scope module flipflop $end
$var wire 1 &. q $end
$var wire 1 ;% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 '. state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 :% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 J% Bitline1 $end
$var wire 1 j- Bitline2 $end
$var wire 1 (. ff_out $end

$scope module flipflop $end
$var wire 1 (. q $end
$var wire 1 :% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 ). state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 9% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 I% Bitline1 $end
$var wire 1 i- Bitline2 $end
$var wire 1 *. ff_out $end

$scope module flipflop $end
$var wire 1 *. q $end
$var wire 1 9% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 +. state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 8% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 H% Bitline1 $end
$var wire 1 h- Bitline2 $end
$var wire 1 ,. ff_out $end

$scope module flipflop $end
$var wire 1 ,. q $end
$var wire 1 8% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 -. state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 7% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 G% Bitline1 $end
$var wire 1 g- Bitline2 $end
$var wire 1 .. ff_out $end

$scope module flipflop $end
$var wire 1 .. q $end
$var wire 1 7% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 /. state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 6% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 F% Bitline1 $end
$var wire 1 f- Bitline2 $end
$var wire 1 0. ff_out $end

$scope module flipflop $end
$var wire 1 0. q $end
$var wire 1 6% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 1. state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 5% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 E% Bitline1 $end
$var wire 1 e- Bitline2 $end
$var wire 1 2. ff_out $end

$scope module flipflop $end
$var wire 1 2. q $end
$var wire 1 5% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 3. state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var wire 1 4% D $end
$var wire 1 x+ WriteEnable $end
$var wire 1 b- ReadEnable1 $end
$var wire 1 c- ReadEnable2 $end
$var wire 1 D% Bitline1 $end
$var wire 1 d- Bitline2 $end
$var wire 1 4. ff_out $end

$scope module flipflop $end
$var wire 1 4. q $end
$var wire 1 4% d $end
$var wire 1 x+ wen $end
$var wire 1 1! clk $end
$var wire 1 w+ rst $end
$var reg 1 5. state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module rf $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 y% WriteReg $end
$var wire 1 >" SrcReg1 [3] $end
$var wire 1 ?" SrcReg1 [2] $end
$var wire 1 @" SrcReg1 [1] $end
$var wire 1 A" SrcReg1 [0] $end
$var wire 1 B" SrcReg2 [3] $end
$var wire 1 C" SrcReg2 [2] $end
$var wire 1 D" SrcReg2 [1] $end
$var wire 1 E" SrcReg2 [0] $end
$var wire 1 V" DstReg [3] $end
$var wire 1 W" DstReg [2] $end
$var wire 1 X" DstReg [1] $end
$var wire 1 Y" DstReg [0] $end
$var wire 1 b$ DstData [15] $end
$var wire 1 c$ DstData [14] $end
$var wire 1 d$ DstData [13] $end
$var wire 1 e$ DstData [12] $end
$var wire 1 f$ DstData [11] $end
$var wire 1 g$ DstData [10] $end
$var wire 1 h$ DstData [9] $end
$var wire 1 i$ DstData [8] $end
$var wire 1 j$ DstData [7] $end
$var wire 1 k$ DstData [6] $end
$var wire 1 l$ DstData [5] $end
$var wire 1 m$ DstData [4] $end
$var wire 1 n$ DstData [3] $end
$var wire 1 o$ DstData [2] $end
$var wire 1 p$ DstData [1] $end
$var wire 1 q$ DstData [0] $end
$var wire 1 ~" SrcData1 [15] $end
$var wire 1 !# SrcData1 [14] $end
$var wire 1 "# SrcData1 [13] $end
$var wire 1 ## SrcData1 [12] $end
$var wire 1 $# SrcData1 [11] $end
$var wire 1 %# SrcData1 [10] $end
$var wire 1 &# SrcData1 [9] $end
$var wire 1 '# SrcData1 [8] $end
$var wire 1 (# SrcData1 [7] $end
$var wire 1 )# SrcData1 [6] $end
$var wire 1 *# SrcData1 [5] $end
$var wire 1 +# SrcData1 [4] $end
$var wire 1 ,# SrcData1 [3] $end
$var wire 1 -# SrcData1 [2] $end
$var wire 1 .# SrcData1 [1] $end
$var wire 1 /# SrcData1 [0] $end
$var wire 1 0# SrcData2 [15] $end
$var wire 1 1# SrcData2 [14] $end
$var wire 1 2# SrcData2 [13] $end
$var wire 1 3# SrcData2 [12] $end
$var wire 1 4# SrcData2 [11] $end
$var wire 1 5# SrcData2 [10] $end
$var wire 1 6# SrcData2 [9] $end
$var wire 1 7# SrcData2 [8] $end
$var wire 1 8# SrcData2 [7] $end
$var wire 1 9# SrcData2 [6] $end
$var wire 1 :# SrcData2 [5] $end
$var wire 1 ;# SrcData2 [4] $end
$var wire 1 <# SrcData2 [3] $end
$var wire 1 =# SrcData2 [2] $end
$var wire 1 ># SrcData2 [1] $end
$var wire 1 ?# SrcData2 [0] $end
$var wire 1 7. dcd_out1 [15] $end
$var wire 1 8. dcd_out1 [14] $end
$var wire 1 9. dcd_out1 [13] $end
$var wire 1 :. dcd_out1 [12] $end
$var wire 1 ;. dcd_out1 [11] $end
$var wire 1 <. dcd_out1 [10] $end
$var wire 1 =. dcd_out1 [9] $end
$var wire 1 >. dcd_out1 [8] $end
$var wire 1 ?. dcd_out1 [7] $end
$var wire 1 @. dcd_out1 [6] $end
$var wire 1 A. dcd_out1 [5] $end
$var wire 1 B. dcd_out1 [4] $end
$var wire 1 C. dcd_out1 [3] $end
$var wire 1 D. dcd_out1 [2] $end
$var wire 1 E. dcd_out1 [1] $end
$var wire 1 F. dcd_out1 [0] $end
$var wire 1 G. dcd_out2 [15] $end
$var wire 1 H. dcd_out2 [14] $end
$var wire 1 I. dcd_out2 [13] $end
$var wire 1 J. dcd_out2 [12] $end
$var wire 1 K. dcd_out2 [11] $end
$var wire 1 L. dcd_out2 [10] $end
$var wire 1 M. dcd_out2 [9] $end
$var wire 1 N. dcd_out2 [8] $end
$var wire 1 O. dcd_out2 [7] $end
$var wire 1 P. dcd_out2 [6] $end
$var wire 1 Q. dcd_out2 [5] $end
$var wire 1 R. dcd_out2 [4] $end
$var wire 1 S. dcd_out2 [3] $end
$var wire 1 T. dcd_out2 [2] $end
$var wire 1 U. dcd_out2 [1] $end
$var wire 1 V. dcd_out2 [0] $end
$var wire 1 W. dcd_out3 [15] $end
$var wire 1 X. dcd_out3 [14] $end
$var wire 1 Y. dcd_out3 [13] $end
$var wire 1 Z. dcd_out3 [12] $end
$var wire 1 [. dcd_out3 [11] $end
$var wire 1 \. dcd_out3 [10] $end
$var wire 1 ]. dcd_out3 [9] $end
$var wire 1 ^. dcd_out3 [8] $end
$var wire 1 _. dcd_out3 [7] $end
$var wire 1 `. dcd_out3 [6] $end
$var wire 1 a. dcd_out3 [5] $end
$var wire 1 b. dcd_out3 [4] $end
$var wire 1 c. dcd_out3 [3] $end
$var wire 1 d. dcd_out3 [2] $end
$var wire 1 e. dcd_out3 [1] $end
$var wire 1 f. dcd_out3 [0] $end
$var wire 1 g. src1_data [15] $end
$var wire 1 h. src1_data [14] $end
$var wire 1 i. src1_data [13] $end
$var wire 1 j. src1_data [12] $end
$var wire 1 k. src1_data [11] $end
$var wire 1 l. src1_data [10] $end
$var wire 1 m. src1_data [9] $end
$var wire 1 n. src1_data [8] $end
$var wire 1 o. src1_data [7] $end
$var wire 1 p. src1_data [6] $end
$var wire 1 q. src1_data [5] $end
$var wire 1 r. src1_data [4] $end
$var wire 1 s. src1_data [3] $end
$var wire 1 t. src1_data [2] $end
$var wire 1 u. src1_data [1] $end
$var wire 1 v. src1_data [0] $end
$var wire 1 w. src2_data [15] $end
$var wire 1 x. src2_data [14] $end
$var wire 1 y. src2_data [13] $end
$var wire 1 z. src2_data [12] $end
$var wire 1 {. src2_data [11] $end
$var wire 1 |. src2_data [10] $end
$var wire 1 }. src2_data [9] $end
$var wire 1 ~. src2_data [8] $end
$var wire 1 !/ src2_data [7] $end
$var wire 1 "/ src2_data [6] $end
$var wire 1 #/ src2_data [5] $end
$var wire 1 $/ src2_data [4] $end
$var wire 1 %/ src2_data [3] $end
$var wire 1 &/ src2_data [2] $end
$var wire 1 '/ src2_data [1] $end
$var wire 1 (/ src2_data [0] $end

$scope module rd1 $end
$var wire 1 >" RegId [3] $end
$var wire 1 ?" RegId [2] $end
$var wire 1 @" RegId [1] $end
$var wire 1 A" RegId [0] $end
$var wire 1 7. Wordline [15] $end
$var wire 1 8. Wordline [14] $end
$var wire 1 9. Wordline [13] $end
$var wire 1 :. Wordline [12] $end
$var wire 1 ;. Wordline [11] $end
$var wire 1 <. Wordline [10] $end
$var wire 1 =. Wordline [9] $end
$var wire 1 >. Wordline [8] $end
$var wire 1 ?. Wordline [7] $end
$var wire 1 @. Wordline [6] $end
$var wire 1 A. Wordline [5] $end
$var wire 1 B. Wordline [4] $end
$var wire 1 C. Wordline [3] $end
$var wire 1 D. Wordline [2] $end
$var wire 1 E. Wordline [1] $end
$var wire 1 F. Wordline [0] $end
$upscope $end

$scope module rd2 $end
$var wire 1 B" RegId [3] $end
$var wire 1 C" RegId [2] $end
$var wire 1 D" RegId [1] $end
$var wire 1 E" RegId [0] $end
$var wire 1 G. Wordline [15] $end
$var wire 1 H. Wordline [14] $end
$var wire 1 I. Wordline [13] $end
$var wire 1 J. Wordline [12] $end
$var wire 1 K. Wordline [11] $end
$var wire 1 L. Wordline [10] $end
$var wire 1 M. Wordline [9] $end
$var wire 1 N. Wordline [8] $end
$var wire 1 O. Wordline [7] $end
$var wire 1 P. Wordline [6] $end
$var wire 1 Q. Wordline [5] $end
$var wire 1 R. Wordline [4] $end
$var wire 1 S. Wordline [3] $end
$var wire 1 T. Wordline [2] $end
$var wire 1 U. Wordline [1] $end
$var wire 1 V. Wordline [0] $end
$upscope $end

$scope module rd3 $end
$var wire 1 y% WriteReg $end
$var wire 1 V" RegId [3] $end
$var wire 1 W" RegId [2] $end
$var wire 1 X" RegId [1] $end
$var wire 1 Y" RegId [0] $end
$var wire 1 W. Wordline [15] $end
$var wire 1 X. Wordline [14] $end
$var wire 1 Y. Wordline [13] $end
$var wire 1 Z. Wordline [12] $end
$var wire 1 [. Wordline [11] $end
$var wire 1 \. Wordline [10] $end
$var wire 1 ]. Wordline [9] $end
$var wire 1 ^. Wordline [8] $end
$var wire 1 _. Wordline [7] $end
$var wire 1 `. Wordline [6] $end
$var wire 1 a. Wordline [5] $end
$var wire 1 b. Wordline [4] $end
$var wire 1 c. Wordline [3] $end
$var wire 1 d. Wordline [2] $end
$var wire 1 e. Wordline [1] $end
$var wire 1 f. Wordline [0] $end
$upscope $end

$scope module reg1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f. WriteReg $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 )/ ff_out $end

$scope module flipflop $end
$var wire 1 )/ q $end
$var wire 1 q$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 */ state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 +/ ff_out $end

$scope module flipflop $end
$var wire 1 +/ q $end
$var wire 1 p$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ,/ state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 -/ ff_out $end

$scope module flipflop $end
$var wire 1 -/ q $end
$var wire 1 o$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ./ state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 // ff_out $end

$scope module flipflop $end
$var wire 1 // q $end
$var wire 1 n$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 0/ state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 1/ ff_out $end

$scope module flipflop $end
$var wire 1 1/ q $end
$var wire 1 m$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 2/ state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 3/ ff_out $end

$scope module flipflop $end
$var wire 1 3/ q $end
$var wire 1 l$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 4/ state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 5/ ff_out $end

$scope module flipflop $end
$var wire 1 5/ q $end
$var wire 1 k$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 6/ state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 7/ ff_out $end

$scope module flipflop $end
$var wire 1 7/ q $end
$var wire 1 j$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 8/ state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 9/ ff_out $end

$scope module flipflop $end
$var wire 1 9/ q $end
$var wire 1 i$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 :/ state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 ;/ ff_out $end

$scope module flipflop $end
$var wire 1 ;/ q $end
$var wire 1 h$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 </ state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 =/ ff_out $end

$scope module flipflop $end
$var wire 1 =/ q $end
$var wire 1 g$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 >/ state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 ?/ ff_out $end

$scope module flipflop $end
$var wire 1 ?/ q $end
$var wire 1 f$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 @/ state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 A/ ff_out $end

$scope module flipflop $end
$var wire 1 A/ q $end
$var wire 1 e$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 B/ state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 C/ ff_out $end

$scope module flipflop $end
$var wire 1 C/ q $end
$var wire 1 d$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 D/ state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 E/ ff_out $end

$scope module flipflop $end
$var wire 1 E/ q $end
$var wire 1 c$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 F/ state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 f. WriteEnable $end
$var wire 1 F. ReadEnable1 $end
$var wire 1 V. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 G/ ff_out $end

$scope module flipflop $end
$var wire 1 G/ q $end
$var wire 1 b$ d $end
$var wire 1 f. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 H/ state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e. WriteReg $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 I/ ff_out $end

$scope module flipflop $end
$var wire 1 I/ q $end
$var wire 1 q$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 J/ state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 K/ ff_out $end

$scope module flipflop $end
$var wire 1 K/ q $end
$var wire 1 p$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 L/ state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 M/ ff_out $end

$scope module flipflop $end
$var wire 1 M/ q $end
$var wire 1 o$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 N/ state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 O/ ff_out $end

$scope module flipflop $end
$var wire 1 O/ q $end
$var wire 1 n$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 P/ state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 Q/ ff_out $end

$scope module flipflop $end
$var wire 1 Q/ q $end
$var wire 1 m$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 R/ state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 S/ ff_out $end

$scope module flipflop $end
$var wire 1 S/ q $end
$var wire 1 l$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 T/ state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 U/ ff_out $end

$scope module flipflop $end
$var wire 1 U/ q $end
$var wire 1 k$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 V/ state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 W/ ff_out $end

$scope module flipflop $end
$var wire 1 W/ q $end
$var wire 1 j$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 X/ state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 Y/ ff_out $end

$scope module flipflop $end
$var wire 1 Y/ q $end
$var wire 1 i$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 Z/ state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 [/ ff_out $end

$scope module flipflop $end
$var wire 1 [/ q $end
$var wire 1 h$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 \/ state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 ]/ ff_out $end

$scope module flipflop $end
$var wire 1 ]/ q $end
$var wire 1 g$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ^/ state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 _/ ff_out $end

$scope module flipflop $end
$var wire 1 _/ q $end
$var wire 1 f$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 `/ state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 a/ ff_out $end

$scope module flipflop $end
$var wire 1 a/ q $end
$var wire 1 e$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 b/ state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 c/ ff_out $end

$scope module flipflop $end
$var wire 1 c/ q $end
$var wire 1 d$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 d/ state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 e/ ff_out $end

$scope module flipflop $end
$var wire 1 e/ q $end
$var wire 1 c$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 f/ state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 e. WriteEnable $end
$var wire 1 E. ReadEnable1 $end
$var wire 1 U. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 g/ ff_out $end

$scope module flipflop $end
$var wire 1 g/ q $end
$var wire 1 b$ d $end
$var wire 1 e. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 h/ state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d. WriteReg $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 i/ ff_out $end

$scope module flipflop $end
$var wire 1 i/ q $end
$var wire 1 q$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 j/ state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 k/ ff_out $end

$scope module flipflop $end
$var wire 1 k/ q $end
$var wire 1 p$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 l/ state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 m/ ff_out $end

$scope module flipflop $end
$var wire 1 m/ q $end
$var wire 1 o$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 n/ state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 o/ ff_out $end

$scope module flipflop $end
$var wire 1 o/ q $end
$var wire 1 n$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 p/ state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 q/ ff_out $end

$scope module flipflop $end
$var wire 1 q/ q $end
$var wire 1 m$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 r/ state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 s/ ff_out $end

$scope module flipflop $end
$var wire 1 s/ q $end
$var wire 1 l$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 t/ state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 u/ ff_out $end

$scope module flipflop $end
$var wire 1 u/ q $end
$var wire 1 k$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 v/ state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 w/ ff_out $end

$scope module flipflop $end
$var wire 1 w/ q $end
$var wire 1 j$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 x/ state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 y/ ff_out $end

$scope module flipflop $end
$var wire 1 y/ q $end
$var wire 1 i$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 z/ state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 {/ ff_out $end

$scope module flipflop $end
$var wire 1 {/ q $end
$var wire 1 h$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 |/ state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 }/ ff_out $end

$scope module flipflop $end
$var wire 1 }/ q $end
$var wire 1 g$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ~/ state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 !0 ff_out $end

$scope module flipflop $end
$var wire 1 !0 q $end
$var wire 1 f$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 "0 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 #0 ff_out $end

$scope module flipflop $end
$var wire 1 #0 q $end
$var wire 1 e$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 $0 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 %0 ff_out $end

$scope module flipflop $end
$var wire 1 %0 q $end
$var wire 1 d$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 &0 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 '0 ff_out $end

$scope module flipflop $end
$var wire 1 '0 q $end
$var wire 1 c$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 (0 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 d. WriteEnable $end
$var wire 1 D. ReadEnable1 $end
$var wire 1 T. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 )0 ff_out $end

$scope module flipflop $end
$var wire 1 )0 q $end
$var wire 1 b$ d $end
$var wire 1 d. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 *0 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c. WriteReg $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 +0 ff_out $end

$scope module flipflop $end
$var wire 1 +0 q $end
$var wire 1 q$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ,0 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 -0 ff_out $end

$scope module flipflop $end
$var wire 1 -0 q $end
$var wire 1 p$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 .0 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 /0 ff_out $end

$scope module flipflop $end
$var wire 1 /0 q $end
$var wire 1 o$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 00 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 10 ff_out $end

$scope module flipflop $end
$var wire 1 10 q $end
$var wire 1 n$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 20 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 30 ff_out $end

$scope module flipflop $end
$var wire 1 30 q $end
$var wire 1 m$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 40 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 50 ff_out $end

$scope module flipflop $end
$var wire 1 50 q $end
$var wire 1 l$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 60 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 70 ff_out $end

$scope module flipflop $end
$var wire 1 70 q $end
$var wire 1 k$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 80 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 90 ff_out $end

$scope module flipflop $end
$var wire 1 90 q $end
$var wire 1 j$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 :0 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 ;0 ff_out $end

$scope module flipflop $end
$var wire 1 ;0 q $end
$var wire 1 i$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 <0 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 =0 ff_out $end

$scope module flipflop $end
$var wire 1 =0 q $end
$var wire 1 h$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 >0 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 ?0 ff_out $end

$scope module flipflop $end
$var wire 1 ?0 q $end
$var wire 1 g$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 @0 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 A0 ff_out $end

$scope module flipflop $end
$var wire 1 A0 q $end
$var wire 1 f$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 B0 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 C0 ff_out $end

$scope module flipflop $end
$var wire 1 C0 q $end
$var wire 1 e$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 D0 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 E0 ff_out $end

$scope module flipflop $end
$var wire 1 E0 q $end
$var wire 1 d$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 F0 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 G0 ff_out $end

$scope module flipflop $end
$var wire 1 G0 q $end
$var wire 1 c$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 H0 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 c. WriteEnable $end
$var wire 1 C. ReadEnable1 $end
$var wire 1 S. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 I0 ff_out $end

$scope module flipflop $end
$var wire 1 I0 q $end
$var wire 1 b$ d $end
$var wire 1 c. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 J0 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b. WriteReg $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 K0 ff_out $end

$scope module flipflop $end
$var wire 1 K0 q $end
$var wire 1 q$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 L0 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 M0 ff_out $end

$scope module flipflop $end
$var wire 1 M0 q $end
$var wire 1 p$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 N0 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 O0 ff_out $end

$scope module flipflop $end
$var wire 1 O0 q $end
$var wire 1 o$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 P0 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 Q0 ff_out $end

$scope module flipflop $end
$var wire 1 Q0 q $end
$var wire 1 n$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 R0 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 S0 ff_out $end

$scope module flipflop $end
$var wire 1 S0 q $end
$var wire 1 m$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 T0 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 U0 ff_out $end

$scope module flipflop $end
$var wire 1 U0 q $end
$var wire 1 l$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 V0 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 W0 ff_out $end

$scope module flipflop $end
$var wire 1 W0 q $end
$var wire 1 k$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 X0 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 Y0 ff_out $end

$scope module flipflop $end
$var wire 1 Y0 q $end
$var wire 1 j$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 Z0 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 [0 ff_out $end

$scope module flipflop $end
$var wire 1 [0 q $end
$var wire 1 i$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 \0 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 ]0 ff_out $end

$scope module flipflop $end
$var wire 1 ]0 q $end
$var wire 1 h$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ^0 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 _0 ff_out $end

$scope module flipflop $end
$var wire 1 _0 q $end
$var wire 1 g$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 `0 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 a0 ff_out $end

$scope module flipflop $end
$var wire 1 a0 q $end
$var wire 1 f$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 b0 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 c0 ff_out $end

$scope module flipflop $end
$var wire 1 c0 q $end
$var wire 1 e$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 d0 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 e0 ff_out $end

$scope module flipflop $end
$var wire 1 e0 q $end
$var wire 1 d$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 f0 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 g0 ff_out $end

$scope module flipflop $end
$var wire 1 g0 q $end
$var wire 1 c$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 h0 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 b. WriteEnable $end
$var wire 1 B. ReadEnable1 $end
$var wire 1 R. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 i0 ff_out $end

$scope module flipflop $end
$var wire 1 i0 q $end
$var wire 1 b$ d $end
$var wire 1 b. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 j0 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 a. WriteReg $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 k0 ff_out $end

$scope module flipflop $end
$var wire 1 k0 q $end
$var wire 1 q$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 l0 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 m0 ff_out $end

$scope module flipflop $end
$var wire 1 m0 q $end
$var wire 1 p$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 n0 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 o0 ff_out $end

$scope module flipflop $end
$var wire 1 o0 q $end
$var wire 1 o$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 p0 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 q0 ff_out $end

$scope module flipflop $end
$var wire 1 q0 q $end
$var wire 1 n$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 r0 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 s0 ff_out $end

$scope module flipflop $end
$var wire 1 s0 q $end
$var wire 1 m$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 t0 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 u0 ff_out $end

$scope module flipflop $end
$var wire 1 u0 q $end
$var wire 1 l$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 v0 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 w0 ff_out $end

$scope module flipflop $end
$var wire 1 w0 q $end
$var wire 1 k$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 x0 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 y0 ff_out $end

$scope module flipflop $end
$var wire 1 y0 q $end
$var wire 1 j$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 z0 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 {0 ff_out $end

$scope module flipflop $end
$var wire 1 {0 q $end
$var wire 1 i$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 |0 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 }0 ff_out $end

$scope module flipflop $end
$var wire 1 }0 q $end
$var wire 1 h$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ~0 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 !1 ff_out $end

$scope module flipflop $end
$var wire 1 !1 q $end
$var wire 1 g$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 "1 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 #1 ff_out $end

$scope module flipflop $end
$var wire 1 #1 q $end
$var wire 1 f$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 $1 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 %1 ff_out $end

$scope module flipflop $end
$var wire 1 %1 q $end
$var wire 1 e$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 &1 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 '1 ff_out $end

$scope module flipflop $end
$var wire 1 '1 q $end
$var wire 1 d$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 (1 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 )1 ff_out $end

$scope module flipflop $end
$var wire 1 )1 q $end
$var wire 1 c$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 *1 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 a. WriteEnable $end
$var wire 1 A. ReadEnable1 $end
$var wire 1 Q. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 +1 ff_out $end

$scope module flipflop $end
$var wire 1 +1 q $end
$var wire 1 b$ d $end
$var wire 1 a. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ,1 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 `. WriteReg $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 -1 ff_out $end

$scope module flipflop $end
$var wire 1 -1 q $end
$var wire 1 q$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 .1 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 /1 ff_out $end

$scope module flipflop $end
$var wire 1 /1 q $end
$var wire 1 p$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 01 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 11 ff_out $end

$scope module flipflop $end
$var wire 1 11 q $end
$var wire 1 o$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 21 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 31 ff_out $end

$scope module flipflop $end
$var wire 1 31 q $end
$var wire 1 n$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 41 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 51 ff_out $end

$scope module flipflop $end
$var wire 1 51 q $end
$var wire 1 m$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 61 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 71 ff_out $end

$scope module flipflop $end
$var wire 1 71 q $end
$var wire 1 l$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 81 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 91 ff_out $end

$scope module flipflop $end
$var wire 1 91 q $end
$var wire 1 k$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 :1 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 ;1 ff_out $end

$scope module flipflop $end
$var wire 1 ;1 q $end
$var wire 1 j$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 <1 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 =1 ff_out $end

$scope module flipflop $end
$var wire 1 =1 q $end
$var wire 1 i$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 >1 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 ?1 ff_out $end

$scope module flipflop $end
$var wire 1 ?1 q $end
$var wire 1 h$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 @1 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 A1 ff_out $end

$scope module flipflop $end
$var wire 1 A1 q $end
$var wire 1 g$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 B1 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 C1 ff_out $end

$scope module flipflop $end
$var wire 1 C1 q $end
$var wire 1 f$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 D1 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 E1 ff_out $end

$scope module flipflop $end
$var wire 1 E1 q $end
$var wire 1 e$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 F1 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 G1 ff_out $end

$scope module flipflop $end
$var wire 1 G1 q $end
$var wire 1 d$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 H1 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 I1 ff_out $end

$scope module flipflop $end
$var wire 1 I1 q $end
$var wire 1 c$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 J1 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 `. WriteEnable $end
$var wire 1 @. ReadEnable1 $end
$var wire 1 P. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 K1 ff_out $end

$scope module flipflop $end
$var wire 1 K1 q $end
$var wire 1 b$ d $end
$var wire 1 `. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 L1 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 _. WriteReg $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 M1 ff_out $end

$scope module flipflop $end
$var wire 1 M1 q $end
$var wire 1 q$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 N1 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 O1 ff_out $end

$scope module flipflop $end
$var wire 1 O1 q $end
$var wire 1 p$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 P1 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 Q1 ff_out $end

$scope module flipflop $end
$var wire 1 Q1 q $end
$var wire 1 o$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 R1 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 S1 ff_out $end

$scope module flipflop $end
$var wire 1 S1 q $end
$var wire 1 n$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 T1 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 U1 ff_out $end

$scope module flipflop $end
$var wire 1 U1 q $end
$var wire 1 m$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 V1 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 W1 ff_out $end

$scope module flipflop $end
$var wire 1 W1 q $end
$var wire 1 l$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 X1 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 Y1 ff_out $end

$scope module flipflop $end
$var wire 1 Y1 q $end
$var wire 1 k$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 Z1 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 [1 ff_out $end

$scope module flipflop $end
$var wire 1 [1 q $end
$var wire 1 j$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 \1 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 ]1 ff_out $end

$scope module flipflop $end
$var wire 1 ]1 q $end
$var wire 1 i$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ^1 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 _1 ff_out $end

$scope module flipflop $end
$var wire 1 _1 q $end
$var wire 1 h$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 `1 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 a1 ff_out $end

$scope module flipflop $end
$var wire 1 a1 q $end
$var wire 1 g$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 b1 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 c1 ff_out $end

$scope module flipflop $end
$var wire 1 c1 q $end
$var wire 1 f$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 d1 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 e1 ff_out $end

$scope module flipflop $end
$var wire 1 e1 q $end
$var wire 1 e$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 f1 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 g1 ff_out $end

$scope module flipflop $end
$var wire 1 g1 q $end
$var wire 1 d$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 h1 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 i1 ff_out $end

$scope module flipflop $end
$var wire 1 i1 q $end
$var wire 1 c$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 j1 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 _. WriteEnable $end
$var wire 1 ?. ReadEnable1 $end
$var wire 1 O. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 k1 ff_out $end

$scope module flipflop $end
$var wire 1 k1 q $end
$var wire 1 b$ d $end
$var wire 1 _. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 l1 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 ^. WriteReg $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 m1 ff_out $end

$scope module flipflop $end
$var wire 1 m1 q $end
$var wire 1 q$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 n1 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 o1 ff_out $end

$scope module flipflop $end
$var wire 1 o1 q $end
$var wire 1 p$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 p1 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 q1 ff_out $end

$scope module flipflop $end
$var wire 1 q1 q $end
$var wire 1 o$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 r1 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 s1 ff_out $end

$scope module flipflop $end
$var wire 1 s1 q $end
$var wire 1 n$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 t1 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 u1 ff_out $end

$scope module flipflop $end
$var wire 1 u1 q $end
$var wire 1 m$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 v1 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 w1 ff_out $end

$scope module flipflop $end
$var wire 1 w1 q $end
$var wire 1 l$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 x1 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 y1 ff_out $end

$scope module flipflop $end
$var wire 1 y1 q $end
$var wire 1 k$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 z1 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 {1 ff_out $end

$scope module flipflop $end
$var wire 1 {1 q $end
$var wire 1 j$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 |1 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 }1 ff_out $end

$scope module flipflop $end
$var wire 1 }1 q $end
$var wire 1 i$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ~1 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 !2 ff_out $end

$scope module flipflop $end
$var wire 1 !2 q $end
$var wire 1 h$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 "2 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 #2 ff_out $end

$scope module flipflop $end
$var wire 1 #2 q $end
$var wire 1 g$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 $2 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 %2 ff_out $end

$scope module flipflop $end
$var wire 1 %2 q $end
$var wire 1 f$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 &2 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 '2 ff_out $end

$scope module flipflop $end
$var wire 1 '2 q $end
$var wire 1 e$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 (2 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 )2 ff_out $end

$scope module flipflop $end
$var wire 1 )2 q $end
$var wire 1 d$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 *2 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 +2 ff_out $end

$scope module flipflop $end
$var wire 1 +2 q $end
$var wire 1 c$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ,2 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 ^. WriteEnable $end
$var wire 1 >. ReadEnable1 $end
$var wire 1 N. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 -2 ff_out $end

$scope module flipflop $end
$var wire 1 -2 q $end
$var wire 1 b$ d $end
$var wire 1 ^. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 .2 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 ]. WriteReg $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 /2 ff_out $end

$scope module flipflop $end
$var wire 1 /2 q $end
$var wire 1 q$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 02 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 12 ff_out $end

$scope module flipflop $end
$var wire 1 12 q $end
$var wire 1 p$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 22 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 32 ff_out $end

$scope module flipflop $end
$var wire 1 32 q $end
$var wire 1 o$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 42 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 52 ff_out $end

$scope module flipflop $end
$var wire 1 52 q $end
$var wire 1 n$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 62 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 72 ff_out $end

$scope module flipflop $end
$var wire 1 72 q $end
$var wire 1 m$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 82 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 92 ff_out $end

$scope module flipflop $end
$var wire 1 92 q $end
$var wire 1 l$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 :2 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 ;2 ff_out $end

$scope module flipflop $end
$var wire 1 ;2 q $end
$var wire 1 k$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 <2 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 =2 ff_out $end

$scope module flipflop $end
$var wire 1 =2 q $end
$var wire 1 j$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 >2 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 ?2 ff_out $end

$scope module flipflop $end
$var wire 1 ?2 q $end
$var wire 1 i$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 @2 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 A2 ff_out $end

$scope module flipflop $end
$var wire 1 A2 q $end
$var wire 1 h$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 B2 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 C2 ff_out $end

$scope module flipflop $end
$var wire 1 C2 q $end
$var wire 1 g$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 D2 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 E2 ff_out $end

$scope module flipflop $end
$var wire 1 E2 q $end
$var wire 1 f$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 F2 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 G2 ff_out $end

$scope module flipflop $end
$var wire 1 G2 q $end
$var wire 1 e$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 H2 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 I2 ff_out $end

$scope module flipflop $end
$var wire 1 I2 q $end
$var wire 1 d$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 J2 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 K2 ff_out $end

$scope module flipflop $end
$var wire 1 K2 q $end
$var wire 1 c$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 L2 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 ]. WriteEnable $end
$var wire 1 =. ReadEnable1 $end
$var wire 1 M. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 M2 ff_out $end

$scope module flipflop $end
$var wire 1 M2 q $end
$var wire 1 b$ d $end
$var wire 1 ]. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 N2 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 \. WriteReg $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 O2 ff_out $end

$scope module flipflop $end
$var wire 1 O2 q $end
$var wire 1 q$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 P2 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 Q2 ff_out $end

$scope module flipflop $end
$var wire 1 Q2 q $end
$var wire 1 p$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 R2 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 S2 ff_out $end

$scope module flipflop $end
$var wire 1 S2 q $end
$var wire 1 o$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 T2 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 U2 ff_out $end

$scope module flipflop $end
$var wire 1 U2 q $end
$var wire 1 n$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 V2 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 W2 ff_out $end

$scope module flipflop $end
$var wire 1 W2 q $end
$var wire 1 m$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 X2 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 Y2 ff_out $end

$scope module flipflop $end
$var wire 1 Y2 q $end
$var wire 1 l$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 Z2 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 [2 ff_out $end

$scope module flipflop $end
$var wire 1 [2 q $end
$var wire 1 k$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 \2 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 ]2 ff_out $end

$scope module flipflop $end
$var wire 1 ]2 q $end
$var wire 1 j$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ^2 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 _2 ff_out $end

$scope module flipflop $end
$var wire 1 _2 q $end
$var wire 1 i$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 `2 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 a2 ff_out $end

$scope module flipflop $end
$var wire 1 a2 q $end
$var wire 1 h$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 b2 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 c2 ff_out $end

$scope module flipflop $end
$var wire 1 c2 q $end
$var wire 1 g$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 d2 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 e2 ff_out $end

$scope module flipflop $end
$var wire 1 e2 q $end
$var wire 1 f$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 f2 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 g2 ff_out $end

$scope module flipflop $end
$var wire 1 g2 q $end
$var wire 1 e$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 h2 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 i2 ff_out $end

$scope module flipflop $end
$var wire 1 i2 q $end
$var wire 1 d$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 j2 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 k2 ff_out $end

$scope module flipflop $end
$var wire 1 k2 q $end
$var wire 1 c$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 l2 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 \. WriteEnable $end
$var wire 1 <. ReadEnable1 $end
$var wire 1 L. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 m2 ff_out $end

$scope module flipflop $end
$var wire 1 m2 q $end
$var wire 1 b$ d $end
$var wire 1 \. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 n2 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 [. WriteReg $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 o2 ff_out $end

$scope module flipflop $end
$var wire 1 o2 q $end
$var wire 1 q$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 p2 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 q2 ff_out $end

$scope module flipflop $end
$var wire 1 q2 q $end
$var wire 1 p$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 r2 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 s2 ff_out $end

$scope module flipflop $end
$var wire 1 s2 q $end
$var wire 1 o$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 t2 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 u2 ff_out $end

$scope module flipflop $end
$var wire 1 u2 q $end
$var wire 1 n$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 v2 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 w2 ff_out $end

$scope module flipflop $end
$var wire 1 w2 q $end
$var wire 1 m$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 x2 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 y2 ff_out $end

$scope module flipflop $end
$var wire 1 y2 q $end
$var wire 1 l$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 z2 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 {2 ff_out $end

$scope module flipflop $end
$var wire 1 {2 q $end
$var wire 1 k$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 |2 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 }2 ff_out $end

$scope module flipflop $end
$var wire 1 }2 q $end
$var wire 1 j$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ~2 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 !3 ff_out $end

$scope module flipflop $end
$var wire 1 !3 q $end
$var wire 1 i$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 "3 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 #3 ff_out $end

$scope module flipflop $end
$var wire 1 #3 q $end
$var wire 1 h$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 $3 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 %3 ff_out $end

$scope module flipflop $end
$var wire 1 %3 q $end
$var wire 1 g$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 &3 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 '3 ff_out $end

$scope module flipflop $end
$var wire 1 '3 q $end
$var wire 1 f$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 (3 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 )3 ff_out $end

$scope module flipflop $end
$var wire 1 )3 q $end
$var wire 1 e$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 *3 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 +3 ff_out $end

$scope module flipflop $end
$var wire 1 +3 q $end
$var wire 1 d$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ,3 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 -3 ff_out $end

$scope module flipflop $end
$var wire 1 -3 q $end
$var wire 1 c$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 .3 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 [. WriteEnable $end
$var wire 1 ;. ReadEnable1 $end
$var wire 1 K. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 /3 ff_out $end

$scope module flipflop $end
$var wire 1 /3 q $end
$var wire 1 b$ d $end
$var wire 1 [. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 03 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 Z. WriteReg $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 13 ff_out $end

$scope module flipflop $end
$var wire 1 13 q $end
$var wire 1 q$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 23 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 33 ff_out $end

$scope module flipflop $end
$var wire 1 33 q $end
$var wire 1 p$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 43 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 53 ff_out $end

$scope module flipflop $end
$var wire 1 53 q $end
$var wire 1 o$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 63 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 73 ff_out $end

$scope module flipflop $end
$var wire 1 73 q $end
$var wire 1 n$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 83 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 93 ff_out $end

$scope module flipflop $end
$var wire 1 93 q $end
$var wire 1 m$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 :3 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 ;3 ff_out $end

$scope module flipflop $end
$var wire 1 ;3 q $end
$var wire 1 l$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 <3 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 =3 ff_out $end

$scope module flipflop $end
$var wire 1 =3 q $end
$var wire 1 k$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 >3 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 ?3 ff_out $end

$scope module flipflop $end
$var wire 1 ?3 q $end
$var wire 1 j$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 @3 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 A3 ff_out $end

$scope module flipflop $end
$var wire 1 A3 q $end
$var wire 1 i$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 B3 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 C3 ff_out $end

$scope module flipflop $end
$var wire 1 C3 q $end
$var wire 1 h$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 D3 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 E3 ff_out $end

$scope module flipflop $end
$var wire 1 E3 q $end
$var wire 1 g$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 F3 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 G3 ff_out $end

$scope module flipflop $end
$var wire 1 G3 q $end
$var wire 1 f$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 H3 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 I3 ff_out $end

$scope module flipflop $end
$var wire 1 I3 q $end
$var wire 1 e$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 J3 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 K3 ff_out $end

$scope module flipflop $end
$var wire 1 K3 q $end
$var wire 1 d$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 L3 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 M3 ff_out $end

$scope module flipflop $end
$var wire 1 M3 q $end
$var wire 1 c$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 N3 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 Z. WriteEnable $end
$var wire 1 :. ReadEnable1 $end
$var wire 1 J. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 O3 ff_out $end

$scope module flipflop $end
$var wire 1 O3 q $end
$var wire 1 b$ d $end
$var wire 1 Z. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 P3 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 Y. WriteReg $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 Q3 ff_out $end

$scope module flipflop $end
$var wire 1 Q3 q $end
$var wire 1 q$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 R3 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 S3 ff_out $end

$scope module flipflop $end
$var wire 1 S3 q $end
$var wire 1 p$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 T3 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 U3 ff_out $end

$scope module flipflop $end
$var wire 1 U3 q $end
$var wire 1 o$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 V3 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 W3 ff_out $end

$scope module flipflop $end
$var wire 1 W3 q $end
$var wire 1 n$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 X3 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 Y3 ff_out $end

$scope module flipflop $end
$var wire 1 Y3 q $end
$var wire 1 m$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 Z3 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 [3 ff_out $end

$scope module flipflop $end
$var wire 1 [3 q $end
$var wire 1 l$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 \3 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 ]3 ff_out $end

$scope module flipflop $end
$var wire 1 ]3 q $end
$var wire 1 k$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ^3 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 _3 ff_out $end

$scope module flipflop $end
$var wire 1 _3 q $end
$var wire 1 j$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 `3 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 a3 ff_out $end

$scope module flipflop $end
$var wire 1 a3 q $end
$var wire 1 i$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 b3 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 c3 ff_out $end

$scope module flipflop $end
$var wire 1 c3 q $end
$var wire 1 h$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 d3 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 e3 ff_out $end

$scope module flipflop $end
$var wire 1 e3 q $end
$var wire 1 g$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 f3 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 g3 ff_out $end

$scope module flipflop $end
$var wire 1 g3 q $end
$var wire 1 f$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 h3 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 i3 ff_out $end

$scope module flipflop $end
$var wire 1 i3 q $end
$var wire 1 e$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 j3 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 k3 ff_out $end

$scope module flipflop $end
$var wire 1 k3 q $end
$var wire 1 d$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 l3 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 m3 ff_out $end

$scope module flipflop $end
$var wire 1 m3 q $end
$var wire 1 c$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 n3 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 Y. WriteEnable $end
$var wire 1 9. ReadEnable1 $end
$var wire 1 I. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 o3 ff_out $end

$scope module flipflop $end
$var wire 1 o3 q $end
$var wire 1 b$ d $end
$var wire 1 Y. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 p3 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 X. WriteReg $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 q3 ff_out $end

$scope module flipflop $end
$var wire 1 q3 q $end
$var wire 1 q$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 r3 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 s3 ff_out $end

$scope module flipflop $end
$var wire 1 s3 q $end
$var wire 1 p$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 t3 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 u3 ff_out $end

$scope module flipflop $end
$var wire 1 u3 q $end
$var wire 1 o$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 v3 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 w3 ff_out $end

$scope module flipflop $end
$var wire 1 w3 q $end
$var wire 1 n$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 x3 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 y3 ff_out $end

$scope module flipflop $end
$var wire 1 y3 q $end
$var wire 1 m$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 z3 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 {3 ff_out $end

$scope module flipflop $end
$var wire 1 {3 q $end
$var wire 1 l$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 |3 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 }3 ff_out $end

$scope module flipflop $end
$var wire 1 }3 q $end
$var wire 1 k$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ~3 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 !4 ff_out $end

$scope module flipflop $end
$var wire 1 !4 q $end
$var wire 1 j$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 "4 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 #4 ff_out $end

$scope module flipflop $end
$var wire 1 #4 q $end
$var wire 1 i$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 $4 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 %4 ff_out $end

$scope module flipflop $end
$var wire 1 %4 q $end
$var wire 1 h$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 &4 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 '4 ff_out $end

$scope module flipflop $end
$var wire 1 '4 q $end
$var wire 1 g$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 (4 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 )4 ff_out $end

$scope module flipflop $end
$var wire 1 )4 q $end
$var wire 1 f$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 *4 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 +4 ff_out $end

$scope module flipflop $end
$var wire 1 +4 q $end
$var wire 1 e$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 ,4 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 -4 ff_out $end

$scope module flipflop $end
$var wire 1 -4 q $end
$var wire 1 d$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 .4 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 /4 ff_out $end

$scope module flipflop $end
$var wire 1 /4 q $end
$var wire 1 c$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 04 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 X. WriteEnable $end
$var wire 1 8. ReadEnable1 $end
$var wire 1 H. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 14 ff_out $end

$scope module flipflop $end
$var wire 1 14 q $end
$var wire 1 b$ d $end
$var wire 1 X. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 24 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module reg15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 W. WriteReg $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 b$ D [15] $end
$var wire 1 c$ D [14] $end
$var wire 1 d$ D [13] $end
$var wire 1 e$ D [12] $end
$var wire 1 f$ D [11] $end
$var wire 1 g$ D [10] $end
$var wire 1 h$ D [9] $end
$var wire 1 i$ D [8] $end
$var wire 1 j$ D [7] $end
$var wire 1 k$ D [6] $end
$var wire 1 l$ D [5] $end
$var wire 1 m$ D [4] $end
$var wire 1 n$ D [3] $end
$var wire 1 o$ D [2] $end
$var wire 1 p$ D [1] $end
$var wire 1 q$ D [0] $end
$var wire 1 g. Bitline1 [15] $end
$var wire 1 h. Bitline1 [14] $end
$var wire 1 i. Bitline1 [13] $end
$var wire 1 j. Bitline1 [12] $end
$var wire 1 k. Bitline1 [11] $end
$var wire 1 l. Bitline1 [10] $end
$var wire 1 m. Bitline1 [9] $end
$var wire 1 n. Bitline1 [8] $end
$var wire 1 o. Bitline1 [7] $end
$var wire 1 p. Bitline1 [6] $end
$var wire 1 q. Bitline1 [5] $end
$var wire 1 r. Bitline1 [4] $end
$var wire 1 s. Bitline1 [3] $end
$var wire 1 t. Bitline1 [2] $end
$var wire 1 u. Bitline1 [1] $end
$var wire 1 v. Bitline1 [0] $end
$var wire 1 w. Bitline2 [15] $end
$var wire 1 x. Bitline2 [14] $end
$var wire 1 y. Bitline2 [13] $end
$var wire 1 z. Bitline2 [12] $end
$var wire 1 {. Bitline2 [11] $end
$var wire 1 |. Bitline2 [10] $end
$var wire 1 }. Bitline2 [9] $end
$var wire 1 ~. Bitline2 [8] $end
$var wire 1 !/ Bitline2 [7] $end
$var wire 1 "/ Bitline2 [6] $end
$var wire 1 #/ Bitline2 [5] $end
$var wire 1 $/ Bitline2 [4] $end
$var wire 1 %/ Bitline2 [3] $end
$var wire 1 &/ Bitline2 [2] $end
$var wire 1 '/ Bitline2 [1] $end
$var wire 1 (/ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 q$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 v. Bitline1 $end
$var wire 1 (/ Bitline2 $end
$var wire 1 34 ff_out $end

$scope module flipflop $end
$var wire 1 34 q $end
$var wire 1 q$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 44 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 p$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 u. Bitline1 $end
$var wire 1 '/ Bitline2 $end
$var wire 1 54 ff_out $end

$scope module flipflop $end
$var wire 1 54 q $end
$var wire 1 p$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 64 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 o$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 t. Bitline1 $end
$var wire 1 &/ Bitline2 $end
$var wire 1 74 ff_out $end

$scope module flipflop $end
$var wire 1 74 q $end
$var wire 1 o$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 84 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 n$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 s. Bitline1 $end
$var wire 1 %/ Bitline2 $end
$var wire 1 94 ff_out $end

$scope module flipflop $end
$var wire 1 94 q $end
$var wire 1 n$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 :4 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 m$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 r. Bitline1 $end
$var wire 1 $/ Bitline2 $end
$var wire 1 ;4 ff_out $end

$scope module flipflop $end
$var wire 1 ;4 q $end
$var wire 1 m$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 <4 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 l$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 q. Bitline1 $end
$var wire 1 #/ Bitline2 $end
$var wire 1 =4 ff_out $end

$scope module flipflop $end
$var wire 1 =4 q $end
$var wire 1 l$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 >4 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 k$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 p. Bitline1 $end
$var wire 1 "/ Bitline2 $end
$var wire 1 ?4 ff_out $end

$scope module flipflop $end
$var wire 1 ?4 q $end
$var wire 1 k$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 @4 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 j$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 o. Bitline1 $end
$var wire 1 !/ Bitline2 $end
$var wire 1 A4 ff_out $end

$scope module flipflop $end
$var wire 1 A4 q $end
$var wire 1 j$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 B4 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 i$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 n. Bitline1 $end
$var wire 1 ~. Bitline2 $end
$var wire 1 C4 ff_out $end

$scope module flipflop $end
$var wire 1 C4 q $end
$var wire 1 i$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 D4 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 h$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 m. Bitline1 $end
$var wire 1 }. Bitline2 $end
$var wire 1 E4 ff_out $end

$scope module flipflop $end
$var wire 1 E4 q $end
$var wire 1 h$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 F4 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 g$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 l. Bitline1 $end
$var wire 1 |. Bitline2 $end
$var wire 1 G4 ff_out $end

$scope module flipflop $end
$var wire 1 G4 q $end
$var wire 1 g$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 H4 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 f$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 k. Bitline1 $end
$var wire 1 {. Bitline2 $end
$var wire 1 I4 ff_out $end

$scope module flipflop $end
$var wire 1 I4 q $end
$var wire 1 f$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 J4 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 e$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 j. Bitline1 $end
$var wire 1 z. Bitline2 $end
$var wire 1 K4 ff_out $end

$scope module flipflop $end
$var wire 1 K4 q $end
$var wire 1 e$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 L4 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 d$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 i. Bitline1 $end
$var wire 1 y. Bitline2 $end
$var wire 1 M4 ff_out $end

$scope module flipflop $end
$var wire 1 M4 q $end
$var wire 1 d$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 N4 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 c$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 h. Bitline1 $end
$var wire 1 x. Bitline2 $end
$var wire 1 O4 ff_out $end

$scope module flipflop $end
$var wire 1 O4 q $end
$var wire 1 c$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 P4 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var wire 1 b$ D $end
$var wire 1 W. WriteEnable $end
$var wire 1 7. ReadEnable1 $end
$var wire 1 G. ReadEnable2 $end
$var wire 1 g. Bitline1 $end
$var wire 1 w. Bitline2 $end
$var wire 1 Q4 ff_out $end

$scope module flipflop $end
$var wire 1 Q4 q $end
$var wire 1 b$ d $end
$var wire 1 W. wen $end
$var wire 1 1! clk $end
$var wire 1 6. rst $end
$var reg 1 R4 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module cpuControl $end
$var wire 1 n" opc [15] $end
$var wire 1 o" opc [14] $end
$var wire 1 p" opc [13] $end
$var wire 1 q" opc [12] $end
$var wire 1 g% halt $end
$var wire 1 h% RegDst $end
$var wire 1 j% ALUSrc $end
$var wire 1 l% MemRead $end
$var wire 1 o% MemWrite $end
$var wire 1 r% MemtoReg $end
$var wire 1 v% RegWrite $end
$var wire 1 z% Lower $end
$var wire 1 |% Higher $end
$var wire 1 ~% BEn $end
$var wire 1 $& Br $end
$var wire 1 (& PCS $end
$var reg 1 S4 r_hlt $end
$var reg 1 T4 r_RegDst $end
$var reg 1 U4 r_ALUSrc $end
$var reg 1 V4 r_MemRead $end
$var reg 1 W4 r_MemWrite $end
$var reg 1 X4 r_MemtoReg $end
$var reg 1 Y4 r_RegWrite $end
$var reg 1 Z4 r_Lower $end
$var reg 1 [4 r_Higher $end
$var reg 1 \4 r_BEn $end
$var reg 1 ]4 r_Br $end
$var reg 1 ^4 r_PCS $end
$upscope $end

$scope module fr $end
$var wire 1 1! clk $end
$var wire 1 _4 rst $end
$var wire 1 ;" en [2] $end
$var wire 1 <" en [1] $end
$var wire 1 =" en [0] $end
$var wire 1 5" flag_in [2] $end
$var wire 1 6" flag_in [1] $end
$var wire 1 7" flag_in [0] $end
$var wire 1 8" flag_out [2] $end
$var wire 1 9" flag_out [1] $end
$var wire 1 :" flag_out [0] $end

$scope module ff0 $end
$var wire 1 :" q $end
$var wire 1 7" d $end
$var wire 1 =" wen $end
$var wire 1 1! clk $end
$var wire 1 _4 rst $end
$var reg 1 `4 state $end
$upscope $end

$scope module ff1 $end
$var wire 1 9" q $end
$var wire 1 6" d $end
$var wire 1 <" wen $end
$var wire 1 1! clk $end
$var wire 1 _4 rst $end
$var reg 1 a4 state $end
$upscope $end

$scope module ff2 $end
$var wire 1 8" q $end
$var wire 1 5" d $end
$var wire 1 ;" wen $end
$var wire 1 1! clk $end
$var wire 1 _4 rst $end
$var reg 1 b4 state $end
$upscope $end
$upscope $end

$scope module ex_mem $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 d4 en $end
$var wire 1 m% MemRead_in $end
$var wire 1 p% MemWrite_in $end
$var wire 1 s% MemtoReg_in $end
$var wire 1 w% RegWrite_in $end
$var wire 1 )& PCS_in $end
$var wire 1 N" wreg_in [3] $end
$var wire 1 O" wreg_in [2] $end
$var wire 1 P" wreg_in [1] $end
$var wire 1 Q" wreg_in [0] $end
$var wire 1 n" opcode_in [3] $end
$var wire 1 o" opcode_in [2] $end
$var wire 1 p" opcode_in [1] $end
$var wire 1 q" opcode_in [0] $end
$var wire 1 c! npc_in [15] $end
$var wire 1 d! npc_in [14] $end
$var wire 1 e! npc_in [13] $end
$var wire 1 f! npc_in [12] $end
$var wire 1 g! npc_in [11] $end
$var wire 1 h! npc_in [10] $end
$var wire 1 i! npc_in [9] $end
$var wire 1 j! npc_in [8] $end
$var wire 1 k! npc_in [7] $end
$var wire 1 l! npc_in [6] $end
$var wire 1 m! npc_in [5] $end
$var wire 1 n! npc_in [4] $end
$var wire 1 o! npc_in [3] $end
$var wire 1 p! npc_in [2] $end
$var wire 1 q! npc_in [1] $end
$var wire 1 r! npc_in [0] $end
$var wire 1 P# b_in [15] $end
$var wire 1 Q# b_in [14] $end
$var wire 1 R# b_in [13] $end
$var wire 1 S# b_in [12] $end
$var wire 1 T# b_in [11] $end
$var wire 1 U# b_in [10] $end
$var wire 1 V# b_in [9] $end
$var wire 1 W# b_in [8] $end
$var wire 1 X# b_in [7] $end
$var wire 1 Y# b_in [6] $end
$var wire 1 Z# b_in [5] $end
$var wire 1 [# b_in [4] $end
$var wire 1 \# b_in [3] $end
$var wire 1 ]# b_in [2] $end
$var wire 1 ^# b_in [1] $end
$var wire 1 _# b_in [0] $end
$var wire 1 p# alu_in [15] $end
$var wire 1 q# alu_in [14] $end
$var wire 1 r# alu_in [13] $end
$var wire 1 s# alu_in [12] $end
$var wire 1 t# alu_in [11] $end
$var wire 1 u# alu_in [10] $end
$var wire 1 v# alu_in [9] $end
$var wire 1 w# alu_in [8] $end
$var wire 1 x# alu_in [7] $end
$var wire 1 y# alu_in [6] $end
$var wire 1 z# alu_in [5] $end
$var wire 1 {# alu_in [4] $end
$var wire 1 |# alu_in [3] $end
$var wire 1 }# alu_in [2] $end
$var wire 1 ~# alu_in [1] $end
$var wire 1 !$ alu_in [0] $end
$var wire 1 n% MemRead_out $end
$var wire 1 q% MemWrite_out $end
$var wire 1 t% MemtoReg_out $end
$var wire 1 x% RegWrite_out $end
$var wire 1 *& PCS_out $end
$var wire 1 R" wreg_out [3] $end
$var wire 1 S" wreg_out [2] $end
$var wire 1 T" wreg_out [1] $end
$var wire 1 U" wreg_out [0] $end
$var wire 1 Z" opcode_out [3] $end
$var wire 1 [" opcode_out [2] $end
$var wire 1 \" opcode_out [1] $end
$var wire 1 ]" opcode_out [0] $end
$var wire 1 s! npc_out [15] $end
$var wire 1 t! npc_out [14] $end
$var wire 1 u! npc_out [13] $end
$var wire 1 v! npc_out [12] $end
$var wire 1 w! npc_out [11] $end
$var wire 1 x! npc_out [10] $end
$var wire 1 y! npc_out [9] $end
$var wire 1 z! npc_out [8] $end
$var wire 1 {! npc_out [7] $end
$var wire 1 |! npc_out [6] $end
$var wire 1 }! npc_out [5] $end
$var wire 1 ~! npc_out [4] $end
$var wire 1 !" npc_out [3] $end
$var wire 1 "" npc_out [2] $end
$var wire 1 #" npc_out [1] $end
$var wire 1 $" npc_out [0] $end
$var wire 1 `# b_out [15] $end
$var wire 1 a# b_out [14] $end
$var wire 1 b# b_out [13] $end
$var wire 1 c# b_out [12] $end
$var wire 1 d# b_out [11] $end
$var wire 1 e# b_out [10] $end
$var wire 1 f# b_out [9] $end
$var wire 1 g# b_out [8] $end
$var wire 1 h# b_out [7] $end
$var wire 1 i# b_out [6] $end
$var wire 1 j# b_out [5] $end
$var wire 1 k# b_out [4] $end
$var wire 1 l# b_out [3] $end
$var wire 1 m# b_out [2] $end
$var wire 1 n# b_out [1] $end
$var wire 1 o# b_out [0] $end
$var wire 1 "$ alu_out [15] $end
$var wire 1 #$ alu_out [14] $end
$var wire 1 $$ alu_out [13] $end
$var wire 1 %$ alu_out [12] $end
$var wire 1 &$ alu_out [11] $end
$var wire 1 '$ alu_out [10] $end
$var wire 1 ($ alu_out [9] $end
$var wire 1 )$ alu_out [8] $end
$var wire 1 *$ alu_out [7] $end
$var wire 1 +$ alu_out [6] $end
$var wire 1 ,$ alu_out [5] $end
$var wire 1 -$ alu_out [4] $end
$var wire 1 .$ alu_out [3] $end
$var wire 1 /$ alu_out [2] $end
$var wire 1 0$ alu_out [1] $end
$var wire 1 1$ alu_out [0] $end

$scope module memread $end
$var wire 1 n% q $end
$var wire 1 n% d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 e4 state $end
$upscope $end

$scope module memwrite $end
$var wire 1 q% q $end
$var wire 1 q% d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 f4 state $end
$upscope $end

$scope module memtoreg $end
$var wire 1 t% q $end
$var wire 1 s% d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 g4 state $end
$upscope $end

$scope module regwrite $end
$var wire 1 x% q $end
$var wire 1 w% d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 h4 state $end
$upscope $end

$scope module pcs $end
$var wire 1 *& q $end
$var wire 1 )& d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 i4 state $end
$upscope $end

$scope module b_ff0 $end
$var wire 1 U" q $end
$var wire 1 Q" d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 j4 state $end
$upscope $end

$scope module b_ff1 $end
$var wire 1 T" q $end
$var wire 1 P" d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 k4 state $end
$upscope $end

$scope module b_ff2 $end
$var wire 1 S" q $end
$var wire 1 O" d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 l4 state $end
$upscope $end

$scope module b_ff3 $end
$var wire 1 R" q $end
$var wire 1 N" d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 m4 state $end
$upscope $end

$scope module opc_ff0 $end
$var wire 1 ]" q $end
$var wire 1 q" d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 n4 state $end
$upscope $end

$scope module opc_ff1 $end
$var wire 1 \" q $end
$var wire 1 p" d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 o4 state $end
$upscope $end

$scope module opc_ff2 $end
$var wire 1 [" q $end
$var wire 1 o" d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 p4 state $end
$upscope $end

$scope module opc_ff3 $end
$var wire 1 Z" q $end
$var wire 1 n" d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 q4 state $end
$upscope $end

$scope module npc_reg $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 d4 WriteReg $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 c! D [15] $end
$var wire 1 d! D [14] $end
$var wire 1 e! D [13] $end
$var wire 1 f! D [12] $end
$var wire 1 g! D [11] $end
$var wire 1 h! D [10] $end
$var wire 1 i! D [9] $end
$var wire 1 j! D [8] $end
$var wire 1 k! D [7] $end
$var wire 1 l! D [6] $end
$var wire 1 m! D [5] $end
$var wire 1 n! D [4] $end
$var wire 1 o! D [3] $end
$var wire 1 p! D [2] $end
$var wire 1 q! D [1] $end
$var wire 1 r! D [0] $end
$var wire 1 s! Bitline1 [15] $end
$var wire 1 t! Bitline1 [14] $end
$var wire 1 u! Bitline1 [13] $end
$var wire 1 v! Bitline1 [12] $end
$var wire 1 w! Bitline1 [11] $end
$var wire 1 x! Bitline1 [10] $end
$var wire 1 y! Bitline1 [9] $end
$var wire 1 z! Bitline1 [8] $end
$var wire 1 {! Bitline1 [7] $end
$var wire 1 |! Bitline1 [6] $end
$var wire 1 }! Bitline1 [5] $end
$var wire 1 ~! Bitline1 [4] $end
$var wire 1 !" Bitline1 [3] $end
$var wire 1 "" Bitline1 [2] $end
$var wire 1 #" Bitline1 [1] $end
$var wire 1 $" Bitline1 [0] $end
$var wire 1 t4 Bitline2 [15] $end
$var wire 1 u4 Bitline2 [14] $end
$var wire 1 v4 Bitline2 [13] $end
$var wire 1 w4 Bitline2 [12] $end
$var wire 1 x4 Bitline2 [11] $end
$var wire 1 y4 Bitline2 [10] $end
$var wire 1 z4 Bitline2 [9] $end
$var wire 1 {4 Bitline2 [8] $end
$var wire 1 |4 Bitline2 [7] $end
$var wire 1 }4 Bitline2 [6] $end
$var wire 1 ~4 Bitline2 [5] $end
$var wire 1 !5 Bitline2 [4] $end
$var wire 1 "5 Bitline2 [3] $end
$var wire 1 #5 Bitline2 [2] $end
$var wire 1 $5 Bitline2 [1] $end
$var wire 1 %5 Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 r! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 $" Bitline1 $end
$var wire 1 %5 Bitline2 $end
$var wire 1 &5 ff_out $end

$scope module flipflop $end
$var wire 1 &5 q $end
$var wire 1 r! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 '5 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 q! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 #" Bitline1 $end
$var wire 1 $5 Bitline2 $end
$var wire 1 (5 ff_out $end

$scope module flipflop $end
$var wire 1 (5 q $end
$var wire 1 q! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 )5 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 p! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 "" Bitline1 $end
$var wire 1 #5 Bitline2 $end
$var wire 1 *5 ff_out $end

$scope module flipflop $end
$var wire 1 *5 q $end
$var wire 1 p! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 +5 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 o! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 !" Bitline1 $end
$var wire 1 "5 Bitline2 $end
$var wire 1 ,5 ff_out $end

$scope module flipflop $end
$var wire 1 ,5 q $end
$var wire 1 o! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 -5 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 n! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 ~! Bitline1 $end
$var wire 1 !5 Bitline2 $end
$var wire 1 .5 ff_out $end

$scope module flipflop $end
$var wire 1 .5 q $end
$var wire 1 n! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 /5 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 m! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 }! Bitline1 $end
$var wire 1 ~4 Bitline2 $end
$var wire 1 05 ff_out $end

$scope module flipflop $end
$var wire 1 05 q $end
$var wire 1 m! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 15 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 l! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 |! Bitline1 $end
$var wire 1 }4 Bitline2 $end
$var wire 1 25 ff_out $end

$scope module flipflop $end
$var wire 1 25 q $end
$var wire 1 l! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 35 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 k! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 {! Bitline1 $end
$var wire 1 |4 Bitline2 $end
$var wire 1 45 ff_out $end

$scope module flipflop $end
$var wire 1 45 q $end
$var wire 1 k! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 55 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 j! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 z! Bitline1 $end
$var wire 1 {4 Bitline2 $end
$var wire 1 65 ff_out $end

$scope module flipflop $end
$var wire 1 65 q $end
$var wire 1 j! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 75 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 i! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 y! Bitline1 $end
$var wire 1 z4 Bitline2 $end
$var wire 1 85 ff_out $end

$scope module flipflop $end
$var wire 1 85 q $end
$var wire 1 i! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 95 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 h! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 x! Bitline1 $end
$var wire 1 y4 Bitline2 $end
$var wire 1 :5 ff_out $end

$scope module flipflop $end
$var wire 1 :5 q $end
$var wire 1 h! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 ;5 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 g! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 w! Bitline1 $end
$var wire 1 x4 Bitline2 $end
$var wire 1 <5 ff_out $end

$scope module flipflop $end
$var wire 1 <5 q $end
$var wire 1 g! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 =5 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 f! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 v! Bitline1 $end
$var wire 1 w4 Bitline2 $end
$var wire 1 >5 ff_out $end

$scope module flipflop $end
$var wire 1 >5 q $end
$var wire 1 f! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 ?5 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 e! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 u! Bitline1 $end
$var wire 1 v4 Bitline2 $end
$var wire 1 @5 ff_out $end

$scope module flipflop $end
$var wire 1 @5 q $end
$var wire 1 e! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 A5 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 d! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 t! Bitline1 $end
$var wire 1 u4 Bitline2 $end
$var wire 1 B5 ff_out $end

$scope module flipflop $end
$var wire 1 B5 q $end
$var wire 1 d! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 C5 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 c! D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 r4 ReadEnable1 $end
$var wire 1 s4 ReadEnable2 $end
$var wire 1 s! Bitline1 $end
$var wire 1 t4 Bitline2 $end
$var wire 1 D5 ff_out $end

$scope module flipflop $end
$var wire 1 D5 q $end
$var wire 1 c! d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 E5 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module alu_reg $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 d4 WriteReg $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 p# D [15] $end
$var wire 1 q# D [14] $end
$var wire 1 r# D [13] $end
$var wire 1 s# D [12] $end
$var wire 1 t# D [11] $end
$var wire 1 u# D [10] $end
$var wire 1 v# D [9] $end
$var wire 1 w# D [8] $end
$var wire 1 x# D [7] $end
$var wire 1 y# D [6] $end
$var wire 1 z# D [5] $end
$var wire 1 {# D [4] $end
$var wire 1 |# D [3] $end
$var wire 1 }# D [2] $end
$var wire 1 ~# D [1] $end
$var wire 1 !$ D [0] $end
$var wire 1 "$ Bitline1 [15] $end
$var wire 1 #$ Bitline1 [14] $end
$var wire 1 $$ Bitline1 [13] $end
$var wire 1 %$ Bitline1 [12] $end
$var wire 1 &$ Bitline1 [11] $end
$var wire 1 '$ Bitline1 [10] $end
$var wire 1 ($ Bitline1 [9] $end
$var wire 1 )$ Bitline1 [8] $end
$var wire 1 *$ Bitline1 [7] $end
$var wire 1 +$ Bitline1 [6] $end
$var wire 1 ,$ Bitline1 [5] $end
$var wire 1 -$ Bitline1 [4] $end
$var wire 1 .$ Bitline1 [3] $end
$var wire 1 /$ Bitline1 [2] $end
$var wire 1 0$ Bitline1 [1] $end
$var wire 1 1$ Bitline1 [0] $end
$var wire 1 H5 Bitline2 [15] $end
$var wire 1 I5 Bitline2 [14] $end
$var wire 1 J5 Bitline2 [13] $end
$var wire 1 K5 Bitline2 [12] $end
$var wire 1 L5 Bitline2 [11] $end
$var wire 1 M5 Bitline2 [10] $end
$var wire 1 N5 Bitline2 [9] $end
$var wire 1 O5 Bitline2 [8] $end
$var wire 1 P5 Bitline2 [7] $end
$var wire 1 Q5 Bitline2 [6] $end
$var wire 1 R5 Bitline2 [5] $end
$var wire 1 S5 Bitline2 [4] $end
$var wire 1 T5 Bitline2 [3] $end
$var wire 1 U5 Bitline2 [2] $end
$var wire 1 V5 Bitline2 [1] $end
$var wire 1 W5 Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 !$ D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 1$ Bitline1 $end
$var wire 1 W5 Bitline2 $end
$var wire 1 X5 ff_out $end

$scope module flipflop $end
$var wire 1 X5 q $end
$var wire 1 !$ d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 Y5 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 ~# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 0$ Bitline1 $end
$var wire 1 V5 Bitline2 $end
$var wire 1 Z5 ff_out $end

$scope module flipflop $end
$var wire 1 Z5 q $end
$var wire 1 ~# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 [5 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 }# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 /$ Bitline1 $end
$var wire 1 U5 Bitline2 $end
$var wire 1 \5 ff_out $end

$scope module flipflop $end
$var wire 1 \5 q $end
$var wire 1 }# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 ]5 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 |# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 .$ Bitline1 $end
$var wire 1 T5 Bitline2 $end
$var wire 1 ^5 ff_out $end

$scope module flipflop $end
$var wire 1 ^5 q $end
$var wire 1 |# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 _5 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 {# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 -$ Bitline1 $end
$var wire 1 S5 Bitline2 $end
$var wire 1 `5 ff_out $end

$scope module flipflop $end
$var wire 1 `5 q $end
$var wire 1 {# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 a5 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 z# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 ,$ Bitline1 $end
$var wire 1 R5 Bitline2 $end
$var wire 1 b5 ff_out $end

$scope module flipflop $end
$var wire 1 b5 q $end
$var wire 1 z# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 c5 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 y# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 +$ Bitline1 $end
$var wire 1 Q5 Bitline2 $end
$var wire 1 d5 ff_out $end

$scope module flipflop $end
$var wire 1 d5 q $end
$var wire 1 y# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 e5 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 x# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 *$ Bitline1 $end
$var wire 1 P5 Bitline2 $end
$var wire 1 f5 ff_out $end

$scope module flipflop $end
$var wire 1 f5 q $end
$var wire 1 x# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 g5 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 w# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 )$ Bitline1 $end
$var wire 1 O5 Bitline2 $end
$var wire 1 h5 ff_out $end

$scope module flipflop $end
$var wire 1 h5 q $end
$var wire 1 w# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 i5 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 v# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 ($ Bitline1 $end
$var wire 1 N5 Bitline2 $end
$var wire 1 j5 ff_out $end

$scope module flipflop $end
$var wire 1 j5 q $end
$var wire 1 v# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 k5 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 u# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 '$ Bitline1 $end
$var wire 1 M5 Bitline2 $end
$var wire 1 l5 ff_out $end

$scope module flipflop $end
$var wire 1 l5 q $end
$var wire 1 u# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 m5 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 t# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 &$ Bitline1 $end
$var wire 1 L5 Bitline2 $end
$var wire 1 n5 ff_out $end

$scope module flipflop $end
$var wire 1 n5 q $end
$var wire 1 t# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 o5 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 s# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 %$ Bitline1 $end
$var wire 1 K5 Bitline2 $end
$var wire 1 p5 ff_out $end

$scope module flipflop $end
$var wire 1 p5 q $end
$var wire 1 s# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 q5 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 r# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 $$ Bitline1 $end
$var wire 1 J5 Bitline2 $end
$var wire 1 r5 ff_out $end

$scope module flipflop $end
$var wire 1 r5 q $end
$var wire 1 r# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 s5 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 q# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 #$ Bitline1 $end
$var wire 1 I5 Bitline2 $end
$var wire 1 t5 ff_out $end

$scope module flipflop $end
$var wire 1 t5 q $end
$var wire 1 q# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 u5 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 p# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 F5 ReadEnable1 $end
$var wire 1 G5 ReadEnable2 $end
$var wire 1 "$ Bitline1 $end
$var wire 1 H5 Bitline2 $end
$var wire 1 v5 ff_out $end

$scope module flipflop $end
$var wire 1 v5 q $end
$var wire 1 p# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 w5 state $end
$upscope $end
$upscope $end
$upscope $end

$scope module b_reg $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 d4 WriteReg $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 P# D [15] $end
$var wire 1 Q# D [14] $end
$var wire 1 R# D [13] $end
$var wire 1 S# D [12] $end
$var wire 1 T# D [11] $end
$var wire 1 U# D [10] $end
$var wire 1 V# D [9] $end
$var wire 1 W# D [8] $end
$var wire 1 X# D [7] $end
$var wire 1 Y# D [6] $end
$var wire 1 Z# D [5] $end
$var wire 1 [# D [4] $end
$var wire 1 \# D [3] $end
$var wire 1 ]# D [2] $end
$var wire 1 ^# D [1] $end
$var wire 1 _# D [0] $end
$var wire 1 `# Bitline1 [15] $end
$var wire 1 a# Bitline1 [14] $end
$var wire 1 b# Bitline1 [13] $end
$var wire 1 c# Bitline1 [12] $end
$var wire 1 d# Bitline1 [11] $end
$var wire 1 e# Bitline1 [10] $end
$var wire 1 f# Bitline1 [9] $end
$var wire 1 g# Bitline1 [8] $end
$var wire 1 h# Bitline1 [7] $end
$var wire 1 i# Bitline1 [6] $end
$var wire 1 j# Bitline1 [5] $end
$var wire 1 k# Bitline1 [4] $end
$var wire 1 l# Bitline1 [3] $end
$var wire 1 m# Bitline1 [2] $end
$var wire 1 n# Bitline1 [1] $end
$var wire 1 o# Bitline1 [0] $end
$var wire 1 z5 Bitline2 [15] $end
$var wire 1 {5 Bitline2 [14] $end
$var wire 1 |5 Bitline2 [13] $end
$var wire 1 }5 Bitline2 [12] $end
$var wire 1 ~5 Bitline2 [11] $end
$var wire 1 !6 Bitline2 [10] $end
$var wire 1 "6 Bitline2 [9] $end
$var wire 1 #6 Bitline2 [8] $end
$var wire 1 $6 Bitline2 [7] $end
$var wire 1 %6 Bitline2 [6] $end
$var wire 1 &6 Bitline2 [5] $end
$var wire 1 '6 Bitline2 [4] $end
$var wire 1 (6 Bitline2 [3] $end
$var wire 1 )6 Bitline2 [2] $end
$var wire 1 *6 Bitline2 [1] $end
$var wire 1 +6 Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 _# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 o# Bitline1 $end
$var wire 1 +6 Bitline2 $end
$var wire 1 ,6 ff_out $end

$scope module flipflop $end
$var wire 1 ,6 q $end
$var wire 1 _# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 -6 state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 ^# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 n# Bitline1 $end
$var wire 1 *6 Bitline2 $end
$var wire 1 .6 ff_out $end

$scope module flipflop $end
$var wire 1 .6 q $end
$var wire 1 ^# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 /6 state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 ]# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 m# Bitline1 $end
$var wire 1 )6 Bitline2 $end
$var wire 1 06 ff_out $end

$scope module flipflop $end
$var wire 1 06 q $end
$var wire 1 ]# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 16 state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 \# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 l# Bitline1 $end
$var wire 1 (6 Bitline2 $end
$var wire 1 26 ff_out $end

$scope module flipflop $end
$var wire 1 26 q $end
$var wire 1 \# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 36 state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 [# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 k# Bitline1 $end
$var wire 1 '6 Bitline2 $end
$var wire 1 46 ff_out $end

$scope module flipflop $end
$var wire 1 46 q $end
$var wire 1 [# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 56 state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 Z# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 j# Bitline1 $end
$var wire 1 &6 Bitline2 $end
$var wire 1 66 ff_out $end

$scope module flipflop $end
$var wire 1 66 q $end
$var wire 1 Z# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 76 state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 Y# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 i# Bitline1 $end
$var wire 1 %6 Bitline2 $end
$var wire 1 86 ff_out $end

$scope module flipflop $end
$var wire 1 86 q $end
$var wire 1 Y# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 96 state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 X# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 h# Bitline1 $end
$var wire 1 $6 Bitline2 $end
$var wire 1 :6 ff_out $end

$scope module flipflop $end
$var wire 1 :6 q $end
$var wire 1 X# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 ;6 state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 W# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 g# Bitline1 $end
$var wire 1 #6 Bitline2 $end
$var wire 1 <6 ff_out $end

$scope module flipflop $end
$var wire 1 <6 q $end
$var wire 1 W# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 =6 state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 V# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 f# Bitline1 $end
$var wire 1 "6 Bitline2 $end
$var wire 1 >6 ff_out $end

$scope module flipflop $end
$var wire 1 >6 q $end
$var wire 1 V# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 ?6 state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 U# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 e# Bitline1 $end
$var wire 1 !6 Bitline2 $end
$var wire 1 @6 ff_out $end

$scope module flipflop $end
$var wire 1 @6 q $end
$var wire 1 U# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 A6 state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 T# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 d# Bitline1 $end
$var wire 1 ~5 Bitline2 $end
$var wire 1 B6 ff_out $end

$scope module flipflop $end
$var wire 1 B6 q $end
$var wire 1 T# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 C6 state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 S# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 c# Bitline1 $end
$var wire 1 }5 Bitline2 $end
$var wire 1 D6 ff_out $end

$scope module flipflop $end
$var wire 1 D6 q $end
$var wire 1 S# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 E6 state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 R# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 b# Bitline1 $end
$var wire 1 |5 Bitline2 $end
$var wire 1 F6 ff_out $end

$scope module flipflop $end
$var wire 1 F6 q $end
$var wire 1 R# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 G6 state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 Q# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 a# Bitline1 $end
$var wire 1 {5 Bitline2 $end
$var wire 1 H6 ff_out $end

$scope module flipflop $end
$var wire 1 H6 q $end
$var wire 1 Q# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 I6 state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var wire 1 P# D $end
$var wire 1 d4 WriteEnable $end
$var wire 1 x5 ReadEnable1 $end
$var wire 1 y5 ReadEnable2 $end
$var wire 1 `# Bitline1 $end
$var wire 1 z5 Bitline2 $end
$var wire 1 J6 ff_out $end

$scope module flipflop $end
$var wire 1 J6 q $end
$var wire 1 P# d $end
$var wire 1 d4 wen $end
$var wire 1 1! clk $end
$var wire 1 c4 rst $end
$var reg 1 K6 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module aluEx $end
$var wire 1 r$ ALU_In1 [15] $end
$var wire 1 s$ ALU_In1 [14] $end
$var wire 1 t$ ALU_In1 [13] $end
$var wire 1 u$ ALU_In1 [12] $end
$var wire 1 v$ ALU_In1 [11] $end
$var wire 1 w$ ALU_In1 [10] $end
$var wire 1 x$ ALU_In1 [9] $end
$var wire 1 y$ ALU_In1 [8] $end
$var wire 1 z$ ALU_In1 [7] $end
$var wire 1 {$ ALU_In1 [6] $end
$var wire 1 |$ ALU_In1 [5] $end
$var wire 1 }$ ALU_In1 [4] $end
$var wire 1 ~$ ALU_In1 [3] $end
$var wire 1 !% ALU_In1 [2] $end
$var wire 1 "% ALU_In1 [1] $end
$var wire 1 #% ALU_In1 [0] $end
$var wire 1 $% ALU_In2 [15] $end
$var wire 1 %% ALU_In2 [14] $end
$var wire 1 &% ALU_In2 [13] $end
$var wire 1 '% ALU_In2 [12] $end
$var wire 1 (% ALU_In2 [11] $end
$var wire 1 )% ALU_In2 [10] $end
$var wire 1 *% ALU_In2 [9] $end
$var wire 1 +% ALU_In2 [8] $end
$var wire 1 ,% ALU_In2 [7] $end
$var wire 1 -% ALU_In2 [6] $end
$var wire 1 .% ALU_In2 [5] $end
$var wire 1 /% ALU_In2 [4] $end
$var wire 1 0% ALU_In2 [3] $end
$var wire 1 1% ALU_In2 [2] $end
$var wire 1 2% ALU_In2 [1] $end
$var wire 1 3% ALU_In2 [0] $end
$var wire 1 Z" Opcode [3] $end
$var wire 1 [" Opcode [2] $end
$var wire 1 \" Opcode [1] $end
$var wire 1 ]" Opcode [0] $end
$var wire 1 p# ALU_Out [15] $end
$var wire 1 q# ALU_Out [14] $end
$var wire 1 r# ALU_Out [13] $end
$var wire 1 s# ALU_Out [12] $end
$var wire 1 t# ALU_Out [11] $end
$var wire 1 u# ALU_Out [10] $end
$var wire 1 v# ALU_Out [9] $end
$var wire 1 w# ALU_Out [8] $end
$var wire 1 x# ALU_Out [7] $end
$var wire 1 y# ALU_Out [6] $end
$var wire 1 z# ALU_Out [5] $end
$var wire 1 {# ALU_Out [4] $end
$var wire 1 |# ALU_Out [3] $end
$var wire 1 }# ALU_Out [2] $end
$var wire 1 ~# ALU_Out [1] $end
$var wire 1 !$ ALU_Out [0] $end
$var wire 1 5" Flags [2] $end
$var wire 1 6" Flags [1] $end
$var wire 1 7" Flags [0] $end
$var wire 1 ;" en [2] $end
$var wire 1 <" en [1] $end
$var wire 1 =" en [0] $end
$var wire 1 L6 Sum [15] $end
$var wire 1 M6 Sum [14] $end
$var wire 1 N6 Sum [13] $end
$var wire 1 O6 Sum [12] $end
$var wire 1 P6 Sum [11] $end
$var wire 1 Q6 Sum [10] $end
$var wire 1 R6 Sum [9] $end
$var wire 1 S6 Sum [8] $end
$var wire 1 T6 Sum [7] $end
$var wire 1 U6 Sum [6] $end
$var wire 1 V6 Sum [5] $end
$var wire 1 W6 Sum [4] $end
$var wire 1 X6 Sum [3] $end
$var wire 1 Y6 Sum [2] $end
$var wire 1 Z6 Sum [1] $end
$var wire 1 [6 Sum [0] $end
$var wire 1 \6 shift_out [15] $end
$var wire 1 ]6 shift_out [14] $end
$var wire 1 ^6 shift_out [13] $end
$var wire 1 _6 shift_out [12] $end
$var wire 1 `6 shift_out [11] $end
$var wire 1 a6 shift_out [10] $end
$var wire 1 b6 shift_out [9] $end
$var wire 1 c6 shift_out [8] $end
$var wire 1 d6 shift_out [7] $end
$var wire 1 e6 shift_out [6] $end
$var wire 1 f6 shift_out [5] $end
$var wire 1 g6 shift_out [4] $end
$var wire 1 h6 shift_out [3] $end
$var wire 1 i6 shift_out [2] $end
$var wire 1 j6 shift_out [1] $end
$var wire 1 k6 shift_out [0] $end
$var wire 1 l6 Diff [15] $end
$var wire 1 m6 Diff [14] $end
$var wire 1 n6 Diff [13] $end
$var wire 1 o6 Diff [12] $end
$var wire 1 p6 Diff [11] $end
$var wire 1 q6 Diff [10] $end
$var wire 1 r6 Diff [9] $end
$var wire 1 s6 Diff [8] $end
$var wire 1 t6 Diff [7] $end
$var wire 1 u6 Diff [6] $end
$var wire 1 v6 Diff [5] $end
$var wire 1 w6 Diff [4] $end
$var wire 1 x6 Diff [3] $end
$var wire 1 y6 Diff [2] $end
$var wire 1 z6 Diff [1] $end
$var wire 1 {6 Diff [0] $end
$var wire 1 |6 PADDSB [15] $end
$var wire 1 }6 PADDSB [14] $end
$var wire 1 ~6 PADDSB [13] $end
$var wire 1 !7 PADDSB [12] $end
$var wire 1 "7 PADDSB [11] $end
$var wire 1 #7 PADDSB [10] $end
$var wire 1 $7 PADDSB [9] $end
$var wire 1 %7 PADDSB [8] $end
$var wire 1 &7 PADDSB [7] $end
$var wire 1 '7 PADDSB [6] $end
$var wire 1 (7 PADDSB [5] $end
$var wire 1 )7 PADDSB [4] $end
$var wire 1 *7 PADDSB [3] $end
$var wire 1 +7 PADDSB [2] $end
$var wire 1 ,7 PADDSB [1] $end
$var wire 1 -7 PADDSB [0] $end
$var wire 1 .7 Exor [15] $end
$var wire 1 /7 Exor [14] $end
$var wire 1 07 Exor [13] $end
$var wire 1 17 Exor [12] $end
$var wire 1 27 Exor [11] $end
$var wire 1 37 Exor [10] $end
$var wire 1 47 Exor [9] $end
$var wire 1 57 Exor [8] $end
$var wire 1 67 Exor [7] $end
$var wire 1 77 Exor [6] $end
$var wire 1 87 Exor [5] $end
$var wire 1 97 Exor [4] $end
$var wire 1 :7 Exor [3] $end
$var wire 1 ;7 Exor [2] $end
$var wire 1 <7 Exor [1] $end
$var wire 1 =7 Exor [0] $end
$var wire 1 >7 Red [15] $end
$var wire 1 ?7 Red [14] $end
$var wire 1 @7 Red [13] $end
$var wire 1 A7 Red [12] $end
$var wire 1 B7 Red [11] $end
$var wire 1 C7 Red [10] $end
$var wire 1 D7 Red [9] $end
$var wire 1 E7 Red [8] $end
$var wire 1 F7 Red [7] $end
$var wire 1 G7 Red [6] $end
$var wire 1 H7 Red [5] $end
$var wire 1 I7 Red [4] $end
$var wire 1 J7 Red [3] $end
$var wire 1 K7 Red [2] $end
$var wire 1 L7 Red [1] $end
$var wire 1 M7 Red [0] $end
$var wire 1 N7 OvflAdd $end
$var wire 1 O7 OvflSub $end
$var reg 3 P7 enable [2:0] $end

$scope module add $end
$var wire 1 r$ a [15] $end
$var wire 1 s$ a [14] $end
$var wire 1 t$ a [13] $end
$var wire 1 u$ a [12] $end
$var wire 1 v$ a [11] $end
$var wire 1 w$ a [10] $end
$var wire 1 x$ a [9] $end
$var wire 1 y$ a [8] $end
$var wire 1 z$ a [7] $end
$var wire 1 {$ a [6] $end
$var wire 1 |$ a [5] $end
$var wire 1 }$ a [4] $end
$var wire 1 ~$ a [3] $end
$var wire 1 !% a [2] $end
$var wire 1 "% a [1] $end
$var wire 1 #% a [0] $end
$var wire 1 $% b [15] $end
$var wire 1 %% b [14] $end
$var wire 1 &% b [13] $end
$var wire 1 '% b [12] $end
$var wire 1 (% b [11] $end
$var wire 1 )% b [10] $end
$var wire 1 *% b [9] $end
$var wire 1 +% b [8] $end
$var wire 1 ,% b [7] $end
$var wire 1 -% b [6] $end
$var wire 1 .% b [5] $end
$var wire 1 /% b [4] $end
$var wire 1 0% b [3] $end
$var wire 1 1% b [2] $end
$var wire 1 2% b [1] $end
$var wire 1 3% b [0] $end
$var wire 1 Q7 sub $end
$var wire 1 L6 sum [15] $end
$var wire 1 M6 sum [14] $end
$var wire 1 N6 sum [13] $end
$var wire 1 O6 sum [12] $end
$var wire 1 P6 sum [11] $end
$var wire 1 Q6 sum [10] $end
$var wire 1 R6 sum [9] $end
$var wire 1 S6 sum [8] $end
$var wire 1 T6 sum [7] $end
$var wire 1 U6 sum [6] $end
$var wire 1 V6 sum [5] $end
$var wire 1 W6 sum [4] $end
$var wire 1 X6 sum [3] $end
$var wire 1 Y6 sum [2] $end
$var wire 1 Z6 sum [1] $end
$var wire 1 [6 sum [0] $end
$var wire 1 N7 ovfl $end
$var wire 1 R7 c [4] $end
$var wire 1 S7 c [3] $end
$var wire 1 T7 c [2] $end
$var wire 1 U7 c [1] $end
$var wire 1 V7 c [0] $end
$var wire 1 W7 b_in [15] $end
$var wire 1 X7 b_in [14] $end
$var wire 1 Y7 b_in [13] $end
$var wire 1 Z7 b_in [12] $end
$var wire 1 [7 b_in [11] $end
$var wire 1 \7 b_in [10] $end
$var wire 1 ]7 b_in [9] $end
$var wire 1 ^7 b_in [8] $end
$var wire 1 _7 b_in [7] $end
$var wire 1 `7 b_in [6] $end
$var wire 1 a7 b_in [5] $end
$var wire 1 b7 b_in [4] $end
$var wire 1 c7 b_in [3] $end
$var wire 1 d7 b_in [2] $end
$var wire 1 e7 b_in [1] $end
$var wire 1 f7 b_in [0] $end
$var wire 1 g7 g [3] $end
$var wire 1 h7 g [2] $end
$var wire 1 i7 g [1] $end
$var wire 1 j7 g [0] $end
$var wire 1 k7 p [3] $end
$var wire 1 l7 p [2] $end
$var wire 1 m7 p [1] $end
$var wire 1 n7 p [0] $end
$var wire 1 o7 sum_temp [15] $end
$var wire 1 p7 sum_temp [14] $end
$var wire 1 q7 sum_temp [13] $end
$var wire 1 r7 sum_temp [12] $end
$var wire 1 s7 sum_temp [11] $end
$var wire 1 t7 sum_temp [10] $end
$var wire 1 u7 sum_temp [9] $end
$var wire 1 v7 sum_temp [8] $end
$var wire 1 w7 sum_temp [7] $end
$var wire 1 x7 sum_temp [6] $end
$var wire 1 y7 sum_temp [5] $end
$var wire 1 z7 sum_temp [4] $end
$var wire 1 {7 sum_temp [3] $end
$var wire 1 |7 sum_temp [2] $end
$var wire 1 }7 sum_temp [1] $end
$var wire 1 ~7 sum_temp [0] $end

$scope module U_CLA4_0 $end
$var wire 1 ~$ a [3] $end
$var wire 1 !% a [2] $end
$var wire 1 "% a [1] $end
$var wire 1 #% a [0] $end
$var wire 1 c7 b [3] $end
$var wire 1 d7 b [2] $end
$var wire 1 e7 b [1] $end
$var wire 1 f7 b [0] $end
$var wire 1 V7 cin $end
$var wire 1 {7 sum [3] $end
$var wire 1 |7 sum [2] $end
$var wire 1 }7 sum [1] $end
$var wire 1 ~7 sum [0] $end
$var wire 1 !8 cout $end
$var wire 1 "8 ovfl $end
$var wire 1 j7 tg $end
$var wire 1 n7 tp $end
$var wire 1 #8 c [4] $end
$var wire 1 $8 c [3] $end
$var wire 1 %8 c [2] $end
$var wire 1 &8 c [1] $end
$var wire 1 '8 c [0] $end
$var wire 1 (8 g [3] $end
$var wire 1 )8 g [2] $end
$var wire 1 *8 g [1] $end
$var wire 1 +8 g [0] $end
$var wire 1 ,8 p [3] $end
$var wire 1 -8 p [2] $end
$var wire 1 .8 p [1] $end
$var wire 1 /8 p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 #% a $end
$var wire 1 f7 b $end
$var wire 1 '8 cin $end
$var wire 1 ~7 sum $end
$var wire 1 08 cout $end
$var wire 1 18 w1 $end
$var wire 1 28 w2 $end
$var wire 1 38 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 "% a $end
$var wire 1 e7 b $end
$var wire 1 &8 cin $end
$var wire 1 }7 sum $end
$var wire 1 48 cout $end
$var wire 1 58 w1 $end
$var wire 1 68 w2 $end
$var wire 1 78 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 !% a $end
$var wire 1 d7 b $end
$var wire 1 %8 cin $end
$var wire 1 |7 sum $end
$var wire 1 88 cout $end
$var wire 1 98 w1 $end
$var wire 1 :8 w2 $end
$var wire 1 ;8 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 ~$ a $end
$var wire 1 c7 b $end
$var wire 1 $8 cin $end
$var wire 1 {7 sum $end
$var wire 1 <8 cout $end
$var wire 1 =8 w1 $end
$var wire 1 >8 w2 $end
$var wire 1 ?8 w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_1 $end
$var wire 1 z$ a [3] $end
$var wire 1 {$ a [2] $end
$var wire 1 |$ a [1] $end
$var wire 1 }$ a [0] $end
$var wire 1 _7 b [3] $end
$var wire 1 `7 b [2] $end
$var wire 1 a7 b [1] $end
$var wire 1 b7 b [0] $end
$var wire 1 U7 cin $end
$var wire 1 w7 sum [3] $end
$var wire 1 x7 sum [2] $end
$var wire 1 y7 sum [1] $end
$var wire 1 z7 sum [0] $end
$var wire 1 @8 cout $end
$var wire 1 A8 ovfl $end
$var wire 1 i7 tg $end
$var wire 1 m7 tp $end
$var wire 1 B8 c [4] $end
$var wire 1 C8 c [3] $end
$var wire 1 D8 c [2] $end
$var wire 1 E8 c [1] $end
$var wire 1 F8 c [0] $end
$var wire 1 G8 g [3] $end
$var wire 1 H8 g [2] $end
$var wire 1 I8 g [1] $end
$var wire 1 J8 g [0] $end
$var wire 1 K8 p [3] $end
$var wire 1 L8 p [2] $end
$var wire 1 M8 p [1] $end
$var wire 1 N8 p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 }$ a $end
$var wire 1 b7 b $end
$var wire 1 F8 cin $end
$var wire 1 z7 sum $end
$var wire 1 O8 cout $end
$var wire 1 P8 w1 $end
$var wire 1 Q8 w2 $end
$var wire 1 R8 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 |$ a $end
$var wire 1 a7 b $end
$var wire 1 E8 cin $end
$var wire 1 y7 sum $end
$var wire 1 S8 cout $end
$var wire 1 T8 w1 $end
$var wire 1 U8 w2 $end
$var wire 1 V8 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 {$ a $end
$var wire 1 `7 b $end
$var wire 1 D8 cin $end
$var wire 1 x7 sum $end
$var wire 1 W8 cout $end
$var wire 1 X8 w1 $end
$var wire 1 Y8 w2 $end
$var wire 1 Z8 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 z$ a $end
$var wire 1 _7 b $end
$var wire 1 C8 cin $end
$var wire 1 w7 sum $end
$var wire 1 [8 cout $end
$var wire 1 \8 w1 $end
$var wire 1 ]8 w2 $end
$var wire 1 ^8 w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_2 $end
$var wire 1 v$ a [3] $end
$var wire 1 w$ a [2] $end
$var wire 1 x$ a [1] $end
$var wire 1 y$ a [0] $end
$var wire 1 [7 b [3] $end
$var wire 1 \7 b [2] $end
$var wire 1 ]7 b [1] $end
$var wire 1 ^7 b [0] $end
$var wire 1 T7 cin $end
$var wire 1 s7 sum [3] $end
$var wire 1 t7 sum [2] $end
$var wire 1 u7 sum [1] $end
$var wire 1 v7 sum [0] $end
$var wire 1 _8 cout $end
$var wire 1 `8 ovfl $end
$var wire 1 h7 tg $end
$var wire 1 l7 tp $end
$var wire 1 a8 c [4] $end
$var wire 1 b8 c [3] $end
$var wire 1 c8 c [2] $end
$var wire 1 d8 c [1] $end
$var wire 1 e8 c [0] $end
$var wire 1 f8 g [3] $end
$var wire 1 g8 g [2] $end
$var wire 1 h8 g [1] $end
$var wire 1 i8 g [0] $end
$var wire 1 j8 p [3] $end
$var wire 1 k8 p [2] $end
$var wire 1 l8 p [1] $end
$var wire 1 m8 p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 y$ a $end
$var wire 1 ^7 b $end
$var wire 1 e8 cin $end
$var wire 1 v7 sum $end
$var wire 1 n8 cout $end
$var wire 1 o8 w1 $end
$var wire 1 p8 w2 $end
$var wire 1 q8 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 x$ a $end
$var wire 1 ]7 b $end
$var wire 1 d8 cin $end
$var wire 1 u7 sum $end
$var wire 1 r8 cout $end
$var wire 1 s8 w1 $end
$var wire 1 t8 w2 $end
$var wire 1 u8 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 w$ a $end
$var wire 1 \7 b $end
$var wire 1 c8 cin $end
$var wire 1 t7 sum $end
$var wire 1 v8 cout $end
$var wire 1 w8 w1 $end
$var wire 1 x8 w2 $end
$var wire 1 y8 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 v$ a $end
$var wire 1 [7 b $end
$var wire 1 b8 cin $end
$var wire 1 s7 sum $end
$var wire 1 z8 cout $end
$var wire 1 {8 w1 $end
$var wire 1 |8 w2 $end
$var wire 1 }8 w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_3 $end
$var wire 1 r$ a [3] $end
$var wire 1 s$ a [2] $end
$var wire 1 t$ a [1] $end
$var wire 1 u$ a [0] $end
$var wire 1 W7 b [3] $end
$var wire 1 X7 b [2] $end
$var wire 1 Y7 b [1] $end
$var wire 1 Z7 b [0] $end
$var wire 1 S7 cin $end
$var wire 1 o7 sum [3] $end
$var wire 1 p7 sum [2] $end
$var wire 1 q7 sum [1] $end
$var wire 1 r7 sum [0] $end
$var wire 1 ~8 cout $end
$var wire 1 !9 ovfl $end
$var wire 1 g7 tg $end
$var wire 1 k7 tp $end
$var wire 1 "9 c [4] $end
$var wire 1 #9 c [3] $end
$var wire 1 $9 c [2] $end
$var wire 1 %9 c [1] $end
$var wire 1 &9 c [0] $end
$var wire 1 '9 g [3] $end
$var wire 1 (9 g [2] $end
$var wire 1 )9 g [1] $end
$var wire 1 *9 g [0] $end
$var wire 1 +9 p [3] $end
$var wire 1 ,9 p [2] $end
$var wire 1 -9 p [1] $end
$var wire 1 .9 p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 u$ a $end
$var wire 1 Z7 b $end
$var wire 1 &9 cin $end
$var wire 1 r7 sum $end
$var wire 1 /9 cout $end
$var wire 1 09 w1 $end
$var wire 1 19 w2 $end
$var wire 1 29 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 t$ a $end
$var wire 1 Y7 b $end
$var wire 1 %9 cin $end
$var wire 1 q7 sum $end
$var wire 1 39 cout $end
$var wire 1 49 w1 $end
$var wire 1 59 w2 $end
$var wire 1 69 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 s$ a $end
$var wire 1 X7 b $end
$var wire 1 $9 cin $end
$var wire 1 p7 sum $end
$var wire 1 79 cout $end
$var wire 1 89 w1 $end
$var wire 1 99 w2 $end
$var wire 1 :9 w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 r$ a $end
$var wire 1 W7 b $end
$var wire 1 #9 cin $end
$var wire 1 o7 sum $end
$var wire 1 ;9 cout $end
$var wire 1 <9 w1 $end
$var wire 1 =9 w2 $end
$var wire 1 >9 w3 $end
$upscope $end
$upscope $end
$upscope $end

$scope module sub $end
$var wire 1 r$ a [15] $end
$var wire 1 s$ a [14] $end
$var wire 1 t$ a [13] $end
$var wire 1 u$ a [12] $end
$var wire 1 v$ a [11] $end
$var wire 1 w$ a [10] $end
$var wire 1 x$ a [9] $end
$var wire 1 y$ a [8] $end
$var wire 1 z$ a [7] $end
$var wire 1 {$ a [6] $end
$var wire 1 |$ a [5] $end
$var wire 1 }$ a [4] $end
$var wire 1 ~$ a [3] $end
$var wire 1 !% a [2] $end
$var wire 1 "% a [1] $end
$var wire 1 #% a [0] $end
$var wire 1 $% b [15] $end
$var wire 1 %% b [14] $end
$var wire 1 &% b [13] $end
$var wire 1 '% b [12] $end
$var wire 1 (% b [11] $end
$var wire 1 )% b [10] $end
$var wire 1 *% b [9] $end
$var wire 1 +% b [8] $end
$var wire 1 ,% b [7] $end
$var wire 1 -% b [6] $end
$var wire 1 .% b [5] $end
$var wire 1 /% b [4] $end
$var wire 1 0% b [3] $end
$var wire 1 1% b [2] $end
$var wire 1 2% b [1] $end
$var wire 1 3% b [0] $end
$var wire 1 ?9 sub $end
$var wire 1 l6 sum [15] $end
$var wire 1 m6 sum [14] $end
$var wire 1 n6 sum [13] $end
$var wire 1 o6 sum [12] $end
$var wire 1 p6 sum [11] $end
$var wire 1 q6 sum [10] $end
$var wire 1 r6 sum [9] $end
$var wire 1 s6 sum [8] $end
$var wire 1 t6 sum [7] $end
$var wire 1 u6 sum [6] $end
$var wire 1 v6 sum [5] $end
$var wire 1 w6 sum [4] $end
$var wire 1 x6 sum [3] $end
$var wire 1 y6 sum [2] $end
$var wire 1 z6 sum [1] $end
$var wire 1 {6 sum [0] $end
$var wire 1 O7 ovfl $end
$var wire 1 @9 c [4] $end
$var wire 1 A9 c [3] $end
$var wire 1 B9 c [2] $end
$var wire 1 C9 c [1] $end
$var wire 1 D9 c [0] $end
$var wire 1 E9 b_in [15] $end
$var wire 1 F9 b_in [14] $end
$var wire 1 G9 b_in [13] $end
$var wire 1 H9 b_in [12] $end
$var wire 1 I9 b_in [11] $end
$var wire 1 J9 b_in [10] $end
$var wire 1 K9 b_in [9] $end
$var wire 1 L9 b_in [8] $end
$var wire 1 M9 b_in [7] $end
$var wire 1 N9 b_in [6] $end
$var wire 1 O9 b_in [5] $end
$var wire 1 P9 b_in [4] $end
$var wire 1 Q9 b_in [3] $end
$var wire 1 R9 b_in [2] $end
$var wire 1 S9 b_in [1] $end
$var wire 1 T9 b_in [0] $end
$var wire 1 U9 g [3] $end
$var wire 1 V9 g [2] $end
$var wire 1 W9 g [1] $end
$var wire 1 X9 g [0] $end
$var wire 1 Y9 p [3] $end
$var wire 1 Z9 p [2] $end
$var wire 1 [9 p [1] $end
$var wire 1 \9 p [0] $end
$var wire 1 ]9 sum_temp [15] $end
$var wire 1 ^9 sum_temp [14] $end
$var wire 1 _9 sum_temp [13] $end
$var wire 1 `9 sum_temp [12] $end
$var wire 1 a9 sum_temp [11] $end
$var wire 1 b9 sum_temp [10] $end
$var wire 1 c9 sum_temp [9] $end
$var wire 1 d9 sum_temp [8] $end
$var wire 1 e9 sum_temp [7] $end
$var wire 1 f9 sum_temp [6] $end
$var wire 1 g9 sum_temp [5] $end
$var wire 1 h9 sum_temp [4] $end
$var wire 1 i9 sum_temp [3] $end
$var wire 1 j9 sum_temp [2] $end
$var wire 1 k9 sum_temp [1] $end
$var wire 1 l9 sum_temp [0] $end

$scope module U_CLA4_0 $end
$var wire 1 ~$ a [3] $end
$var wire 1 !% a [2] $end
$var wire 1 "% a [1] $end
$var wire 1 #% a [0] $end
$var wire 1 Q9 b [3] $end
$var wire 1 R9 b [2] $end
$var wire 1 S9 b [1] $end
$var wire 1 T9 b [0] $end
$var wire 1 D9 cin $end
$var wire 1 i9 sum [3] $end
$var wire 1 j9 sum [2] $end
$var wire 1 k9 sum [1] $end
$var wire 1 l9 sum [0] $end
$var wire 1 m9 cout $end
$var wire 1 n9 ovfl $end
$var wire 1 X9 tg $end
$var wire 1 \9 tp $end
$var wire 1 o9 c [4] $end
$var wire 1 p9 c [3] $end
$var wire 1 q9 c [2] $end
$var wire 1 r9 c [1] $end
$var wire 1 s9 c [0] $end
$var wire 1 t9 g [3] $end
$var wire 1 u9 g [2] $end
$var wire 1 v9 g [1] $end
$var wire 1 w9 g [0] $end
$var wire 1 x9 p [3] $end
$var wire 1 y9 p [2] $end
$var wire 1 z9 p [1] $end
$var wire 1 {9 p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 #% a $end
$var wire 1 T9 b $end
$var wire 1 s9 cin $end
$var wire 1 l9 sum $end
$var wire 1 |9 cout $end
$var wire 1 }9 w1 $end
$var wire 1 ~9 w2 $end
$var wire 1 !: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 "% a $end
$var wire 1 S9 b $end
$var wire 1 r9 cin $end
$var wire 1 k9 sum $end
$var wire 1 ": cout $end
$var wire 1 #: w1 $end
$var wire 1 $: w2 $end
$var wire 1 %: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 !% a $end
$var wire 1 R9 b $end
$var wire 1 q9 cin $end
$var wire 1 j9 sum $end
$var wire 1 &: cout $end
$var wire 1 ': w1 $end
$var wire 1 (: w2 $end
$var wire 1 ): w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 ~$ a $end
$var wire 1 Q9 b $end
$var wire 1 p9 cin $end
$var wire 1 i9 sum $end
$var wire 1 *: cout $end
$var wire 1 +: w1 $end
$var wire 1 ,: w2 $end
$var wire 1 -: w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_1 $end
$var wire 1 z$ a [3] $end
$var wire 1 {$ a [2] $end
$var wire 1 |$ a [1] $end
$var wire 1 }$ a [0] $end
$var wire 1 M9 b [3] $end
$var wire 1 N9 b [2] $end
$var wire 1 O9 b [1] $end
$var wire 1 P9 b [0] $end
$var wire 1 C9 cin $end
$var wire 1 e9 sum [3] $end
$var wire 1 f9 sum [2] $end
$var wire 1 g9 sum [1] $end
$var wire 1 h9 sum [0] $end
$var wire 1 .: cout $end
$var wire 1 /: ovfl $end
$var wire 1 W9 tg $end
$var wire 1 [9 tp $end
$var wire 1 0: c [4] $end
$var wire 1 1: c [3] $end
$var wire 1 2: c [2] $end
$var wire 1 3: c [1] $end
$var wire 1 4: c [0] $end
$var wire 1 5: g [3] $end
$var wire 1 6: g [2] $end
$var wire 1 7: g [1] $end
$var wire 1 8: g [0] $end
$var wire 1 9: p [3] $end
$var wire 1 :: p [2] $end
$var wire 1 ;: p [1] $end
$var wire 1 <: p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 }$ a $end
$var wire 1 P9 b $end
$var wire 1 4: cin $end
$var wire 1 h9 sum $end
$var wire 1 =: cout $end
$var wire 1 >: w1 $end
$var wire 1 ?: w2 $end
$var wire 1 @: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 |$ a $end
$var wire 1 O9 b $end
$var wire 1 3: cin $end
$var wire 1 g9 sum $end
$var wire 1 A: cout $end
$var wire 1 B: w1 $end
$var wire 1 C: w2 $end
$var wire 1 D: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 {$ a $end
$var wire 1 N9 b $end
$var wire 1 2: cin $end
$var wire 1 f9 sum $end
$var wire 1 E: cout $end
$var wire 1 F: w1 $end
$var wire 1 G: w2 $end
$var wire 1 H: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 z$ a $end
$var wire 1 M9 b $end
$var wire 1 1: cin $end
$var wire 1 e9 sum $end
$var wire 1 I: cout $end
$var wire 1 J: w1 $end
$var wire 1 K: w2 $end
$var wire 1 L: w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_2 $end
$var wire 1 v$ a [3] $end
$var wire 1 w$ a [2] $end
$var wire 1 x$ a [1] $end
$var wire 1 y$ a [0] $end
$var wire 1 I9 b [3] $end
$var wire 1 J9 b [2] $end
$var wire 1 K9 b [1] $end
$var wire 1 L9 b [0] $end
$var wire 1 B9 cin $end
$var wire 1 a9 sum [3] $end
$var wire 1 b9 sum [2] $end
$var wire 1 c9 sum [1] $end
$var wire 1 d9 sum [0] $end
$var wire 1 M: cout $end
$var wire 1 N: ovfl $end
$var wire 1 V9 tg $end
$var wire 1 Z9 tp $end
$var wire 1 O: c [4] $end
$var wire 1 P: c [3] $end
$var wire 1 Q: c [2] $end
$var wire 1 R: c [1] $end
$var wire 1 S: c [0] $end
$var wire 1 T: g [3] $end
$var wire 1 U: g [2] $end
$var wire 1 V: g [1] $end
$var wire 1 W: g [0] $end
$var wire 1 X: p [3] $end
$var wire 1 Y: p [2] $end
$var wire 1 Z: p [1] $end
$var wire 1 [: p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 y$ a $end
$var wire 1 L9 b $end
$var wire 1 S: cin $end
$var wire 1 d9 sum $end
$var wire 1 \: cout $end
$var wire 1 ]: w1 $end
$var wire 1 ^: w2 $end
$var wire 1 _: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 x$ a $end
$var wire 1 K9 b $end
$var wire 1 R: cin $end
$var wire 1 c9 sum $end
$var wire 1 `: cout $end
$var wire 1 a: w1 $end
$var wire 1 b: w2 $end
$var wire 1 c: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 w$ a $end
$var wire 1 J9 b $end
$var wire 1 Q: cin $end
$var wire 1 b9 sum $end
$var wire 1 d: cout $end
$var wire 1 e: w1 $end
$var wire 1 f: w2 $end
$var wire 1 g: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 v$ a $end
$var wire 1 I9 b $end
$var wire 1 P: cin $end
$var wire 1 a9 sum $end
$var wire 1 h: cout $end
$var wire 1 i: w1 $end
$var wire 1 j: w2 $end
$var wire 1 k: w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_3 $end
$var wire 1 r$ a [3] $end
$var wire 1 s$ a [2] $end
$var wire 1 t$ a [1] $end
$var wire 1 u$ a [0] $end
$var wire 1 E9 b [3] $end
$var wire 1 F9 b [2] $end
$var wire 1 G9 b [1] $end
$var wire 1 H9 b [0] $end
$var wire 1 A9 cin $end
$var wire 1 ]9 sum [3] $end
$var wire 1 ^9 sum [2] $end
$var wire 1 _9 sum [1] $end
$var wire 1 `9 sum [0] $end
$var wire 1 l: cout $end
$var wire 1 m: ovfl $end
$var wire 1 U9 tg $end
$var wire 1 Y9 tp $end
$var wire 1 n: c [4] $end
$var wire 1 o: c [3] $end
$var wire 1 p: c [2] $end
$var wire 1 q: c [1] $end
$var wire 1 r: c [0] $end
$var wire 1 s: g [3] $end
$var wire 1 t: g [2] $end
$var wire 1 u: g [1] $end
$var wire 1 v: g [0] $end
$var wire 1 w: p [3] $end
$var wire 1 x: p [2] $end
$var wire 1 y: p [1] $end
$var wire 1 z: p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 u$ a $end
$var wire 1 H9 b $end
$var wire 1 r: cin $end
$var wire 1 `9 sum $end
$var wire 1 {: cout $end
$var wire 1 |: w1 $end
$var wire 1 }: w2 $end
$var wire 1 ~: w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 t$ a $end
$var wire 1 G9 b $end
$var wire 1 q: cin $end
$var wire 1 _9 sum $end
$var wire 1 !; cout $end
$var wire 1 "; w1 $end
$var wire 1 #; w2 $end
$var wire 1 $; w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 s$ a $end
$var wire 1 F9 b $end
$var wire 1 p: cin $end
$var wire 1 ^9 sum $end
$var wire 1 %; cout $end
$var wire 1 &; w1 $end
$var wire 1 '; w2 $end
$var wire 1 (; w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 r$ a $end
$var wire 1 E9 b $end
$var wire 1 o: cin $end
$var wire 1 ]9 sum $end
$var wire 1 ); cout $end
$var wire 1 *; w1 $end
$var wire 1 +; w2 $end
$var wire 1 ,; w3 $end
$upscope $end
$upscope $end
$upscope $end

$scope module redUnit $end
$var wire 1 r$ a [15] $end
$var wire 1 s$ a [14] $end
$var wire 1 t$ a [13] $end
$var wire 1 u$ a [12] $end
$var wire 1 v$ a [11] $end
$var wire 1 w$ a [10] $end
$var wire 1 x$ a [9] $end
$var wire 1 y$ a [8] $end
$var wire 1 z$ a [7] $end
$var wire 1 {$ a [6] $end
$var wire 1 |$ a [5] $end
$var wire 1 }$ a [4] $end
$var wire 1 ~$ a [3] $end
$var wire 1 !% a [2] $end
$var wire 1 "% a [1] $end
$var wire 1 #% a [0] $end
$var wire 1 $% b [15] $end
$var wire 1 %% b [14] $end
$var wire 1 &% b [13] $end
$var wire 1 '% b [12] $end
$var wire 1 (% b [11] $end
$var wire 1 )% b [10] $end
$var wire 1 *% b [9] $end
$var wire 1 +% b [8] $end
$var wire 1 ,% b [7] $end
$var wire 1 -% b [6] $end
$var wire 1 .% b [5] $end
$var wire 1 /% b [4] $end
$var wire 1 0% b [3] $end
$var wire 1 1% b [2] $end
$var wire 1 2% b [1] $end
$var wire 1 3% b [0] $end
$var wire 1 >7 sum [15] $end
$var wire 1 ?7 sum [14] $end
$var wire 1 @7 sum [13] $end
$var wire 1 A7 sum [12] $end
$var wire 1 B7 sum [11] $end
$var wire 1 C7 sum [10] $end
$var wire 1 D7 sum [9] $end
$var wire 1 E7 sum [8] $end
$var wire 1 F7 sum [7] $end
$var wire 1 G7 sum [6] $end
$var wire 1 H7 sum [5] $end
$var wire 1 I7 sum [4] $end
$var wire 1 J7 sum [3] $end
$var wire 1 K7 sum [2] $end
$var wire 1 L7 sum [1] $end
$var wire 1 M7 sum [0] $end
$var wire 1 -; suma [8] $end
$var wire 1 .; suma [7] $end
$var wire 1 /; suma [6] $end
$var wire 1 0; suma [5] $end
$var wire 1 1; suma [4] $end
$var wire 1 2; suma [3] $end
$var wire 1 3; suma [2] $end
$var wire 1 4; suma [1] $end
$var wire 1 5; suma [0] $end
$var wire 1 6; ca $end
$var wire 1 7; ca1 $end
$var wire 1 8; sumb [8] $end
$var wire 1 9; sumb [7] $end
$var wire 1 :; sumb [6] $end
$var wire 1 ;; sumb [5] $end
$var wire 1 <; sumb [4] $end
$var wire 1 =; sumb [3] $end
$var wire 1 >; sumb [2] $end
$var wire 1 ?; sumb [1] $end
$var wire 1 @; sumb [0] $end
$var wire 1 A; cb $end
$var wire 1 B; cb1 $end
$var wire 1 C; cab30 $end
$var wire 1 D; cab74 $end
$var wire 1 E; temp [3] $end
$var wire 1 F; temp [2] $end
$var wire 1 G; temp [1] $end
$var wire 1 H; temp [0] $end

$scope module U_CLA4_00 $end
$var wire 1 ~$ a [3] $end
$var wire 1 !% a [2] $end
$var wire 1 "% a [1] $end
$var wire 1 #% a [0] $end
$var wire 1 v$ b [3] $end
$var wire 1 w$ b [2] $end
$var wire 1 x$ b [1] $end
$var wire 1 y$ b [0] $end
$var wire 1 I; cin $end
$var wire 1 2; sum [3] $end
$var wire 1 3; sum [2] $end
$var wire 1 4; sum [1] $end
$var wire 1 5; sum [0] $end
$var wire 1 6; cout $end
$var wire 1 J; ovfl $end
$var wire 1 K; tg $end
$var wire 1 L; tp $end
$var wire 1 M; c [4] $end
$var wire 1 N; c [3] $end
$var wire 1 O; c [2] $end
$var wire 1 P; c [1] $end
$var wire 1 Q; c [0] $end
$var wire 1 R; g [3] $end
$var wire 1 S; g [2] $end
$var wire 1 T; g [1] $end
$var wire 1 U; g [0] $end
$var wire 1 V; p [3] $end
$var wire 1 W; p [2] $end
$var wire 1 X; p [1] $end
$var wire 1 Y; p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 #% a $end
$var wire 1 y$ b $end
$var wire 1 Q; cin $end
$var wire 1 5; sum $end
$var wire 1 Z; cout $end
$var wire 1 [; w1 $end
$var wire 1 \; w2 $end
$var wire 1 ]; w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 "% a $end
$var wire 1 x$ b $end
$var wire 1 P; cin $end
$var wire 1 4; sum $end
$var wire 1 ^; cout $end
$var wire 1 _; w1 $end
$var wire 1 `; w2 $end
$var wire 1 a; w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 !% a $end
$var wire 1 w$ b $end
$var wire 1 O; cin $end
$var wire 1 3; sum $end
$var wire 1 b; cout $end
$var wire 1 c; w1 $end
$var wire 1 d; w2 $end
$var wire 1 e; w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 ~$ a $end
$var wire 1 v$ b $end
$var wire 1 N; cin $end
$var wire 1 2; sum $end
$var wire 1 f; cout $end
$var wire 1 g; w1 $end
$var wire 1 h; w2 $end
$var wire 1 i; w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_01 $end
$var wire 1 z$ a [3] $end
$var wire 1 {$ a [2] $end
$var wire 1 |$ a [1] $end
$var wire 1 }$ a [0] $end
$var wire 1 r$ b [3] $end
$var wire 1 s$ b [2] $end
$var wire 1 t$ b [1] $end
$var wire 1 u$ b [0] $end
$var wire 1 6; cin $end
$var wire 1 .; sum [3] $end
$var wire 1 /; sum [2] $end
$var wire 1 0; sum [1] $end
$var wire 1 1; sum [0] $end
$var wire 1 7; cout $end
$var wire 1 j; ovfl $end
$var wire 1 k; tg $end
$var wire 1 l; tp $end
$var wire 1 m; c [4] $end
$var wire 1 n; c [3] $end
$var wire 1 o; c [2] $end
$var wire 1 p; c [1] $end
$var wire 1 q; c [0] $end
$var wire 1 r; g [3] $end
$var wire 1 s; g [2] $end
$var wire 1 t; g [1] $end
$var wire 1 u; g [0] $end
$var wire 1 v; p [3] $end
$var wire 1 w; p [2] $end
$var wire 1 x; p [1] $end
$var wire 1 y; p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 }$ a $end
$var wire 1 u$ b $end
$var wire 1 q; cin $end
$var wire 1 1; sum $end
$var wire 1 z; cout $end
$var wire 1 {; w1 $end
$var wire 1 |; w2 $end
$var wire 1 }; w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 |$ a $end
$var wire 1 t$ b $end
$var wire 1 p; cin $end
$var wire 1 0; sum $end
$var wire 1 ~; cout $end
$var wire 1 !< w1 $end
$var wire 1 "< w2 $end
$var wire 1 #< w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 {$ a $end
$var wire 1 s$ b $end
$var wire 1 o; cin $end
$var wire 1 /; sum $end
$var wire 1 $< cout $end
$var wire 1 %< w1 $end
$var wire 1 &< w2 $end
$var wire 1 '< w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 z$ a $end
$var wire 1 r$ b $end
$var wire 1 n; cin $end
$var wire 1 .; sum $end
$var wire 1 (< cout $end
$var wire 1 )< w1 $end
$var wire 1 *< w2 $end
$var wire 1 +< w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_02 $end
$var wire 1 0% a [3] $end
$var wire 1 1% a [2] $end
$var wire 1 2% a [1] $end
$var wire 1 3% a [0] $end
$var wire 1 (% b [3] $end
$var wire 1 )% b [2] $end
$var wire 1 *% b [1] $end
$var wire 1 +% b [0] $end
$var wire 1 ,< cin $end
$var wire 1 =; sum [3] $end
$var wire 1 >; sum [2] $end
$var wire 1 ?; sum [1] $end
$var wire 1 @; sum [0] $end
$var wire 1 A; cout $end
$var wire 1 -< ovfl $end
$var wire 1 .< tg $end
$var wire 1 /< tp $end
$var wire 1 0< c [4] $end
$var wire 1 1< c [3] $end
$var wire 1 2< c [2] $end
$var wire 1 3< c [1] $end
$var wire 1 4< c [0] $end
$var wire 1 5< g [3] $end
$var wire 1 6< g [2] $end
$var wire 1 7< g [1] $end
$var wire 1 8< g [0] $end
$var wire 1 9< p [3] $end
$var wire 1 :< p [2] $end
$var wire 1 ;< p [1] $end
$var wire 1 << p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 3% a $end
$var wire 1 +% b $end
$var wire 1 4< cin $end
$var wire 1 @; sum $end
$var wire 1 =< cout $end
$var wire 1 >< w1 $end
$var wire 1 ?< w2 $end
$var wire 1 @< w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 2% a $end
$var wire 1 *% b $end
$var wire 1 3< cin $end
$var wire 1 ?; sum $end
$var wire 1 A< cout $end
$var wire 1 B< w1 $end
$var wire 1 C< w2 $end
$var wire 1 D< w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 1% a $end
$var wire 1 )% b $end
$var wire 1 2< cin $end
$var wire 1 >; sum $end
$var wire 1 E< cout $end
$var wire 1 F< w1 $end
$var wire 1 G< w2 $end
$var wire 1 H< w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 0% a $end
$var wire 1 (% b $end
$var wire 1 1< cin $end
$var wire 1 =; sum $end
$var wire 1 I< cout $end
$var wire 1 J< w1 $end
$var wire 1 K< w2 $end
$var wire 1 L< w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_03 $end
$var wire 1 ,% a [3] $end
$var wire 1 -% a [2] $end
$var wire 1 .% a [1] $end
$var wire 1 /% a [0] $end
$var wire 1 $% b [3] $end
$var wire 1 %% b [2] $end
$var wire 1 &% b [1] $end
$var wire 1 '% b [0] $end
$var wire 1 A; cin $end
$var wire 1 9; sum [3] $end
$var wire 1 :; sum [2] $end
$var wire 1 ;; sum [1] $end
$var wire 1 <; sum [0] $end
$var wire 1 B; cout $end
$var wire 1 M< ovfl $end
$var wire 1 N< tg $end
$var wire 1 O< tp $end
$var wire 1 P< c [4] $end
$var wire 1 Q< c [3] $end
$var wire 1 R< c [2] $end
$var wire 1 S< c [1] $end
$var wire 1 T< c [0] $end
$var wire 1 U< g [3] $end
$var wire 1 V< g [2] $end
$var wire 1 W< g [1] $end
$var wire 1 X< g [0] $end
$var wire 1 Y< p [3] $end
$var wire 1 Z< p [2] $end
$var wire 1 [< p [1] $end
$var wire 1 \< p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 /% a $end
$var wire 1 '% b $end
$var wire 1 T< cin $end
$var wire 1 <; sum $end
$var wire 1 ]< cout $end
$var wire 1 ^< w1 $end
$var wire 1 _< w2 $end
$var wire 1 `< w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 .% a $end
$var wire 1 &% b $end
$var wire 1 S< cin $end
$var wire 1 ;; sum $end
$var wire 1 a< cout $end
$var wire 1 b< w1 $end
$var wire 1 c< w2 $end
$var wire 1 d< w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 -% a $end
$var wire 1 %% b $end
$var wire 1 R< cin $end
$var wire 1 :; sum $end
$var wire 1 e< cout $end
$var wire 1 f< w1 $end
$var wire 1 g< w2 $end
$var wire 1 h< w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 ,% a $end
$var wire 1 $% b $end
$var wire 1 Q< cin $end
$var wire 1 9; sum $end
$var wire 1 i< cout $end
$var wire 1 j< w1 $end
$var wire 1 k< w2 $end
$var wire 1 l< w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_10 $end
$var wire 1 2; a [3] $end
$var wire 1 3; a [2] $end
$var wire 1 4; a [1] $end
$var wire 1 5; a [0] $end
$var wire 1 =; b [3] $end
$var wire 1 >; b [2] $end
$var wire 1 ?; b [1] $end
$var wire 1 @; b [0] $end
$var wire 1 m< cin $end
$var wire 1 J7 sum [3] $end
$var wire 1 K7 sum [2] $end
$var wire 1 L7 sum [1] $end
$var wire 1 M7 sum [0] $end
$var wire 1 C; cout $end
$var wire 1 n< ovfl $end
$var wire 1 o< tg $end
$var wire 1 p< tp $end
$var wire 1 q< c [4] $end
$var wire 1 r< c [3] $end
$var wire 1 s< c [2] $end
$var wire 1 t< c [1] $end
$var wire 1 u< c [0] $end
$var wire 1 v< g [3] $end
$var wire 1 w< g [2] $end
$var wire 1 x< g [1] $end
$var wire 1 y< g [0] $end
$var wire 1 z< p [3] $end
$var wire 1 {< p [2] $end
$var wire 1 |< p [1] $end
$var wire 1 }< p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 5; a $end
$var wire 1 @; b $end
$var wire 1 u< cin $end
$var wire 1 M7 sum $end
$var wire 1 ~< cout $end
$var wire 1 != w1 $end
$var wire 1 "= w2 $end
$var wire 1 #= w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 4; a $end
$var wire 1 ?; b $end
$var wire 1 t< cin $end
$var wire 1 L7 sum $end
$var wire 1 $= cout $end
$var wire 1 %= w1 $end
$var wire 1 &= w2 $end
$var wire 1 '= w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 3; a $end
$var wire 1 >; b $end
$var wire 1 s< cin $end
$var wire 1 K7 sum $end
$var wire 1 (= cout $end
$var wire 1 )= w1 $end
$var wire 1 *= w2 $end
$var wire 1 += w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 2; a $end
$var wire 1 =; b $end
$var wire 1 r< cin $end
$var wire 1 J7 sum $end
$var wire 1 ,= cout $end
$var wire 1 -= w1 $end
$var wire 1 .= w2 $end
$var wire 1 /= w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_11 $end
$var wire 1 .; a [3] $end
$var wire 1 /; a [2] $end
$var wire 1 0; a [1] $end
$var wire 1 1; a [0] $end
$var wire 1 9; b [3] $end
$var wire 1 :; b [2] $end
$var wire 1 ;; b [1] $end
$var wire 1 <; b [0] $end
$var wire 1 C; cin $end
$var wire 1 F7 sum [3] $end
$var wire 1 G7 sum [2] $end
$var wire 1 H7 sum [1] $end
$var wire 1 I7 sum [0] $end
$var wire 1 D; cout $end
$var wire 1 0= ovfl $end
$var wire 1 1= tg $end
$var wire 1 2= tp $end
$var wire 1 3= c [4] $end
$var wire 1 4= c [3] $end
$var wire 1 5= c [2] $end
$var wire 1 6= c [1] $end
$var wire 1 7= c [0] $end
$var wire 1 8= g [3] $end
$var wire 1 9= g [2] $end
$var wire 1 := g [1] $end
$var wire 1 ;= g [0] $end
$var wire 1 <= p [3] $end
$var wire 1 == p [2] $end
$var wire 1 >= p [1] $end
$var wire 1 ?= p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 1; a $end
$var wire 1 <; b $end
$var wire 1 7= cin $end
$var wire 1 I7 sum $end
$var wire 1 @= cout $end
$var wire 1 A= w1 $end
$var wire 1 B= w2 $end
$var wire 1 C= w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 0; a $end
$var wire 1 ;; b $end
$var wire 1 6= cin $end
$var wire 1 H7 sum $end
$var wire 1 D= cout $end
$var wire 1 E= w1 $end
$var wire 1 F= w2 $end
$var wire 1 G= w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 /; a $end
$var wire 1 :; b $end
$var wire 1 5= cin $end
$var wire 1 G7 sum $end
$var wire 1 H= cout $end
$var wire 1 I= w1 $end
$var wire 1 J= w2 $end
$var wire 1 K= w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 .; a $end
$var wire 1 9; b $end
$var wire 1 4= cin $end
$var wire 1 F7 sum $end
$var wire 1 L= cout $end
$var wire 1 M= w1 $end
$var wire 1 N= w2 $end
$var wire 1 O= w3 $end
$upscope $end
$upscope $end

$scope module U_CLA4_12 $end
$var wire 1 P= a [3] $end
$var wire 1 Q= a [2] $end
$var wire 1 R= a [1] $end
$var wire 1 S= a [0] $end
$var wire 1 T= b [3] $end
$var wire 1 U= b [2] $end
$var wire 1 V= b [1] $end
$var wire 1 W= b [0] $end
$var wire 1 D; cin $end
$var wire 1 E; sum [3] $end
$var wire 1 F; sum [2] $end
$var wire 1 G; sum [1] $end
$var wire 1 H; sum [0] $end
$var wire 1 X= cout $end
$var wire 1 Y= ovfl $end
$var wire 1 Z= tg $end
$var wire 1 [= tp $end
$var wire 1 \= c [4] $end
$var wire 1 ]= c [3] $end
$var wire 1 ^= c [2] $end
$var wire 1 _= c [1] $end
$var wire 1 `= c [0] $end
$var wire 1 a= g [3] $end
$var wire 1 b= g [2] $end
$var wire 1 c= g [1] $end
$var wire 1 d= g [0] $end
$var wire 1 e= p [3] $end
$var wire 1 f= p [2] $end
$var wire 1 g= p [1] $end
$var wire 1 h= p [0] $end

$scope module U_fullAdder_1bit_0 $end
$var wire 1 S= a $end
$var wire 1 W= b $end
$var wire 1 `= cin $end
$var wire 1 H; sum $end
$var wire 1 i= cout $end
$var wire 1 j= w1 $end
$var wire 1 k= w2 $end
$var wire 1 l= w3 $end
$upscope $end

$scope module U_fullAdder_1bit_1 $end
$var wire 1 R= a $end
$var wire 1 V= b $end
$var wire 1 _= cin $end
$var wire 1 G; sum $end
$var wire 1 m= cout $end
$var wire 1 n= w1 $end
$var wire 1 o= w2 $end
$var wire 1 p= w3 $end
$upscope $end

$scope module U_fullAdder_1bit_2 $end
$var wire 1 Q= a $end
$var wire 1 U= b $end
$var wire 1 ^= cin $end
$var wire 1 F; sum $end
$var wire 1 q= cout $end
$var wire 1 r= w1 $end
$var wire 1 s= w2 $end
$var wire 1 t= w3 $end
$upscope $end

$scope module U_fullAdder_1bit_3 $end
$var wire 1 P= a $end
$var wire 1 T= b $end
$var wire 1 ]= cin $end
$var wire 1 E; sum $end
$var wire 1 u= cout $end
$var wire 1 v= w1 $end
$var wire 1 w= w2 $end
$var wire 1 x= w3 $end
$upscope $end
$upscope $end
$upscope $end

$scope module paddsb $end
$var wire 1 r$ A [15] $end
$var wire 1 s$ A [14] $end
$var wire 1 t$ A [13] $end
$var wire 1 u$ A [12] $end
$var wire 1 v$ A [11] $end
$var wire 1 w$ A [10] $end
$var wire 1 x$ A [9] $end
$var wire 1 y$ A [8] $end
$var wire 1 z$ A [7] $end
$var wire 1 {$ A [6] $end
$var wire 1 |$ A [5] $end
$var wire 1 }$ A [4] $end
$var wire 1 ~$ A [3] $end
$var wire 1 !% A [2] $end
$var wire 1 "% A [1] $end
$var wire 1 #% A [0] $end
$var wire 1 $% B [15] $end
$var wire 1 %% B [14] $end
$var wire 1 &% B [13] $end
$var wire 1 '% B [12] $end
$var wire 1 (% B [11] $end
$var wire 1 )% B [10] $end
$var wire 1 *% B [9] $end
$var wire 1 +% B [8] $end
$var wire 1 ,% B [7] $end
$var wire 1 -% B [6] $end
$var wire 1 .% B [5] $end
$var wire 1 /% B [4] $end
$var wire 1 0% B [3] $end
$var wire 1 1% B [2] $end
$var wire 1 2% B [1] $end
$var wire 1 3% B [0] $end
$var wire 1 |6 Sum [15] $end
$var wire 1 }6 Sum [14] $end
$var wire 1 ~6 Sum [13] $end
$var wire 1 !7 Sum [12] $end
$var wire 1 "7 Sum [11] $end
$var wire 1 #7 Sum [10] $end
$var wire 1 $7 Sum [9] $end
$var wire 1 %7 Sum [8] $end
$var wire 1 &7 Sum [7] $end
$var wire 1 '7 Sum [6] $end
$var wire 1 (7 Sum [5] $end
$var wire 1 )7 Sum [4] $end
$var wire 1 *7 Sum [3] $end
$var wire 1 +7 Sum [2] $end
$var wire 1 ,7 Sum [1] $end
$var wire 1 -7 Sum [0] $end

$scope module ADD1 $end
$var wire 1 ~$ A [3] $end
$var wire 1 !% A [2] $end
$var wire 1 "% A [1] $end
$var wire 1 #% A [0] $end
$var wire 1 0% B [3] $end
$var wire 1 1% B [2] $end
$var wire 1 2% B [1] $end
$var wire 1 3% B [0] $end
$var wire 1 *7 Sum [3] $end
$var wire 1 +7 Sum [2] $end
$var wire 1 ,7 Sum [1] $end
$var wire 1 -7 Sum [0] $end
$var wire 1 y= Ovfl $end
$var wire 1 z= povfl $end
$var wire 1 {= novfl $end
$var wire 1 |= Sumi [3] $end
$var wire 1 }= Sumi [2] $end
$var wire 1 ~= Sumi [1] $end
$var wire 1 !> Sumi [0] $end
$var wire 1 "> Binput [3] $end
$var wire 1 #> Binput [2] $end
$var wire 1 $> Binput [1] $end
$var wire 1 %> Binput [0] $end
$var wire 1 &> C [3] $end
$var wire 1 '> C [2] $end
$var wire 1 (> C [1] $end
$var wire 1 )> C [0] $end

$scope module FA0 $end
$var wire 1 #% a $end
$var wire 1 3% b $end
$var wire 1 )> cin $end
$var wire 1 !> sum $end
$var wire 1 (> cout $end
$var wire 1 *> w1 $end
$var wire 1 +> w2 $end
$var wire 1 ,> w3 $end
$upscope $end

$scope module FA1 $end
$var wire 1 "% a $end
$var wire 1 2% b $end
$var wire 1 (> cin $end
$var wire 1 ~= sum $end
$var wire 1 '> cout $end
$var wire 1 -> w1 $end
$var wire 1 .> w2 $end
$var wire 1 /> w3 $end
$upscope $end

$scope module FA2 $end
$var wire 1 !% a $end
$var wire 1 1% b $end
$var wire 1 '> cin $end
$var wire 1 }= sum $end
$var wire 1 &> cout $end
$var wire 1 0> w1 $end
$var wire 1 1> w2 $end
$var wire 1 2> w3 $end
$upscope $end

$scope module FA3 $end
$var wire 1 ~$ a $end
$var wire 1 0% b $end
$var wire 1 &> cin $end
$var wire 1 |= sum $end
$var wire 1 3> cout $end
$var wire 1 4> w1 $end
$var wire 1 5> w2 $end
$var wire 1 6> w3 $end
$upscope $end
$upscope $end

$scope module ADD2 $end
$var wire 1 z$ A [3] $end
$var wire 1 {$ A [2] $end
$var wire 1 |$ A [1] $end
$var wire 1 }$ A [0] $end
$var wire 1 ,% B [3] $end
$var wire 1 -% B [2] $end
$var wire 1 .% B [1] $end
$var wire 1 /% B [0] $end
$var wire 1 &7 Sum [3] $end
$var wire 1 '7 Sum [2] $end
$var wire 1 (7 Sum [1] $end
$var wire 1 )7 Sum [0] $end
$var wire 1 7> Ovfl $end
$var wire 1 8> povfl $end
$var wire 1 9> novfl $end
$var wire 1 :> Sumi [3] $end
$var wire 1 ;> Sumi [2] $end
$var wire 1 <> Sumi [1] $end
$var wire 1 => Sumi [0] $end
$var wire 1 >> Binput [3] $end
$var wire 1 ?> Binput [2] $end
$var wire 1 @> Binput [1] $end
$var wire 1 A> Binput [0] $end
$var wire 1 B> C [3] $end
$var wire 1 C> C [2] $end
$var wire 1 D> C [1] $end
$var wire 1 E> C [0] $end

$scope module FA0 $end
$var wire 1 }$ a $end
$var wire 1 /% b $end
$var wire 1 E> cin $end
$var wire 1 => sum $end
$var wire 1 D> cout $end
$var wire 1 F> w1 $end
$var wire 1 G> w2 $end
$var wire 1 H> w3 $end
$upscope $end

$scope module FA1 $end
$var wire 1 |$ a $end
$var wire 1 .% b $end
$var wire 1 D> cin $end
$var wire 1 <> sum $end
$var wire 1 C> cout $end
$var wire 1 I> w1 $end
$var wire 1 J> w2 $end
$var wire 1 K> w3 $end
$upscope $end

$scope module FA2 $end
$var wire 1 {$ a $end
$var wire 1 -% b $end
$var wire 1 C> cin $end
$var wire 1 ;> sum $end
$var wire 1 B> cout $end
$var wire 1 L> w1 $end
$var wire 1 M> w2 $end
$var wire 1 N> w3 $end
$upscope $end

$scope module FA3 $end
$var wire 1 z$ a $end
$var wire 1 ,% b $end
$var wire 1 B> cin $end
$var wire 1 :> sum $end
$var wire 1 O> cout $end
$var wire 1 P> w1 $end
$var wire 1 Q> w2 $end
$var wire 1 R> w3 $end
$upscope $end
$upscope $end

$scope module ADD3 $end
$var wire 1 v$ A [3] $end
$var wire 1 w$ A [2] $end
$var wire 1 x$ A [1] $end
$var wire 1 y$ A [0] $end
$var wire 1 (% B [3] $end
$var wire 1 )% B [2] $end
$var wire 1 *% B [1] $end
$var wire 1 +% B [0] $end
$var wire 1 "7 Sum [3] $end
$var wire 1 #7 Sum [2] $end
$var wire 1 $7 Sum [1] $end
$var wire 1 %7 Sum [0] $end
$var wire 1 S> Ovfl $end
$var wire 1 T> povfl $end
$var wire 1 U> novfl $end
$var wire 1 V> Sumi [3] $end
$var wire 1 W> Sumi [2] $end
$var wire 1 X> Sumi [1] $end
$var wire 1 Y> Sumi [0] $end
$var wire 1 Z> Binput [3] $end
$var wire 1 [> Binput [2] $end
$var wire 1 \> Binput [1] $end
$var wire 1 ]> Binput [0] $end
$var wire 1 ^> C [3] $end
$var wire 1 _> C [2] $end
$var wire 1 `> C [1] $end
$var wire 1 a> C [0] $end

$scope module FA0 $end
$var wire 1 y$ a $end
$var wire 1 +% b $end
$var wire 1 a> cin $end
$var wire 1 Y> sum $end
$var wire 1 `> cout $end
$var wire 1 b> w1 $end
$var wire 1 c> w2 $end
$var wire 1 d> w3 $end
$upscope $end

$scope module FA1 $end
$var wire 1 x$ a $end
$var wire 1 *% b $end
$var wire 1 `> cin $end
$var wire 1 X> sum $end
$var wire 1 _> cout $end
$var wire 1 e> w1 $end
$var wire 1 f> w2 $end
$var wire 1 g> w3 $end
$upscope $end

$scope module FA2 $end
$var wire 1 w$ a $end
$var wire 1 )% b $end
$var wire 1 _> cin $end
$var wire 1 W> sum $end
$var wire 1 ^> cout $end
$var wire 1 h> w1 $end
$var wire 1 i> w2 $end
$var wire 1 j> w3 $end
$upscope $end

$scope module FA3 $end
$var wire 1 v$ a $end
$var wire 1 (% b $end
$var wire 1 ^> cin $end
$var wire 1 V> sum $end
$var wire 1 k> cout $end
$var wire 1 l> w1 $end
$var wire 1 m> w2 $end
$var wire 1 n> w3 $end
$upscope $end
$upscope $end

$scope module ADD4 $end
$var wire 1 r$ A [3] $end
$var wire 1 s$ A [2] $end
$var wire 1 t$ A [1] $end
$var wire 1 u$ A [0] $end
$var wire 1 $% B [3] $end
$var wire 1 %% B [2] $end
$var wire 1 &% B [1] $end
$var wire 1 '% B [0] $end
$var wire 1 |6 Sum [3] $end
$var wire 1 }6 Sum [2] $end
$var wire 1 ~6 Sum [1] $end
$var wire 1 !7 Sum [0] $end
$var wire 1 o> Ovfl $end
$var wire 1 p> povfl $end
$var wire 1 q> novfl $end
$var wire 1 r> Sumi [3] $end
$var wire 1 s> Sumi [2] $end
$var wire 1 t> Sumi [1] $end
$var wire 1 u> Sumi [0] $end
$var wire 1 v> Binput [3] $end
$var wire 1 w> Binput [2] $end
$var wire 1 x> Binput [1] $end
$var wire 1 y> Binput [0] $end
$var wire 1 z> C [3] $end
$var wire 1 {> C [2] $end
$var wire 1 |> C [1] $end
$var wire 1 }> C [0] $end

$scope module FA0 $end
$var wire 1 u$ a $end
$var wire 1 '% b $end
$var wire 1 }> cin $end
$var wire 1 u> sum $end
$var wire 1 |> cout $end
$var wire 1 ~> w1 $end
$var wire 1 !? w2 $end
$var wire 1 "? w3 $end
$upscope $end

$scope module FA1 $end
$var wire 1 t$ a $end
$var wire 1 &% b $end
$var wire 1 |> cin $end
$var wire 1 t> sum $end
$var wire 1 {> cout $end
$var wire 1 #? w1 $end
$var wire 1 $? w2 $end
$var wire 1 %? w3 $end
$upscope $end

$scope module FA2 $end
$var wire 1 s$ a $end
$var wire 1 %% b $end
$var wire 1 {> cin $end
$var wire 1 s> sum $end
$var wire 1 z> cout $end
$var wire 1 &? w1 $end
$var wire 1 '? w2 $end
$var wire 1 (? w3 $end
$upscope $end

$scope module FA3 $end
$var wire 1 r$ a $end
$var wire 1 $% b $end
$var wire 1 z> cin $end
$var wire 1 r> sum $end
$var wire 1 )? cout $end
$var wire 1 *? w1 $end
$var wire 1 +? w2 $end
$var wire 1 ,? w3 $end
$upscope $end
$upscope $end
$upscope $end

$scope module shifter $end
$var wire 1 \" opcode [1] $end
$var wire 1 ]" opcode [0] $end
$var wire 1 r$ Shift_In [15] $end
$var wire 1 s$ Shift_In [14] $end
$var wire 1 t$ Shift_In [13] $end
$var wire 1 u$ Shift_In [12] $end
$var wire 1 v$ Shift_In [11] $end
$var wire 1 w$ Shift_In [10] $end
$var wire 1 x$ Shift_In [9] $end
$var wire 1 y$ Shift_In [8] $end
$var wire 1 z$ Shift_In [7] $end
$var wire 1 {$ Shift_In [6] $end
$var wire 1 |$ Shift_In [5] $end
$var wire 1 }$ Shift_In [4] $end
$var wire 1 ~$ Shift_In [3] $end
$var wire 1 !% Shift_In [2] $end
$var wire 1 "% Shift_In [1] $end
$var wire 1 #% Shift_In [0] $end
$var wire 1 $% Shift_Val [15] $end
$var wire 1 %% Shift_Val [14] $end
$var wire 1 &% Shift_Val [13] $end
$var wire 1 '% Shift_Val [12] $end
$var wire 1 (% Shift_Val [11] $end
$var wire 1 )% Shift_Val [10] $end
$var wire 1 *% Shift_Val [9] $end
$var wire 1 +% Shift_Val [8] $end
$var wire 1 ,% Shift_Val [7] $end
$var wire 1 -% Shift_Val [6] $end
$var wire 1 .% Shift_Val [5] $end
$var wire 1 /% Shift_Val [4] $end
$var wire 1 0% Shift_Val [3] $end
$var wire 1 1% Shift_Val [2] $end
$var wire 1 2% Shift_Val [1] $end
$var wire 1 3% Shift_Val [0] $end
$var wire 1 \6 Shift_Out [15] $end
$var wire 1 ]6 Shift_Out [14] $end
$var wire 1 ^6 Shift_Out [13] $end
$var wire 1 _6 Shift_Out [12] $end
$var wire 1 `6 Shift_Out [11] $end
$var wire 1 a6 Shift_Out [10] $end
$var wire 1 b6 Shift_Out [9] $end
$var wire 1 c6 Shift_Out [8] $end
$var wire 1 d6 Shift_Out [7] $end
$var wire 1 e6 Shift_Out [6] $end
$var wire 1 f6 Shift_Out [5] $end
$var wire 1 g6 Shift_Out [4] $end
$var wire 1 h6 Shift_Out [3] $end
$var wire 1 i6 Shift_Out [2] $end
$var wire 1 j6 Shift_Out [1] $end
$var wire 1 k6 Shift_Out [0] $end
$var reg 16 -? s1 [15:0] $end
$var reg 16 .? s2 [15:0] $end
$var reg 16 /? s3 [15:0] $end
$var reg 16 0? s4 [15:0] $end
$upscope $end
$upscope $end

$scope module mem_wb $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 2? en $end
$var wire 1 t% MemtoReg_in $end
$var wire 1 x% RegWrite_in $end
$var wire 1 *& PCS_in $end
$var wire 1 R" wreg_in [3] $end
$var wire 1 S" wreg_in [2] $end
$var wire 1 T" wreg_in [1] $end
$var wire 1 U" wreg_in [0] $end
$var wire 1 s! npc_in [15] $end
$var wire 1 t! npc_in [14] $end
$var wire 1 u! npc_in [13] $end
$var wire 1 v! npc_in [12] $end
$var wire 1 w! npc_in [11] $end
$var wire 1 x! npc_in [10] $end
$var wire 1 y! npc_in [9] $end
$var wire 1 z! npc_in [8] $end
$var wire 1 {! npc_in [7] $end
$var wire 1 |! npc_in [6] $end
$var wire 1 }! npc_in [5] $end
$var wire 1 ~! npc_in [4] $end
$var wire 1 !" npc_in [3] $end
$var wire 1 "" npc_in [2] $end
$var wire 1 #" npc_in [1] $end
$var wire 1 $" npc_in [0] $end
$var wire 1 B$ mem_in [15] $end
$var wire 1 C$ mem_in [14] $end
$var wire 1 D$ mem_in [13] $end
$var wire 1 E$ mem_in [12] $end
$var wire 1 F$ mem_in [11] $end
$var wire 1 G$ mem_in [10] $end
$var wire 1 H$ mem_in [9] $end
$var wire 1 I$ mem_in [8] $end
$var wire 1 J$ mem_in [7] $end
$var wire 1 K$ mem_in [6] $end
$var wire 1 L$ mem_in [5] $end
$var wire 1 M$ mem_in [4] $end
$var wire 1 N$ mem_in [3] $end
$var wire 1 O$ mem_in [2] $end
$var wire 1 P$ mem_in [1] $end
$var wire 1 Q$ mem_in [0] $end
$var wire 1 "$ alu_in [15] $end
$var wire 1 #$ alu_in [14] $end
$var wire 1 $$ alu_in [13] $end
$var wire 1 %$ alu_in [12] $end
$var wire 1 &$ alu_in [11] $end
$var wire 1 '$ alu_in [10] $end
$var wire 1 ($ alu_in [9] $end
$var wire 1 )$ alu_in [8] $end
$var wire 1 *$ alu_in [7] $end
$var wire 1 +$ alu_in [6] $end
$var wire 1 ,$ alu_in [5] $end
$var wire 1 -$ alu_in [4] $end
$var wire 1 .$ alu_in [3] $end
$var wire 1 /$ alu_in [2] $end
$var wire 1 0$ alu_in [1] $end
$var wire 1 1$ alu_in [0] $end
$var wire 1 u% MemtoReg_out $end
$var wire 1 y% RegWrite_out $end
$var wire 1 +& PCS_out $end
$var wire 1 V" wreg_out [3] $end
$var wire 1 W" wreg_out [2] $end
$var wire 1 X" wreg_out [1] $end
$var wire 1 Y" wreg_out [0] $end
$var wire 1 %" npc_out [15] $end
$var wire 1 &" npc_out [14] $end
$var wire 1 '" npc_out [13] $end
$var wire 1 (" npc_out [12] $end
$var wire 1 )" npc_out [11] $end
$var wire 1 *" npc_out [10] $end
$var wire 1 +" npc_out [9] $end
$var wire 1 ," npc_out [8] $end
$var wire 1 -" npc_out [7] $end
$var wire 1 ." npc_out [6] $end
$var wire 1 /" npc_out [5] $end
$var wire 1 0" npc_out [4] $end
$var wire 1 1" npc_out [3] $end
$var wire 1 2" npc_out [2] $end
$var wire 1 3" npc_out [1] $end
$var wire 1 4" npc_out [0] $end
$var wire 1 R$ mem_out [15] $end
$var wire 1 S$ mem_out [14] $end
$var wire 1 T$ mem_out [13] $end
$var wire 1 U$ mem_out [12] $end
$var wire 1 V$ mem_out [11] $end
$var wire 1 W$ mem_out [10] $end
$var wire 1 X$ mem_out [9] $end
$var wire 1 Y$ mem_out [8] $end
$var wire 1 Z$ mem_out [7] $end
$var wire 1 [$ mem_out [6] $end
$var wire 1 \$ mem_out [5] $end
$var wire 1 ]$ mem_out [4] $end
$var wire 1 ^$ mem_out [3] $end
$var wire 1 _$ mem_out [2] $end
$var wire 1 `$ mem_out [1] $end
$var wire 1 a$ mem_out [0] $end
$var wire 1 2$ alu_out [15] $end
$var wire 1 3$ alu_out [14] $end
$var wire 1 4$ alu_out [13] $end
$var wire 1 5$ alu_out [12] $end
$var wire 1 6$ alu_out [11] $end
$var wire 1 7$ alu_out [10] $end
$var wire 1 8$ alu_out [9] $end
$var wire 1 9$ alu_out [8] $end
$var wire 1 :$ alu_out [7] $end
$var wire 1 ;$ alu_out [6] $end
$var wire 1 <$ alu_out [5] $end
$var wire 1 =$ alu_out [4] $end
$var wire 1 >$ alu_out [3] $end
$var wire 1 ?$ alu_out [2] $end
$var wire 1 @$ alu_out [1] $end
$var wire 1 A$ alu_out [0] $end

$scope module memtoreg $end
$var wire 1 u% q $end
$var wire 1 t% d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 3? state $end
$upscope $end

$scope module regwrite $end
$var wire 1 y% q $end
$var wire 1 x% d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 4? state $end
$upscope $end

$scope module pcs $end
$var wire 1 +& q $end
$var wire 1 *& d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 5? state $end
$upscope $end

$scope module b_ff0 $end
$var wire 1 Y" q $end
$var wire 1 U" d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 6? state $end
$upscope $end

$scope module b_ff1 $end
$var wire 1 X" q $end
$var wire 1 T" d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 7? state $end
$upscope $end

$scope module b_ff2 $end
$var wire 1 W" q $end
$var wire 1 S" d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 8? state $end
$upscope $end

$scope module b_ff3 $end
$var wire 1 V" q $end
$var wire 1 R" d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 9? state $end
$upscope $end

$scope module npc_reg $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 2? WriteReg $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 s! D [15] $end
$var wire 1 t! D [14] $end
$var wire 1 u! D [13] $end
$var wire 1 v! D [12] $end
$var wire 1 w! D [11] $end
$var wire 1 x! D [10] $end
$var wire 1 y! D [9] $end
$var wire 1 z! D [8] $end
$var wire 1 {! D [7] $end
$var wire 1 |! D [6] $end
$var wire 1 }! D [5] $end
$var wire 1 ~! D [4] $end
$var wire 1 !" D [3] $end
$var wire 1 "" D [2] $end
$var wire 1 #" D [1] $end
$var wire 1 $" D [0] $end
$var wire 1 %" Bitline1 [15] $end
$var wire 1 &" Bitline1 [14] $end
$var wire 1 '" Bitline1 [13] $end
$var wire 1 (" Bitline1 [12] $end
$var wire 1 )" Bitline1 [11] $end
$var wire 1 *" Bitline1 [10] $end
$var wire 1 +" Bitline1 [9] $end
$var wire 1 ," Bitline1 [8] $end
$var wire 1 -" Bitline1 [7] $end
$var wire 1 ." Bitline1 [6] $end
$var wire 1 /" Bitline1 [5] $end
$var wire 1 0" Bitline1 [4] $end
$var wire 1 1" Bitline1 [3] $end
$var wire 1 2" Bitline1 [2] $end
$var wire 1 3" Bitline1 [1] $end
$var wire 1 4" Bitline1 [0] $end
$var wire 1 <? Bitline2 [15] $end
$var wire 1 =? Bitline2 [14] $end
$var wire 1 >? Bitline2 [13] $end
$var wire 1 ?? Bitline2 [12] $end
$var wire 1 @? Bitline2 [11] $end
$var wire 1 A? Bitline2 [10] $end
$var wire 1 B? Bitline2 [9] $end
$var wire 1 C? Bitline2 [8] $end
$var wire 1 D? Bitline2 [7] $end
$var wire 1 E? Bitline2 [6] $end
$var wire 1 F? Bitline2 [5] $end
$var wire 1 G? Bitline2 [4] $end
$var wire 1 H? Bitline2 [3] $end
$var wire 1 I? Bitline2 [2] $end
$var wire 1 J? Bitline2 [1] $end
$var wire 1 K? Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 $" D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 4" Bitline1 $end
$var wire 1 K? Bitline2 $end
$var wire 1 L? ff_out $end

$scope module flipflop $end
$var wire 1 L? q $end
$var wire 1 $" d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 M? state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 #" D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 3" Bitline1 $end
$var wire 1 J? Bitline2 $end
$var wire 1 N? ff_out $end

$scope module flipflop $end
$var wire 1 N? q $end
$var wire 1 #" d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 O? state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 "" D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 2" Bitline1 $end
$var wire 1 I? Bitline2 $end
$var wire 1 P? ff_out $end

$scope module flipflop $end
$var wire 1 P? q $end
$var wire 1 "" d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 Q? state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 !" D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 1" Bitline1 $end
$var wire 1 H? Bitline2 $end
$var wire 1 R? ff_out $end

$scope module flipflop $end
$var wire 1 R? q $end
$var wire 1 !" d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 S? state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 ~! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 0" Bitline1 $end
$var wire 1 G? Bitline2 $end
$var wire 1 T? ff_out $end

$scope module flipflop $end
$var wire 1 T? q $end
$var wire 1 ~! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 U? state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 }! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 /" Bitline1 $end
$var wire 1 F? Bitline2 $end
$var wire 1 V? ff_out $end

$scope module flipflop $end
$var wire 1 V? q $end
$var wire 1 }! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 W? state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 |! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 ." Bitline1 $end
$var wire 1 E? Bitline2 $end
$var wire 1 X? ff_out $end

$scope module flipflop $end
$var wire 1 X? q $end
$var wire 1 |! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 Y? state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 {! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 -" Bitline1 $end
$var wire 1 D? Bitline2 $end
$var wire 1 Z? ff_out $end

$scope module flipflop $end
$var wire 1 Z? q $end
$var wire 1 {! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 [? state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 z! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 ," Bitline1 $end
$var wire 1 C? Bitline2 $end
$var wire 1 \? ff_out $end

$scope module flipflop $end
$var wire 1 \? q $end
$var wire 1 z! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 ]? state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 y! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 +" Bitline1 $end
$var wire 1 B? Bitline2 $end
$var wire 1 ^? ff_out $end

$scope module flipflop $end
$var wire 1 ^? q $end
$var wire 1 y! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 _? state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 x! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 *" Bitline1 $end
$var wire 1 A? Bitline2 $end
$var wire 1 `? ff_out $end

$scope module flipflop $end
$var wire 1 `? q $end
$var wire 1 x! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 a? state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 w! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 )" Bitline1 $end
$var wire 1 @? Bitline2 $end
$var wire 1 b? ff_out $end

$scope module flipflop $end
$var wire 1 b? q $end
$var wire 1 w! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 c? state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 v! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 (" Bitline1 $end
$var wire 1 ?? Bitline2 $end
$var wire 1 d? ff_out $end

$scope module flipflop $end
$var wire 1 d? q $end
$var wire 1 v! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 e? state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 u! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 '" Bitline1 $end
$var wire 1 >? Bitline2 $end
$var wire 1 f? ff_out $end

$scope module flipflop $end
$var wire 1 f? q $end
$var wire 1 u! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 g? state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 t! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 &" Bitline1 $end
$var wire 1 =? Bitline2 $end
$var wire 1 h? ff_out $end

$scope module flipflop $end
$var wire 1 h? q $end
$var wire 1 t! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 i? state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 s! D $end
$var wire 1 2? WriteEnable $end
$var wire 1 :? ReadEnable1 $end
$var wire 1 ;? ReadEnable2 $end
$var wire 1 %" Bitline1 $end
$var wire 1 <? Bitline2 $end
$var wire 1 j? ff_out $end

$scope module flipflop $end
$var wire 1 j? q $end
$var wire 1 s! d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 k? state $end
$upscope $end
$upscope $end
$upscope $end

$scope module mem_reg $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 2? WriteReg $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 B$ D [15] $end
$var wire 1 C$ D [14] $end
$var wire 1 D$ D [13] $end
$var wire 1 E$ D [12] $end
$var wire 1 F$ D [11] $end
$var wire 1 G$ D [10] $end
$var wire 1 H$ D [9] $end
$var wire 1 I$ D [8] $end
$var wire 1 J$ D [7] $end
$var wire 1 K$ D [6] $end
$var wire 1 L$ D [5] $end
$var wire 1 M$ D [4] $end
$var wire 1 N$ D [3] $end
$var wire 1 O$ D [2] $end
$var wire 1 P$ D [1] $end
$var wire 1 Q$ D [0] $end
$var wire 1 R$ Bitline1 [15] $end
$var wire 1 S$ Bitline1 [14] $end
$var wire 1 T$ Bitline1 [13] $end
$var wire 1 U$ Bitline1 [12] $end
$var wire 1 V$ Bitline1 [11] $end
$var wire 1 W$ Bitline1 [10] $end
$var wire 1 X$ Bitline1 [9] $end
$var wire 1 Y$ Bitline1 [8] $end
$var wire 1 Z$ Bitline1 [7] $end
$var wire 1 [$ Bitline1 [6] $end
$var wire 1 \$ Bitline1 [5] $end
$var wire 1 ]$ Bitline1 [4] $end
$var wire 1 ^$ Bitline1 [3] $end
$var wire 1 _$ Bitline1 [2] $end
$var wire 1 `$ Bitline1 [1] $end
$var wire 1 a$ Bitline1 [0] $end
$var wire 1 n? Bitline2 [15] $end
$var wire 1 o? Bitline2 [14] $end
$var wire 1 p? Bitline2 [13] $end
$var wire 1 q? Bitline2 [12] $end
$var wire 1 r? Bitline2 [11] $end
$var wire 1 s? Bitline2 [10] $end
$var wire 1 t? Bitline2 [9] $end
$var wire 1 u? Bitline2 [8] $end
$var wire 1 v? Bitline2 [7] $end
$var wire 1 w? Bitline2 [6] $end
$var wire 1 x? Bitline2 [5] $end
$var wire 1 y? Bitline2 [4] $end
$var wire 1 z? Bitline2 [3] $end
$var wire 1 {? Bitline2 [2] $end
$var wire 1 |? Bitline2 [1] $end
$var wire 1 }? Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 Q$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 a$ Bitline1 $end
$var wire 1 }? Bitline2 $end
$var wire 1 ~? ff_out $end

$scope module flipflop $end
$var wire 1 ~? q $end
$var wire 1 Q$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 !@ state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 P$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 `$ Bitline1 $end
$var wire 1 |? Bitline2 $end
$var wire 1 "@ ff_out $end

$scope module flipflop $end
$var wire 1 "@ q $end
$var wire 1 P$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 #@ state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 O$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 _$ Bitline1 $end
$var wire 1 {? Bitline2 $end
$var wire 1 $@ ff_out $end

$scope module flipflop $end
$var wire 1 $@ q $end
$var wire 1 O$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 %@ state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 N$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 ^$ Bitline1 $end
$var wire 1 z? Bitline2 $end
$var wire 1 &@ ff_out $end

$scope module flipflop $end
$var wire 1 &@ q $end
$var wire 1 N$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 '@ state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 M$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 ]$ Bitline1 $end
$var wire 1 y? Bitline2 $end
$var wire 1 (@ ff_out $end

$scope module flipflop $end
$var wire 1 (@ q $end
$var wire 1 M$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 )@ state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 L$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 \$ Bitline1 $end
$var wire 1 x? Bitline2 $end
$var wire 1 *@ ff_out $end

$scope module flipflop $end
$var wire 1 *@ q $end
$var wire 1 L$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 +@ state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 K$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 [$ Bitline1 $end
$var wire 1 w? Bitline2 $end
$var wire 1 ,@ ff_out $end

$scope module flipflop $end
$var wire 1 ,@ q $end
$var wire 1 K$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 -@ state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 J$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 Z$ Bitline1 $end
$var wire 1 v? Bitline2 $end
$var wire 1 .@ ff_out $end

$scope module flipflop $end
$var wire 1 .@ q $end
$var wire 1 J$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 /@ state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 I$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 Y$ Bitline1 $end
$var wire 1 u? Bitline2 $end
$var wire 1 0@ ff_out $end

$scope module flipflop $end
$var wire 1 0@ q $end
$var wire 1 I$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 1@ state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 H$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 X$ Bitline1 $end
$var wire 1 t? Bitline2 $end
$var wire 1 2@ ff_out $end

$scope module flipflop $end
$var wire 1 2@ q $end
$var wire 1 H$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 3@ state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 G$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 W$ Bitline1 $end
$var wire 1 s? Bitline2 $end
$var wire 1 4@ ff_out $end

$scope module flipflop $end
$var wire 1 4@ q $end
$var wire 1 G$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 5@ state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 F$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 V$ Bitline1 $end
$var wire 1 r? Bitline2 $end
$var wire 1 6@ ff_out $end

$scope module flipflop $end
$var wire 1 6@ q $end
$var wire 1 F$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 7@ state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 E$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 U$ Bitline1 $end
$var wire 1 q? Bitline2 $end
$var wire 1 8@ ff_out $end

$scope module flipflop $end
$var wire 1 8@ q $end
$var wire 1 E$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 9@ state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 D$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 T$ Bitline1 $end
$var wire 1 p? Bitline2 $end
$var wire 1 :@ ff_out $end

$scope module flipflop $end
$var wire 1 :@ q $end
$var wire 1 D$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 ;@ state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 C$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 S$ Bitline1 $end
$var wire 1 o? Bitline2 $end
$var wire 1 <@ ff_out $end

$scope module flipflop $end
$var wire 1 <@ q $end
$var wire 1 C$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 =@ state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 B$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 l? ReadEnable1 $end
$var wire 1 m? ReadEnable2 $end
$var wire 1 R$ Bitline1 $end
$var wire 1 n? Bitline2 $end
$var wire 1 >@ ff_out $end

$scope module flipflop $end
$var wire 1 >@ q $end
$var wire 1 B$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 ?@ state $end
$upscope $end
$upscope $end
$upscope $end

$scope module alu_reg $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 2? WriteReg $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 "$ D [15] $end
$var wire 1 #$ D [14] $end
$var wire 1 $$ D [13] $end
$var wire 1 %$ D [12] $end
$var wire 1 &$ D [11] $end
$var wire 1 '$ D [10] $end
$var wire 1 ($ D [9] $end
$var wire 1 )$ D [8] $end
$var wire 1 *$ D [7] $end
$var wire 1 +$ D [6] $end
$var wire 1 ,$ D [5] $end
$var wire 1 -$ D [4] $end
$var wire 1 .$ D [3] $end
$var wire 1 /$ D [2] $end
$var wire 1 0$ D [1] $end
$var wire 1 1$ D [0] $end
$var wire 1 2$ Bitline1 [15] $end
$var wire 1 3$ Bitline1 [14] $end
$var wire 1 4$ Bitline1 [13] $end
$var wire 1 5$ Bitline1 [12] $end
$var wire 1 6$ Bitline1 [11] $end
$var wire 1 7$ Bitline1 [10] $end
$var wire 1 8$ Bitline1 [9] $end
$var wire 1 9$ Bitline1 [8] $end
$var wire 1 :$ Bitline1 [7] $end
$var wire 1 ;$ Bitline1 [6] $end
$var wire 1 <$ Bitline1 [5] $end
$var wire 1 =$ Bitline1 [4] $end
$var wire 1 >$ Bitline1 [3] $end
$var wire 1 ?$ Bitline1 [2] $end
$var wire 1 @$ Bitline1 [1] $end
$var wire 1 A$ Bitline1 [0] $end
$var wire 1 B@ Bitline2 [15] $end
$var wire 1 C@ Bitline2 [14] $end
$var wire 1 D@ Bitline2 [13] $end
$var wire 1 E@ Bitline2 [12] $end
$var wire 1 F@ Bitline2 [11] $end
$var wire 1 G@ Bitline2 [10] $end
$var wire 1 H@ Bitline2 [9] $end
$var wire 1 I@ Bitline2 [8] $end
$var wire 1 J@ Bitline2 [7] $end
$var wire 1 K@ Bitline2 [6] $end
$var wire 1 L@ Bitline2 [5] $end
$var wire 1 M@ Bitline2 [4] $end
$var wire 1 N@ Bitline2 [3] $end
$var wire 1 O@ Bitline2 [2] $end
$var wire 1 P@ Bitline2 [1] $end
$var wire 1 Q@ Bitline2 [0] $end

$scope module cell0 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 1$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 A$ Bitline1 $end
$var wire 1 Q@ Bitline2 $end
$var wire 1 R@ ff_out $end

$scope module flipflop $end
$var wire 1 R@ q $end
$var wire 1 1$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 S@ state $end
$upscope $end
$upscope $end

$scope module cell1 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 0$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 @$ Bitline1 $end
$var wire 1 P@ Bitline2 $end
$var wire 1 T@ ff_out $end

$scope module flipflop $end
$var wire 1 T@ q $end
$var wire 1 0$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 U@ state $end
$upscope $end
$upscope $end

$scope module cell2 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 /$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 ?$ Bitline1 $end
$var wire 1 O@ Bitline2 $end
$var wire 1 V@ ff_out $end

$scope module flipflop $end
$var wire 1 V@ q $end
$var wire 1 /$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 W@ state $end
$upscope $end
$upscope $end

$scope module cell3 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 .$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 >$ Bitline1 $end
$var wire 1 N@ Bitline2 $end
$var wire 1 X@ ff_out $end

$scope module flipflop $end
$var wire 1 X@ q $end
$var wire 1 .$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 Y@ state $end
$upscope $end
$upscope $end

$scope module cell4 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 -$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 =$ Bitline1 $end
$var wire 1 M@ Bitline2 $end
$var wire 1 Z@ ff_out $end

$scope module flipflop $end
$var wire 1 Z@ q $end
$var wire 1 -$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 [@ state $end
$upscope $end
$upscope $end

$scope module cell5 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 ,$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 <$ Bitline1 $end
$var wire 1 L@ Bitline2 $end
$var wire 1 \@ ff_out $end

$scope module flipflop $end
$var wire 1 \@ q $end
$var wire 1 ,$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 ]@ state $end
$upscope $end
$upscope $end

$scope module cell6 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 +$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 ;$ Bitline1 $end
$var wire 1 K@ Bitline2 $end
$var wire 1 ^@ ff_out $end

$scope module flipflop $end
$var wire 1 ^@ q $end
$var wire 1 +$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 _@ state $end
$upscope $end
$upscope $end

$scope module cell7 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 *$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 :$ Bitline1 $end
$var wire 1 J@ Bitline2 $end
$var wire 1 `@ ff_out $end

$scope module flipflop $end
$var wire 1 `@ q $end
$var wire 1 *$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 a@ state $end
$upscope $end
$upscope $end

$scope module cell8 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 )$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 9$ Bitline1 $end
$var wire 1 I@ Bitline2 $end
$var wire 1 b@ ff_out $end

$scope module flipflop $end
$var wire 1 b@ q $end
$var wire 1 )$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 c@ state $end
$upscope $end
$upscope $end

$scope module cell9 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 ($ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 8$ Bitline1 $end
$var wire 1 H@ Bitline2 $end
$var wire 1 d@ ff_out $end

$scope module flipflop $end
$var wire 1 d@ q $end
$var wire 1 ($ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 e@ state $end
$upscope $end
$upscope $end

$scope module cell10 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 '$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 7$ Bitline1 $end
$var wire 1 G@ Bitline2 $end
$var wire 1 f@ ff_out $end

$scope module flipflop $end
$var wire 1 f@ q $end
$var wire 1 '$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 g@ state $end
$upscope $end
$upscope $end

$scope module cell11 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 &$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 6$ Bitline1 $end
$var wire 1 F@ Bitline2 $end
$var wire 1 h@ ff_out $end

$scope module flipflop $end
$var wire 1 h@ q $end
$var wire 1 &$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 i@ state $end
$upscope $end
$upscope $end

$scope module cell12 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 %$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 5$ Bitline1 $end
$var wire 1 E@ Bitline2 $end
$var wire 1 j@ ff_out $end

$scope module flipflop $end
$var wire 1 j@ q $end
$var wire 1 %$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 k@ state $end
$upscope $end
$upscope $end

$scope module cell13 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 $$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 4$ Bitline1 $end
$var wire 1 D@ Bitline2 $end
$var wire 1 l@ ff_out $end

$scope module flipflop $end
$var wire 1 l@ q $end
$var wire 1 $$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 m@ state $end
$upscope $end
$upscope $end

$scope module cell14 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 #$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 3$ Bitline1 $end
$var wire 1 C@ Bitline2 $end
$var wire 1 n@ ff_out $end

$scope module flipflop $end
$var wire 1 n@ q $end
$var wire 1 #$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 o@ state $end
$upscope $end
$upscope $end

$scope module cell15 $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var wire 1 "$ D $end
$var wire 1 2? WriteEnable $end
$var wire 1 @@ ReadEnable1 $end
$var wire 1 A@ ReadEnable2 $end
$var wire 1 2$ Bitline1 $end
$var wire 1 B@ Bitline2 $end
$var wire 1 p@ ff_out $end

$scope module flipflop $end
$var wire 1 p@ q $end
$var wire 1 "$ d $end
$var wire 1 2? wen $end
$var wire 1 1! clk $end
$var wire 1 1? rst $end
$var reg 1 q@ state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module dMem $end
$var parameter 32 r@ ADDR_WIDTH $end
$var wire 1 B$ data_out [15] $end
$var wire 1 C$ data_out [14] $end
$var wire 1 D$ data_out [13] $end
$var wire 1 E$ data_out [12] $end
$var wire 1 F$ data_out [11] $end
$var wire 1 G$ data_out [10] $end
$var wire 1 H$ data_out [9] $end
$var wire 1 I$ data_out [8] $end
$var wire 1 J$ data_out [7] $end
$var wire 1 K$ data_out [6] $end
$var wire 1 L$ data_out [5] $end
$var wire 1 M$ data_out [4] $end
$var wire 1 N$ data_out [3] $end
$var wire 1 O$ data_out [2] $end
$var wire 1 P$ data_out [1] $end
$var wire 1 Q$ data_out [0] $end
$var wire 1 `# data_in [15] $end
$var wire 1 a# data_in [14] $end
$var wire 1 b# data_in [13] $end
$var wire 1 c# data_in [12] $end
$var wire 1 d# data_in [11] $end
$var wire 1 e# data_in [10] $end
$var wire 1 f# data_in [9] $end
$var wire 1 g# data_in [8] $end
$var wire 1 h# data_in [7] $end
$var wire 1 i# data_in [6] $end
$var wire 1 j# data_in [5] $end
$var wire 1 k# data_in [4] $end
$var wire 1 l# data_in [3] $end
$var wire 1 m# data_in [2] $end
$var wire 1 n# data_in [1] $end
$var wire 1 o# data_in [0] $end
$var wire 1 "$ addr [15] $end
$var wire 1 #$ addr [14] $end
$var wire 1 $$ addr [13] $end
$var wire 1 %$ addr [12] $end
$var wire 1 &$ addr [11] $end
$var wire 1 '$ addr [10] $end
$var wire 1 ($ addr [9] $end
$var wire 1 )$ addr [8] $end
$var wire 1 *$ addr [7] $end
$var wire 1 +$ addr [6] $end
$var wire 1 ,$ addr [5] $end
$var wire 1 -$ addr [4] $end
$var wire 1 .$ addr [3] $end
$var wire 1 /$ addr [2] $end
$var wire 1 0$ addr [1] $end
$var wire 1 1$ addr [0] $end
$var wire 1 n% enable $end
$var wire 1 q% wr $end
$var wire 1 1! clk $end
$var wire 1 s@ rst $end
$var reg 1 t@ loaded $end
$upscope $end
$upscope $end
$upscope $end

$scope begin std $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1/!
00!
0j4
0k4
0l4
0m4
0n4
0o4
0p4
0q4
0'5
0)5
0+5
0-5
0/5
015
035
055
075
095
0;5
0=5
0?5
0A5
0C5
0E5
0Y5
0[5
0]5
0_5
0a5
0c5
0e5
0g5
0i5
0k5
0m5
0o5
0q5
0s5
0u5
0w5
0-6
0/6
016
036
056
076
096
0;6
0=6
0?6
0A6
0C6
0E6
0G6
0I6
0K6
b0 -?
b0 .?
b0 /?
b0 0?
b111 P7
03?
04?
05?
06?
07?
08?
09?
0M?
0O?
0Q?
0S?
0U?
0W?
0Y?
0[?
0]?
0_?
0a?
0c?
0e?
0g?
0i?
0k?
0!@
0#@
0%@
0'@
0)@
0+@
0-@
0/@
01@
03@
05@
07@
09@
0;@
0=@
0?@
0S@
0U@
0W@
0Y@
0[@
0]@
0_@
0a@
0c@
0e@
0g@
0i@
0k@
0m@
0o@
0q@
1t@
060
080
0:0
0<0
0>0
0@0
0B0
0D0
0F0
0H0
0J0
0L0
0N0
0P0
0R0
0T0
0V0
0X0
0Z0
0\0
0^0
0`0
0b0
0d0
0f0
0h0
0j0
0l0
0n0
0p0
0r0
0t0
0v0
0x0
0z0
0|0
0~0
0"1
0$1
0&1
0(1
0*1
0,1
0.1
001
021
041
061
081
0:1
0<1
0>1
0@1
0B1
0D1
0F1
0H1
0J1
0L1
0N1
0P1
0R1
0T1
0V1
0X1
0Z1
0\1
0^1
0`1
0b1
0d1
0f1
0h1
0j1
0l1
0n1
0p1
0r1
0t1
0v1
0x1
0z1
0|1
0~1
0"2
0$2
0&2
0(2
0*2
0,2
0.2
002
022
042
062
082
0:2
0<2
0>2
0@2
0B2
0D2
0F2
0H2
0J2
0L2
0N2
0P2
0R2
0T2
0V2
0X2
0Z2
0\2
0^2
0`2
0b2
0d2
0f2
0h2
0j2
0l2
0n2
0p2
0r2
0t2
0v2
0x2
0z2
0|2
0~2
0"3
0$3
0&3
0(3
0*3
0,3
0.3
003
023
043
063
083
0:3
0<3
0>3
0@3
0B3
0D3
0F3
0H3
0J3
0L3
0N3
0P3
0R3
0T3
0V3
0X3
0Z3
0\3
0^3
0`3
0b3
0d3
0f3
0h3
0j3
0l3
0n3
0p3
0r3
0t3
0v3
0x3
0z3
0|3
0~3
0"4
0$4
0&4
0(4
0*4
0,4
0.4
004
024
044
064
084
0:4
0<4
0>4
0@4
0B4
0D4
0F4
0H4
0J4
0L4
0N4
0P4
0R4
0S4
1T4
0U4
0V4
0W4
0X4
1Y4
0Z4
0[4
0\4
0]4
0^4
0`4
0a4
0b4
0e4
0f4
0g4
0h4
0i4
0@&
0B&
0D&
0F&
0H&
0J&
0L&
0N&
0P&
0R&
0T&
0V&
0X&
0Z&
0\&
0^&
0r&
0t&
0v&
0x&
0z&
0|&
0~&
0"'
0$'
0&'
0('
0*'
0,'
0.'
00'
02'
05'
06'
07'
08'
09'
0:'
0;'
0<'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
1G'
b10 h'
0y+
0z+
0{+
0|+
0}+
0~+
0!,
0",
0#,
0$,
0%,
0&,
0',
0(,
0),
0=,
0?,
0A,
0C,
0E,
0G,
0I,
0K,
0M,
0O,
0Q,
0S,
0U,
0W,
0Y,
0[,
0o,
0q,
0s,
0u,
0w,
0y,
0{,
0},
0!-
0#-
0%-
0'-
0)-
0+-
0--
0/-
0C-
0E-
0G-
0I-
0K-
0M-
0O-
0Q-
0S-
0U-
0W-
0Y-
0[-
0]-
0_-
0a-
0u-
0w-
0y-
0{-
0}-
0!.
0#.
0%.
0'.
0).
0+.
0-.
0/.
01.
03.
05.
0*/
0,/
0./
00/
02/
04/
06/
08/
0:/
0</
0>/
0@/
0B/
0D/
0F/
0H/
0J/
0L/
0N/
0P/
0R/
0T/
0V/
0X/
0Z/
0\/
0^/
0`/
0b/
0d/
0f/
0h/
0j/
0l/
0n/
0p/
0r/
0t/
0v/
0x/
0z/
0|/
0~/
0"0
0$0
0&0
0(0
0*0
0,0
0.0
000
020
040
b10000 E'
b10000 r@
b0 +!
b1 ,!
b10 -!
b100 .!
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
0A
0E
0D
0C
0B
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0V
0W
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0*!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
0R!
1Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
07"
16"
05"
0:"
09"
08"
1="
1<"
1;"
0A"
0@"
0?"
0>"
0E"
0D"
0C"
0B"
0I"
0H"
0G"
0F"
0M"
0L"
0K"
0J"
0Q"
0P"
0O"
0N"
0U"
0T"
0S"
0R"
0Y"
0X"
0W"
0V"
0]"
0\"
0["
0Z"
0m"
1l"
0k"
0j"
0i"
0h"
0g"
0f"
1e"
0d"
0c"
0b"
0a"
1`"
0_"
1^"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0c%
1b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0d%
0e%
1f%
0g%
1h%
0i%
0j%
0k%
0l%
0m%
0n%
0o%
0p%
0q%
0r%
0s%
0t%
0u%
1v%
0w%
0x%
0y%
0z%
0{%
0|%
0}%
0~%
0!&
z"&
z#&
0$&
0%&
z&&
z'&
0(&
0)&
0*&
0+&
0?&
0A&
0C&
0E&
0G&
0I&
0K&
0M&
0O&
0Q&
0S&
0U&
0W&
0Y&
0[&
0]&
0q&
0s&
0u&
0w&
0y&
0{&
0}&
0!'
0#'
0%'
0''
0)'
0+'
0-'
0/'
01'
0W'
1V'
1U'
0T'
0S'
0R'
0Q'
0P'
0O'
1N'
1M'
1L'
1K'
1J'
1I'
1H'
0g'
1f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0x'
1w'
0v'
0u'
0t'
0s'
0r'
0q'
1p'
1o'
1n'
1m'
1l'
1k'
1j'
1i'
0*(
0)(
1((
0'(
0&(
0%(
0$(
0#(
0"(
1!(
1~'
1}'
1|'
1{'
1z'
1y'
0+(
0B(
0A(
0@(
0?(
0>(
0R(
1Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0H(
0G(
0F(
0E(
0D(
0C(
0V(
0U(
0T(
0S(
0Z(
0Y(
0X(
0W(
0j(
1i(
0h(
0g(
0f(
0e(
0d(
0c(
0b(
0a(
0`(
0_(
0^(
0](
0\(
0[(
0q(
0p(
0o(
0n(
0m(
0u(
0t(
0s(
0r(
0y(
1x(
0w(
0v(
0{(
0|(
0}(
1!)
0")
0#)
0%)
0&)
0')
0))
0*)
0+)
02)
01)
00)
0/)
0.)
06)
05)
04)
03)
0:)
09)
08)
07)
0<)
0=)
0>)
0@)
0A)
0B)
0D)
0E)
0F)
0H)
0I)
0J)
0Q)
0P)
0O)
0N)
0M)
0U)
0T)
0S)
0R)
0Y)
0X)
0W)
0V)
0[)
0\)
0])
0_)
0`)
0a)
0c)
0d)
0e)
0g)
0h)
0i)
0p)
0o)
0n)
0m)
0l)
0t)
0s)
0r)
0q)
0x)
0w)
0v)
0u)
0z)
0{)
0|)
0~)
0!*
0"*
0$*
0%*
0&*
0(*
0)*
0**
0,(
00*
0/*
0.*
0-*
0,*
0@*
0?*
1>*
0=*
0<*
0;*
0:*
09*
08*
17*
16*
15*
14*
13*
12*
11*
0D*
0C*
0B*
0A*
0H*
0G*
0F*
1E*
0X*
1W*
1V*
0U*
0T*
0S*
0R*
0Q*
0P*
1O*
1N*
1M*
1L*
1K*
1J*
1I*
0_*
0^*
0]*
0\*
0[*
0c*
0b*
0a*
0`*
0g*
1f*
1e*
0d*
0i*
0j*
0k*
1m*
0n*
0o*
1q*
0r*
0s*
0u*
0v*
0w*
0~*
0}*
0|*
0{*
0z*
0$+
0#+
0"+
0!+
0(+
0'+
0&+
0%+
0*+
0++
0,+
0.+
0/+
00+
02+
03+
04+
06+
07+
08+
0?+
0>+
0=+
0<+
0;+
0C+
0B+
0A+
0@+
0G+
1F+
1E+
1D+
0I+
0J+
0K+
1M+
0N+
0O+
1Q+
0R+
0S+
1U+
0V+
0W+
0^+
0]+
0\+
0[+
0Z+
0b+
0a+
0`+
0_+
1f+
1e+
1d+
1c+
1h+
0i+
0j+
1l+
0m+
0n+
1p+
0q+
0r+
1t+
0u+
0v+
0<,
0>,
0@,
0B,
0D,
0F,
0H,
0J,
0L,
0N,
0P,
0R,
0T,
0V,
0X,
0Z,
0n,
0p,
0r,
0t,
0v,
0x,
0z,
0|,
0~,
0"-
0$-
0&-
0(-
0*-
0,-
0.-
0B-
0D-
0F-
0H-
0J-
0L-
0N-
0P-
0R-
0T-
0V-
0X-
0Z-
0\-
0^-
0`-
0t-
0v-
0x-
0z-
0|-
0~-
0".
0$.
0&.
0(.
0*.
0,.
0..
00.
02.
04.
1F.
0E.
0D.
0C.
0B.
0A.
0@.
0?.
0>.
0=.
0<.
0;.
0:.
09.
08.
07.
1V.
0U.
0T.
0S.
0R.
0Q.
0P.
0O.
0N.
0M.
0L.
0K.
0J.
0I.
0H.
0G.
0f.
0e.
0d.
0c.
0b.
0a.
0`.
0_.
0^.
0].
0\.
0[.
0Z.
0Y.
0X.
0W.
0v.
0u.
0t.
0s.
0r.
0q.
0p.
0o.
0n.
0m.
0l.
0k.
0j.
0i.
0h.
0g.
0(/
0'/
0&/
0%/
0$/
0#/
0"/
0!/
0~.
0}.
0|.
0{.
0z.
0y.
0x.
0w.
0)/
0+/
0-/
0//
01/
03/
05/
07/
09/
0;/
0=/
0?/
0A/
0C/
0E/
0G/
0I/
0K/
0M/
0O/
0Q/
0S/
0U/
0W/
0Y/
0[/
0]/
0_/
0a/
0c/
0e/
0g/
0i/
0k/
0m/
0o/
0q/
0s/
0u/
0w/
0y/
0{/
0}/
0!0
0#0
0%0
0'0
0)0
0+0
0-0
0/0
010
030
050
070
090
0;0
0=0
0?0
0A0
0C0
0E0
0G0
0I0
0K0
0M0
0O0
0Q0
0S0
0U0
0W0
0Y0
0[0
0]0
0_0
0a0
0c0
0e0
0g0
0i0
0k0
0m0
0o0
0q0
0s0
0u0
0w0
0y0
0{0
0}0
0!1
0#1
0%1
0'1
0)1
0+1
0-1
0/1
011
031
051
071
091
0;1
0=1
0?1
0A1
0C1
0E1
0G1
0I1
0K1
0M1
0O1
0Q1
0S1
0U1
0W1
0Y1
0[1
0]1
0_1
0a1
0c1
0e1
0g1
0i1
0k1
0m1
0o1
0q1
0s1
0u1
0w1
0y1
0{1
0}1
0!2
0#2
0%2
0'2
0)2
0+2
0-2
0/2
012
032
052
072
092
0;2
0=2
0?2
0A2
0C2
0E2
0G2
0I2
0K2
0M2
0O2
0Q2
0S2
0U2
0W2
0Y2
0[2
0]2
0_2
0a2
0c2
0e2
0g2
0i2
0k2
0m2
0o2
0q2
0s2
0u2
0w2
0y2
0{2
0}2
0!3
0#3
0%3
0'3
0)3
0+3
0-3
0/3
013
033
053
073
093
0;3
0=3
0?3
0A3
0C3
0E3
0G3
0I3
0K3
0M3
0O3
0Q3
0S3
0U3
0W3
0Y3
0[3
0]3
0_3
0a3
0c3
0e3
0g3
0i3
0k3
0m3
0o3
0q3
0s3
0u3
0w3
0y3
0{3
0}3
0!4
0#4
0%4
0'4
0)4
0+4
0-4
0/4
014
034
054
074
094
0;4
0=4
0?4
0A4
0C4
0E4
0G4
0I4
0K4
0M4
0O4
0Q4
0&5
0(5
0*5
0,5
0.5
005
025
045
065
085
0:5
0<5
0>5
0@5
0B5
0D5
0X5
0Z5
0\5
0^5
0`5
0b5
0d5
0f5
0h5
0j5
0l5
0n5
0p5
0r5
0t5
0v5
0,6
0.6
006
026
046
066
086
0:6
0<6
0>6
0@6
0B6
0D6
0F6
0H6
0J6
0[6
0Z6
0Y6
0X6
0W6
0V6
0U6
0T6
0S6
0R6
0Q6
0P6
0O6
0N6
0M6
0L6
0k6
0j6
0i6
0h6
0g6
0f6
0e6
0d6
0c6
0b6
0a6
0`6
0_6
0^6
0]6
0\6
0{6
0z6
0y6
0x6
0w6
0v6
0u6
0t6
0s6
0r6
0q6
0p6
0o6
0n6
0m6
0l6
0-7
0,7
0+7
0*7
0)7
0(7
0'7
0&7
0%7
0$7
0#7
0"7
0!7
0~6
0}6
0|6
0=7
0<7
0;7
0:7
097
087
077
067
057
047
037
027
017
007
0/7
0.7
0M7
0L7
0K7
0J7
0I7
0H7
0G7
0F7
0E7
0D7
0C7
0B7
0A7
0@7
0?7
0>7
0N7
0O7
0V7
0U7
0T7
0S7
0R7
0f7
0e7
0d7
0c7
0b7
0a7
0`7
0_7
0^7
0]7
0\7
0[7
0Z7
0Y7
0X7
0W7
0j7
0i7
0h7
0g7
0n7
0m7
0l7
0k7
0~7
0}7
0|7
0{7
0z7
0y7
0x7
0w7
0v7
0u7
0t7
0s7
0r7
0q7
0p7
0o7
0'8
0&8
0%8
0$8
0#8
0+8
0*8
0)8
0(8
0/8
0.8
0-8
0,8
018
028
038
058
068
078
098
0:8
0;8
0=8
0>8
0?8
0F8
0E8
0D8
0C8
0B8
0J8
0I8
0H8
0G8
0N8
0M8
0L8
0K8
0P8
0Q8
0R8
0T8
0U8
0V8
0X8
0Y8
0Z8
0\8
0]8
0^8
0e8
0d8
0c8
0b8
0a8
0i8
0h8
0g8
0f8
0m8
0l8
0k8
0j8
0o8
0p8
0q8
0s8
0t8
0u8
0w8
0x8
0y8
0{8
0|8
0}8
0&9
0%9
0$9
0#9
0"9
0*9
0)9
0(9
0'9
0.9
0-9
0,9
0+9
009
019
029
049
059
069
089
099
0:9
0<9
0=9
0>9
1D9
1C9
1B9
1A9
1@9
1T9
1S9
1R9
1Q9
1P9
1O9
1N9
1M9
1L9
1K9
1J9
1I9
1H9
1G9
1F9
1E9
0X9
0W9
0V9
0U9
1\9
1[9
1Z9
1Y9
0l9
0k9
0j9
0i9
0h9
0g9
0f9
0e9
0d9
0c9
0b9
0a9
0`9
0_9
0^9
0]9
1s9
1r9
1q9
1p9
1o9
0w9
0v9
0u9
0t9
1{9
1z9
1y9
1x9
1}9
1~9
0!:
1#:
1$:
0%:
1':
1(:
0):
1+:
1,:
0-:
14:
13:
12:
11:
10:
08:
07:
06:
05:
1<:
1;:
1::
19:
1>:
1?:
0@:
1B:
1C:
0D:
1F:
1G:
0H:
1J:
1K:
0L:
1S:
1R:
1Q:
1P:
1O:
0W:
0V:
0U:
0T:
1[:
1Z:
1Y:
1X:
1]:
1^:
0_:
1a:
1b:
0c:
1e:
1f:
0g:
1i:
1j:
0k:
1r:
1q:
1p:
1o:
1n:
0v:
0u:
0t:
0s:
1z:
1y:
1x:
1w:
1|:
1}:
0~:
1";
1#;
0$;
1&;
1';
0(;
1*;
1+;
0,;
05;
04;
03;
02;
01;
00;
0/;
0.;
0-;
06;
07;
0@;
0?;
0>;
0=;
0<;
0;;
0:;
09;
08;
0A;
0B;
0C;
0D;
0H;
0G;
0F;
0E;
0Q;
0P;
0O;
0N;
0M;
0U;
0T;
0S;
0R;
0Y;
0X;
0W;
0V;
0[;
0\;
0];
0_;
0`;
0a;
0c;
0d;
0e;
0g;
0h;
0i;
0q;
0p;
0o;
0n;
0m;
0u;
0t;
0s;
0r;
0y;
0x;
0w;
0v;
0{;
0|;
0};
0!<
0"<
0#<
0%<
0&<
0'<
0)<
0*<
0+<
04<
03<
02<
01<
00<
08<
07<
06<
05<
0<<
0;<
0:<
09<
0><
0?<
0@<
0B<
0C<
0D<
0F<
0G<
0H<
0J<
0K<
0L<
0T<
0S<
0R<
0Q<
0P<
0X<
0W<
0V<
0U<
0\<
0[<
0Z<
0Y<
0^<
0_<
0`<
0b<
0c<
0d<
0f<
0g<
0h<
0j<
0k<
0l<
0u<
0t<
0s<
0r<
0q<
0y<
0x<
0w<
0v<
0}<
0|<
0{<
0z<
0!=
0"=
0#=
0%=
0&=
0'=
0)=
0*=
0+=
0-=
0.=
0/=
07=
06=
05=
04=
03=
0;=
0:=
09=
08=
0?=
0>=
0==
0<=
0A=
0B=
0C=
0E=
0F=
0G=
0I=
0J=
0K=
0M=
0N=
0O=
0`=
0_=
0^=
0]=
0\=
0d=
0c=
0b=
0a=
0h=
0g=
0f=
0e=
0j=
0k=
0l=
0n=
0o=
0p=
0r=
0s=
0t=
0v=
0w=
0x=
0y=
0z=
0{=
0!>
0~=
0}=
0|=
z%>
z$>
z#>
z">
0)>
0(>
0'>
0&>
0*>
0+>
0,>
0->
0.>
0/>
00>
01>
02>
04>
05>
06>
07>
08>
09>
0=>
0<>
0;>
0:>
zA>
z@>
z?>
z>>
0E>
0D>
0C>
0B>
0F>
0G>
0H>
0I>
0J>
0K>
0L>
0M>
0N>
0P>
0Q>
0R>
0S>
0T>
0U>
0Y>
0X>
0W>
0V>
z]>
z\>
z[>
zZ>
0a>
0`>
0_>
0^>
0b>
0c>
0d>
0e>
0f>
0g>
0h>
0i>
0j>
0l>
0m>
0n>
0o>
0p>
0q>
0u>
0t>
0s>
0r>
zy>
zx>
zw>
zv>
0}>
0|>
0{>
0z>
0~>
0!?
0"?
0#?
0$?
0%?
0&?
0'?
0(?
0*?
0+?
0,?
0L?
0N?
0P?
0R?
0T?
0V?
0X?
0Z?
0\?
0^?
0`?
0b?
0d?
0f?
0h?
0j?
0~?
0"@
0$@
0&@
0(@
0*@
0,@
0.@
00@
02@
04@
06@
08@
0:@
0<@
0>@
0R@
0T@
0V@
0X@
0Z@
0\@
0^@
0`@
0b@
0d@
0f@
0h@
0j@
0l@
0n@
0p@
02!
11!
1s@
12?
11?
1d4
1c4
1_4
16.
1x+
1w+
1F'
14'
13'
1,&
0`&
1_&
0.&
1-&
z>&
z=&
z<&
z;&
z:&
z9&
z8&
z7&
z6&
z5&
z4&
z3&
z2&
z1&
z0&
z/&
zp&
zo&
zn&
zm&
zl&
zk&
zj&
zi&
zh&
zg&
zf&
ze&
zd&
zc&
zb&
za&
0+*
0=(
0<(
1;(
0:(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0k(
0l(
0z(
0~(
0$)
0()
0,)
0-)
0;)
0?)
0C)
0G)
0K)
0L)
0Z)
0^)
0b)
0f)
0j)
0k)
0y)
0})
0#*
0'*
0Y*
0Z*
0h*
0l*
0p*
0t*
0x*
0y*
0)+
0-+
01+
05+
09+
0:+
0H+
0L+
0P+
0T+
0X+
0Y+
0g+
0k+
0o+
0s+
0c-
1b-
01-
10-
0],
1\,
0+,
1*,
z;,
z:,
z9,
z8,
z7,
z6,
z5,
z4,
z3,
z2,
z1,
z0,
z/,
z.,
z-,
z,,
zm,
zl,
zk,
zj,
zi,
zh,
zg,
zf,
ze,
zd,
zc,
zb,
za,
z`,
z_,
z^,
zA-
z@-
z?-
z>-
z=-
z<-
z;-
z:-
z9-
z8-
z7-
z6-
z5-
z4-
z3-
z2-
zs-
zr-
zq-
zp-
zo-
zn-
zm-
zl-
zk-
zj-
zi-
zh-
zg-
zf-
ze-
zd-
0y5
1x5
0G5
1F5
0s4
1r4
z%5
z$5
z#5
z"5
z!5
z~4
z}4
z|4
z{4
zz4
zy4
zx4
zw4
zv4
zu4
zt4
zW5
zV5
zU5
zT5
zS5
zR5
zQ5
zP5
zO5
zN5
zM5
zL5
zK5
zJ5
zI5
zH5
z+6
z*6
z)6
z(6
z'6
z&6
z%6
z$6
z#6
z"6
z!6
z~5
z}5
z|5
z{5
zz5
1?9
0Q7
0!8
0"8
008
048
088
0<8
0@8
0A8
0O8
0S8
0W8
0[8
0_8
0`8
0n8
0r8
0v8
0z8
0~8
0!9
0/9
039
079
0;9
1m9
0n9
1|9
1":
1&:
1*:
1.:
0/:
1=:
1A:
1E:
1I:
1M:
0N:
1\:
1`:
1d:
1h:
1l:
0m:
1{:
1!;
1%;
1);
0W=
0V=
0U=
0T=
0S=
0R=
0Q=
0P=
0m<
0,<
0I;
0J;
0K;
0L;
0Z;
0^;
0b;
0f;
0j;
0k;
0l;
0z;
0~;
0$<
0(<
0-<
0.<
0/<
0=<
0A<
0E<
0I<
0M<
0N<
0O<
0]<
0a<
0e<
0i<
0n<
0o<
0p<
0~<
0$=
0(=
0,=
00=
01=
02=
0@=
0D=
0H=
0L=
0X=
0Y=
0Z=
0[=
0i=
0m=
0q=
0u=
03>
0O>
0k>
0)?
0A@
1@@
0m?
1l?
0;?
1:?
zK?
zJ?
zI?
zH?
zG?
zF?
zE?
zD?
zC?
zB?
zA?
z@?
z??
z>?
z=?
z<?
z}?
z|?
z{?
zz?
zy?
zx?
zw?
zv?
zu?
zt?
zs?
zr?
zq?
zp?
zo?
zn?
zQ@
zP@
zO@
zN@
zM@
zL@
zK@
zJ@
zI@
zH@
zG@
zF@
zE@
zD@
zC@
zB@
$end
#50
0/!
01!
#100
1/!
11!
b10 ,!
#150
0/!
01!
#200
1/!
11!
b11 ,!
#201
10!
12!
0f%
03'
0F'
0w+
06.
0_4
0c4
01?
0s@
#250
0/!
01!
#300
1/!
11!
1B&
1P&
1Z&
1^&
1t&
16'
1y+
1~+
1a4
b100 ,!
1A&
1O&
1Y&
1]&
1s&
1A!
1i%
1w%
19"
1|"
1u"
1a!
1#)
0!)
1t(
1/
1I"
1D"
1:%
1?
18
1~(
0i(
1o(
0V.
1T.
1M"
1h(
1p"
1n"
0f'
1e'
1m"
0l"
0e"
1d"
0m*
0f*
1s*
0q*
1a*
1x'
0w'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0Q!
1P!
13
11
0W*
1p*
0V*
1\*
0b%
1a%
1)(
0((
0!(
0~'
0}'
0|'
0{'
0z'
0y'
1U*
1?*
0>*
07*
06*
05*
04*
03*
02*
01*
1Z*
1m*
1f*
0s*
1q*
0a*
0M+
0F+
0Q+
0E+
1:+
0U+
0D+
0h+
0f+
0l+
0e+
0p+
0d+
1,(
1Y+
0t+
0c+
1W*
0p*
1V*
0\*
0O*
0N*
0M*
0L*
0E*
0K*
0J*
0I*
0U*
0:+
0,(
0Y+
0Z*
0N'
0M'
0L'
0K'
0J'
0I'
0H'
b110 h'
1U4
1Z4
1j%
1z%
1A"
1B%
0:%
0F.
1E.
#350
0/!
01!
#400
1/!
11!
1@&
0B&
0P&
1R&
0t&
1v&
06'
17'
1z+
1!,
1",
1&,
1?,
1w-
1h4
1o4
1q4
b101 ,!
1?&
0A&
0O&
1Q&
0s&
1u&
0A!
1@!
1k%
1{%
1}%
1Q"
1>,
1v-
1x%
1}"
0|"
0u"
1t"
0a!
1`!
0#)
1!)
0t(
0/
1.
1%)
1w(
1q!
1R%
0I"
1H"
1E"
0D"
1C%
0B%
1@
0?
08
17
0~(
1i(
0o(
0h(
1&)
1n(
1U.
0T.
0A"
1@"
0M"
1L"
1h(
0&)
0n(
1$)
1g(
0E.
1D.
0$)
0g(
1l(
0l(
1\"
1Z"
1f'
12%
0m"
1l"
1k"
1i"
1g"
1e"
1c"
0`"
1_"
0^"
1o*
0m*
1b*
1->
1B<
1;<
0x'
1w'
1v'
1t'
1r'
1p'
1o'
1n'
1m'
1l'
1k'
1j'
1i'
1e7
0S9
1<7
1Q!
1~#
1l*
0W*
1]*
1~=
1?;
158
1.8
0#:
0z9
1f
1b%
0)(
1((
1'(
1%(
1#(
1!(
1~'
1}'
1|'
1{'
1z'
1y'
0V*
1r*
1\*
1%=
1|<
1}7
1k9
0$:
0q9
0\9
0?*
1>*
1=*
1;*
19*
17*
16*
15*
14*
13*
12*
11*
1,7
1p*
1U*
1L7
1z6
1Z6
0":
1j9
0(:
0p9
0C9
0o*
1m*
0b*
1s*
0q*
1a*
1u*
1d*
1.+
1'+
16+
1%+
1M+
1F+
1Q+
1E+
1U+
1D+
1h+
1f+
1l+
1e+
1p+
1d+
1t+
1c+
1y6
0&:
1i9
0,:
0o9
04:
0B9
0l*
1W*
0]*
1D*
1V*
0r*
0U*
1v*
1[*
1S*
1Q*
1O*
1N*
1M*
1L*
1E*
1K*
1J*
1I*
1x6
0*:
0m9
1h9
0?:
03:
0S:
0A9
0V*
1/*
1t*
1Y*
1w6
0=:
1g9
0C:
02:
1d9
0^:
0R:
0r:
0@9
1~*
1v6
1s6
0A:
1f9
0G:
01:
0\:
1c9
0b:
0Q:
1`9
0}:
0q:
1T*
1u6
1r6
1o6
0E:
1e9
0K:
00:
0`:
1b9
0f:
0P:
0{:
1_9
0#;
0p:
1t6
1q6
1n6
0I:
0.:
0d:
1a9
0j:
0O:
0!;
1^9
0';
0o:
1p6
1m6
0h:
0M:
0%;
1]9
0+;
0n:
1l6
0);
0l:
06"
0U'
1S'
1R'
1P'
1N'
1M'
1L'
1K'
1J'
1I'
1H'
b0 P7
0="
0<"
0;"
#450
0/!
01!
#500
1/!
11!
0@&
1B&
1D&
1H&
1L&
1P&
1T&
0Z&
1\&
0^&
1t&
16'
0&,
1',
0?,
1A,
1u-
0w-
1j4
1)5
1[5
14?
b110 ,!
0?&
1A&
1C&
1G&
1K&
1O&
1S&
0Y&
1[&
0]&
1s&
1A!
0Q"
1P"
0>,
1@,
1t-
0v-
1U"
1(5
1Z5
1y%
0}"
1|"
1{"
1y"
1w"
1u"
1s"
1a!
1#)
0!)
1t(
0q!
1p!
1S%
0R%
1#"
10$
1A
1f.
1/
1I"
1G"
0E"
1D"
1C"
0C%
1B%
1A%
1?%
1=%
0@
1?
1>
1<
1:
18
16
1~(
0i(
1o(
0U.
1P.
1A"
1?"
1M"
1K"
0h(
1&)
1n(
0D.
1?.
1$)
1g(
1l(
0p"
1o"
0n"
0f'
0e'
1d'
13%
02%
0m*
0f*
0s*
1q*
0a*
1Z*
1w*
0u*
1`*
1*>
1><
1<<
1f7
0e7
0T9
1S9
1=7
0<7
1!$
0~#
0Q!
0P!
1O!
03
12
01
0->
0B<
0;<
0W*
0p*
1V*
0\*
1U*
0v*
1!>
1@;
118
1/8
058
0.8
0}9
0{9
1#:
1z9
0b%
0a%
1`%
1g
0f
0~=
0?;
0U*
0Z*
1-7
0,7
1!=
1}<
1~7
0}7
1l9
0~9
0r9
0k9
1$:
1q9
0%=
0|<
1Z*
1M7
1{6
0z6
1[6
0Z6
0|9
1k9
0$:
0q9
1":
0j9
1(:
1p9
0L7
1z6
0y6
0":
1j9
0(:
0p9
1&:
0i9
1,:
1o9
1y6
0x6
0&:
1i9
0,:
0o9
1*:
1m9
1x6
0*:
0m9
0V'
1U'
b1000 h'
0Z4
0z%
0@"
0B%
0A%
0?%
0=%
1:%
19%
17%
15%
1A.
0?.
#550
0/!
01!
#600
1/!
11!
0t&
0v&
1x&
06'
07'
18'
0!,
0",
1&,
1(,
1?,
0u-
1).
1+.
1/.
13.
0j4
1k4
0o4
1p4
0q4
0)5
1+5
1Y5
0[5
16?
1O?
1U@
b111 ,!
b1 +!
0s&
0u&
1w&
0A!
0@!
1?!
0{%
0}%
1Q"
1O"
1>,
0t-
1(.
1*.
1..
12.
0U"
1T"
0(5
1*5
1X5
0Z5
1Y"
1N?
1T@
0a!
0`!
1_!
0#)
1!)
0t(
0%)
0w(
0l(
1))
1v(
1q!
0S%
1J%
1I%
1G%
1E%
0#"
1""
11$
00$
0f.
1e.
1E
0/
0.
1-
13"
1@$
0~(
1i(
0o(
1h(
0&)
0n(
0g(
1*)
1m(
1p$
0h(
0$)
1g(
0*)
0m(
1()
1k(
1T
0()
0k(
0\"
1["
0Z"
1f'
03%
1*%
1)%
1'%
1%%
1m*
1f*
0*>
0><
0<<
0f7
1]7
1\7
1Z7
1X7
1T9
0K9
0J9
0H9
0F9
0=7
147
137
117
1/7
1Q!
0!$
1e>
1B<
1;<
1h>
1F<
1:<
1~>
1^<
1\<
1&?
1f<
1Z<
1W*
0!>
0@;
018
0/8
1s8
1l8
1w8
1k8
109
1.9
189
1,9
1}9
1{9
0a:
0Z:
0e:
0Y:
0|:
0z:
0&;
0x:
0g
1b%
1X>
1?;
1W>
1>;
1u>
1<;
1s>
1:;
0!=
0}<
0~7
1u7
1t7
1r7
1p7
0l9
1~9
1r9
1\9
0c9
0Z9
0b9
0`9
0Y9
0^9
1%=
1|<
1)=
1{<
1!7
1}6
1$7
1#7
0-7
1A=
1?=
1I=
1==
0M7
0{6
0r6
0q6
0o6
0m6
0[6
1R6
1Q6
1O6
1M6
1|9
0k9
1$:
1q9
1C9
1L7
1K7
1I7
1G7
0z6
1":
0j9
1(:
1p9
14:
1B9
0y6
1&:
0i9
1,:
1o9
0h9
1?:
13:
1S:
0x6
0w6
1*:
1m9
1=:
0g9
1C:
12:
0d9
1^:
1R:
0v6
0s6
1A:
0f9
1G:
11:
1\:
1c9
0u6
1r6
1E:
0e9
1K:
10:
0t6
1I:
1.:
16"
1V'
b1010 h'
b10 P7
1<"
#650
0/!
01!
#700
1/!
11!
1t&
16'
0?,
0A,
1C,
1L/
1j4
1l4
1)5
0Y5
06?
17?
0O?
1Q?
1S@
0U@
b1000 ,!
b10 +!
1s&
1A!
0>,
0@,
1B,
1K/
1U"
1S"
1(5
0X5
0Y"
1X"
0N?
1P?
1R@
0T@
1a!
1#)
0!)
1t(
0q!
0p!
1o!
1#"
01$
0e.
1d.
0E
1D
1/
03"
12"
1A$
0@$
1~(
0i(
1o(
1q$
0p$
1h(
1U
0T
0f'
1e'
0Q!
1P!
0m*
0f*
1s*
0q*
1a*
0b%
1a%
0W*
1p*
0V*
1\*
1U*
0Z*
0V'
0U'
1T'
b1100 h'
#750
0/!
01!
#800
1/!
11!
0t&
1v&
06'
17'
1?,
1j/
0)5
0+5
1-5
16?
18?
1O?
0S@
b1001 ,!
b11 +!
0s&
1u&
0A!
1@!
1>,
1i/
0(5
0*5
1,5
1Y"
1W"
1N?
0R@
0a!
1`!
0#)
1!)
0t(
1%)
1w(
1q!
0#"
0""
1!"
0d.
1_.
1E
1C
0/
1.
13"
0A$
0~(
1i(
0o(
0h(
1&)
1n(
0q$
1h(
0&)
0n(
1$)
0g(
1*)
1m(
0U
0$)
1g(
0*)
0m(
1()
1k(
0()
0k(
1f'
1Q!
1m*
1f*
1b%
1W*
1V'
b1110 h'
#850
0/!
01!
#900
1/!
11!
1t&
16'
0?,
1A,
1)5
0O?
0Q?
1S?
b1010 ,!
b100 +!
1s&
1A!
0>,
1@,
1(5
0N?
0P?
1R?
1a!
1#)
0!)
1t(
1/
0q!
1p!
1#"
03"
02"
11"
1~(
0i(
1o(
1V(
0h(
1&)
1n(
1A(
1$)
0g(
1*)
1m(
12)
1()
1k(
1f(
0f'
0e'
0d'
1c'
1m"
0l"
0k"
0i"
1h"
0g"
0c"
0_"
0m*
0f*
0s*
1q*
0a*
0w*
1u*
0`*
1*+
1(+
1x'
0w'
0v'
0t'
1s'
0r'
0Q!
0P!
0O!
1N!
0W*
0D*
0p*
1V*
0\*
0t*
0U*
1v*
0T*
1++
1}*
0b%
0a%
0`%
1_%
1)(
0((
0'(
0%(
1$(
0#(
0/*
1U*
0v*
0[*
1t*
1)+
0S*
1/+
1|*
1?*
0>*
0=*
0;*
1:*
09*
0~*
1Z*
0t*
0Y*
1-+
1R*
1m*
1f*
0q*
0e*
0u*
0d*
0.+
0'+
12+
1&+
1y*
06+
0%+
1T*
0++
0}*
1W*
0V*
0U*
1S*
0/+
0|*
0R*
13+
1{*
0Q*
0)+
0S*
0Z*
0-+
1R*
03+
0{*
11+
1Q*
0y*
01+
0Q*
1y*
0y*
0T'
0R'
1Q'
0P'
b1111111001010010 h'
#950
0/!
01!
#1000
1/!
11!
1@&
0B&
0D&
0H&
1J&
0L&
0T&
0\&
0t&
0v&
0x&
1z&
06'
07'
08'
19'
1?,
0)5
1+5
1O?
b1011 ,!
b101 +!
1?&
0A&
0C&
0G&
1I&
0K&
0S&
0[&
0s&
0u&
0w&
1y&
0A!
0@!
0?!
1>!
1>,
0(5
1*5
1N?
1}"
0|"
0{"
0y"
1x"
0w"
0s"
0a!
0`!
0_!
1^!
0#)
1!)
0t(
0/
0.
0-
1,
0%)
0w(
0))
0v(
1<)
1:)
1q!
0#"
1""
13"
0G"
0A"
1@"
0?"
1E"
0D"
0C"
1;%
0:%
09%
07%
16%
05%
1@
0?
0>
0<
1;
0:
06
0~(
1i(
0o(
0V(
1h(
0&)
0n(
1g(
0*)
0m(
0f(
1=)
11)
1U.
0P.
1D.
0A.
0K"
0h(
0A(
0$)
0g(
1l(
0()
0k(
1;)
1e(
1'/
1v.
02)
0l(
1/#
1>#
1f(
0=)
01)
0;)
0e(
0o"
1f'
0m"
1l"
1i"
0h"
0e"
0d"
1c"
1a"
1o*
0m*
1b*
0x'
1w'
1t'
0s'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
1Q!
02
1l*
0W*
1]*
1b%
0)(
1((
1%(
0$(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
1V*
0?*
1>*
1;*
0:*
07*
06*
05*
04*
03*
02*
01*
0o*
1m*
0b*
1q*
1e*
1.+
1'+
02+
0&+
0M+
0F+
0Q+
0E+
1:+
0U+
0D+
0h+
0f+
0l+
0e+
0p+
0d+
1,(
1Y+
0t+
0c+
0l*
1W*
0]*
0V*
1r*
1\*
1S*
0R*
0O*
0N*
0M*
0L*
0E*
0K*
0J*
0I*
1V*
0r*
0\*
1p*
1U*
0:+
0,(
0Y+
0p*
0U*
1Z*
0Z*
1U'
1R'
0Q'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
b110110 h'
0U4
0j%
#1050
0/!
01!
#1100
1/!
11!
0@&
1B&
1H&
0J&
0P&
0R&
1T&
1X&
1t&
16'
0z+
0(,
0?,
0A,
0C,
1E,
1o,
1E-
1'.
0).
0+.
0/.
11.
03.
0p4
1)5
0O?
1Q?
b1100 ,!
b110 +!
0?&
1A&
1G&
0I&
0O&
0Q&
1S&
1W&
1s&
1A!
0k%
0O"
0>,
0@,
0B,
1D,
1n,
1D-
1&.
0(.
0*.
0..
10.
02.
1(5
0N?
1P?
0}"
1|"
1y"
0x"
0u"
0t"
1s"
1a!
1#)
0!)
1t(
1/
0q!
0p!
0o!
1n!
1O#
1^#
1K%
0J%
0I%
0G%
1F%
0E%
1#"
03"
12"
0I"
0H"
1G"
1A"
0@"
0E"
1D"
0;%
1:%
17%
06%
0@
1?
1<
0;
08
07
16
1~(
0i(
1o(
0U.
1T.
1E.
0D.
0M"
0L"
1K"
1h(
0'/
1(/
1u.
0v.
0/#
1.#
1?#
0>#
0["
1q"
0f'
1e'
1#%
12%
0*%
0)%
0'%
0%%
1d"
0a"
1`"
0m*
0f*
1s*
0q*
1a*
1*>
1[;
1Y;
1!:
0}9
1w9
118
1/8
1->
1e7
0]7
0\7
0Z7
0X7
0S9
1K9
1J9
1H9
1F9
1=7
1<7
047
037
017
0/7
0Q!
1P!
14
1v#
1u#
1s#
1q#
0e>
0h>
0F<
0:<
0~>
0^<
0\<
0&?
0f<
0Z<
0W*
1p*
0V*
1\*
1!>
15;
1l9
0~9
1X9
1~7
1~=
158
1.8
0s8
0l8
0w8
0k8
009
0.9
089
0,9
0#:
0z9
1a:
1Z:
1e:
1Y:
1|:
1z:
1&;
1x:
1^
1]
1[
1Y
0b%
1a%
0X>
0W>
0>;
0u>
0<;
0s>
0:;
1U*
1!=
1}<
1}7
0u7
0t7
0r7
0p7
1k9
0$:
0q9
0X9
0\9
0c9
1b:
1Q:
1Z9
1b9
1`9
1Y9
1^9
0)=
0{<
0!7
0}6
0$7
0#7
1[6
1{6
1-7
1,7
0A=
0?=
0I=
0==
1Z*
1M7
0":
1j9
0(:
0p9
0C9
1`:
0b9
1f:
1P:
1A9
0K7
1!$
1z6
0r6
1q6
1o6
1m6
1Z6
0R6
0Q6
0O6
0M6
0I7
0G7
0&:
1i9
0,:
0o9
04:
0B9
1d:
0a9
1j:
1O:
1r:
1@9
1g
1y6
0q6
1~#
0v#
0u#
0s#
0q#
0*:
0m9
1h9
0?:
03:
0S:
0A9
1h:
1M:
0`9
1}:
1q:
1f
0^
0]
0[
0Y
1x6
0p6
1w6
0o6
0=:
1g9
0C:
02:
1d9
0^:
0R:
0r:
0@9
1{:
0_9
1#;
1p:
1v6
1s6
0n6
0A:
1f9
0G:
01:
0\:
1c9
0b:
0Q:
1`9
0}:
0q:
1!;
0^9
1';
1o:
1u6
1r6
1o6
0m6
0E:
1e9
0K:
00:
0`:
1b9
0f:
0P:
0{:
1_9
0#;
0p:
1%;
0]9
1+;
1n:
1t6
1q6
1n6
0l6
0I:
0.:
0d:
1a9
0j:
0O:
0!;
1^9
0';
0o:
1);
1l:
1p6
1m6
0h:
0M:
0%;
1]9
0+;
0n:
1l6
0);
0l:
06"
0V'
0U'
1T'
b1 -?
b100 .?
b100 /?
b100 0?
b10100 h'
b111 P7
1="
1;"
1i6
#1150
0/!
01!
#1200
1/!
11!
1R&
0X&
1Z&
0t&
1v&
06'
17'
0&,
0',
1(,
1?,
0o,
1q,
1C-
0E-
0'.
1).
1/.
01.
0a4
0l4
1n4
0)5
0+5
0-5
1/5
1Y5
1[5
1/6
1O?
b1101 ,!
b111 +!
1Q&
0W&
1Y&
0s&
1u&
0A!
1@!
0Q"
0P"
1O"
1>,
0n,
1p,
1B-
0D-
0&.
1(.
1..
00.
09"
0S"
0(5
0*5
0,5
1.5
1X5
1Z5
1.6
1N?
1t"
0a!
1`!
0#)
1!)
0t(
0/
1.
1%)
1w(
1q!
0O#
1N#
1_#
0^#
0K%
1J%
1G%
0F%
0#"
0""
0!"
1~!
11$
10$
1n#
13"
0~(
1i(
0o(
0h(
1&)
1n(
1v
1H"
17
1h(
0&)
0n(
1$)
1g(
1L"
0$)
0g(
1l(
0l(
1]"
0q"
1p"
1f'
13%
02%
0#%
1"%
1k"
1g"
1e"
0`"
1_"
1m*
1f*
1><
1<<
0B<
0;<
0[;
0Y;
0!:
1}9
0w9
018
0/8
1_;
1X;
1#:
1z9
178
058
1*8
1v'
1r'
1p'
1o'
1n'
1m'
1l'
1k'
1j'
1i'
1f7
0e7
0T9
1S9
1Q!
04
13
1}#
1|#
1{#
1z#
1y#
1x#
1w#
1v#
1u#
1t#
1s#
1r#
1q#
1p#
1W*
1@;
0?;
05;
0|9
0l9
1~9
0~7
14;
0k9
1$:
1q9
1\9
148
0}7
1%8
118
1/8
078
158
0*8
0}9
0{9
1%:
0#:
1v9
1e
1d
1c
1b
1a
1`
1_
1^
1]
1\
1[
1Z
1Y
1X
1b%
1'(
1#(
1!(
1~'
1}'
1|'
1{'
1z'
1y'
1|9
1":
0j9
1(:
1p9
1C9
1|7
1~7
048
1}7
0%8
1l9
0~9
0r9
0\9
1k9
0$:
1X9
1=*
19*
17*
16*
15*
14*
13*
12*
11*
0[6
0Z6
0{6
0z6
1&:
0i9
1,:
1o9
14:
1B9
0|7
0|9
0k9
0Z*
1u*
1d*
16+
1%+
1M+
1F+
1Q+
1E+
1U+
1D+
1h+
1f+
1l+
1e+
1p+
1d+
1t+
1c+
0!$
0~#
1[6
1Z6
1Y6
1{6
1z6
0y6
1*:
1m9
0h9
1?:
13:
1S:
1A9
0U*
1v*
1[*
1D*
1Q*
1O*
1N*
1M*
1L*
1E*
1K*
1J*
1I*
1!$
1~#
0}#
0g
0f
0Y6
0z6
0x6
1=:
0g9
1C:
12:
0d9
1^:
1R:
1r:
1@9
1t*
1Y*
1/*
0~#
0|#
1g
1f
0e
0w6
1A:
0f9
1G:
11:
1\:
0c9
1b:
1Q:
0`9
1}:
1q:
1~*
0{#
0f
0d
0v6
0s6
1E:
0e9
1K:
10:
1`:
0b9
1f:
1P:
1{:
0_9
1#;
1p:
0T*
1++
1}*
0z#
0w#
0c
0u6
0r6
0o6
1I:
1.:
1d:
0a9
1j:
1O:
1!;
0^9
1';
1o:
1)+
0S*
1/+
1|*
0y#
0v#
0s#
0b
0_
0t6
0q6
0n6
1h:
1M:
1%;
0]9
1+;
1n:
1-+
1R*
0x#
0u#
0r#
0a
0^
0[
0p6
0m6
1);
1l:
0t#
0q#
0`
0]
0Z
0l6
0p#
0\
0Y
0X
1V'
0T'
0S'
0R'
1Q'
1P'
1N'
1M'
1L'
1K'
1J'
1I'
1H'
b10110 h'
b1 .?
b1 /?
b1 0?
1k6
0i6
#1250
0/!
01!
#1300
1/!
11!
1D&
1L&
1P&
0Z&
1\&
1t&
16'
1',
0?,
1A,
0j4
0k4
1l4
0n4
1o4
1)5
0[5
1-6
0/6
08?
0O?
0Q?
0S?
1U?
1S@
1U@
b1110 ,!
b1000 +!
1C&
1K&
1O&
0Y&
1[&
1s&
1A!
1P"
0>,
1@,
0U"
0T"
1S"
1(5
0Z5
1,6
0.6
0W"
0N?
0P?
0R?
1T?
1R@
1T@
1{"
1w"
1u"
1a!
1#)
0!)
1t(
0q!
1p!
1#"
00$
1o#
0n#
1c.
0_.
0C
1/
03"
02"
01"
10"
1A$
1@$
1~(
0i(
1o(
1q$
1p$
1w
0v
1I"
1?"
1C"
19%
15%
1>
1:
18
0h(
1&)
1n(
0T.
1P.
0E.
1A.
1M"
1U
1T
1$)
1g(
0(/
0u.
1l(
0.#
0?#
0]"
1\"
0p"
1o"
0f'
0e'
1d'
0l"
0k"
0i"
0g"
0e"
0d"
0c"
1a"
1`"
1^"
0m*
0f*
0s*
1q*
0a*
1Z*
1w*
0u*
1`*
0w'
0v'
0t'
0r'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0Q!
0P!
1O!
03
12
1~#
0W*
0p*
1V*
0\*
1U*
0v*
1f
0b%
0a%
1`%
0((
0'(
0%(
0#(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0U*
0Z*
0>*
0=*
0;*
09*
07*
06*
05*
04*
03*
02*
01*
0q*
0e*
0w*
1u*
0`*
0.+
0'+
1y*
06+
0%+
0M+
0F+
0Q+
0E+
1:+
0U+
0D+
0h+
0f+
0l+
0e+
0p+
0d+
1,(
1Y+
0t+
0c+
0V*
0D*
0t*
1U*
0[*
1S*
0/+
0|*
0Q*
0O*
0N*
0M*
0L*
0E*
0K*
0J*
0I*
0/*
0Y*
0-+
0R*
0y*
0:+
0,(
0Y+
0~*
1T*
0++
0}*
0)+
0S*
0V'
1T'
1S'
0Q'
0P'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
b11000 h'
1U4
b10 P7
1j%
0="
0;"
#1350
0/!
01!
#1400
1/!
11!
0B&
0D&
0H&
0L&
0P&
0R&
0T&
1X&
1Z&
1^&
0t&
0v&
1x&
06'
07'
18'
1z+
1&,
1?,
0q,
0C-
1+.
13.
1,0
1.0
1k4
0o4
1p4
0)5
1+5
1[5
06?
07?
18?
1O?
0U@
b1111 ,!
b1001 +!
0A&
0C&
0G&
0K&
0O&
0Q&
0S&
1W&
1Y&
1]&
0s&
0u&
1w&
0A!
0@!
1?!
1k%
1Q"
1>,
0p,
0B-
1*.
12.
1+0
1-0
1T"
0(5
1*5
1Z5
0Y"
0X"
1W"
1N?
0T@
0|"
0{"
0y"
0w"
0u"
0t"
0s"
0a!
0`!
1_!
0#)
1!)
0t(
0%)
0w(
0l(
1))
1v(
1q!
0N#
0_#
1I%
1E%
0#"
1""
10$
0c.
1b.
0E
0D
1C
0/
0.
1-
13"
0@$
0~(
1i(
0o(
1h(
0&)
0n(
0g(
1*)
1m(
0p$
0I"
0H"
0G"
0A"
0?"
0D"
0C"
0:%
09%
07%
05%
0?
0>
0<
0:
08
07
06
0h(
0$)
1g(
0*)
0m(
1()
1k(
1V.
0P.
1F.
0A.
0M"
0L"
0K"
0T
0()
0k(
0\"
1["
1q"
1p"
1n"
1f'
0"%
03%
1*%
1)%
1'%
1%%
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
1m*
1f*
0->
0_;
0X;
0%:
1#:
0v9
058
0.8
0*>
0><
0<<
1e>
1B<
1;<
1h>
1F<
1:<
1~>
1^<
1\<
1&?
1f<
1Z<
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
0f7
1]7
1\7
1Z7
1X7
1T9
0K9
0J9
0H9
0F9
0=7
0<7
147
137
117
1/7
1Q!
14
13
11
0~#
1W*
0~=
04;
0":
1k9
0q9
0X9
0}7
0!>
0@;
1X>
1?;
1W>
1>;
1u>
1<;
1s>
1:;
018
0/8
1s8
1l8
1w8
1k8
109
1.9
189
1,9
1}9
1{9
0a:
0Z:
0e:
0Y:
0|:
0z:
0&;
0x:
0f
1b%
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
1j9
0(:
0p9
0C9
0!=
0}<
1)=
1{<
1A=
1?=
1I=
1==
0~7
1u7
1t7
1r7
1p7
0l9
1~9
1r9
1\9
1c9
0b:
0Q:
0Z9
1b9
0f:
0P:
1`9
0}:
0q:
0Y9
1^9
0';
0o:
x?*
x>*
x=*
x<*
x;*
x:*
x9*
x8*
x7*
x6*
x5*
x4*
x3*
x2*
x1*
1!7
1}6
1$7
1#7
0Z6
1z6
0-7
0,7
0&:
1i9
0,:
0o9
04:
0B9
0M7
1K7
1I7
1G7
0[6
1R6
1Q6
1O6
1M6
0{6
1y6
1r6
1q6
1o6
1m6
1|9
0k9
1$:
1q9
1C9
0`:
0b9
0A9
0d:
1a9
0j:
0O:
0{:
1_9
0#;
0p:
0@9
0%;
1]9
0+;
0n:
xo*
xm*
xb*
xq*
xe*
xw*
xu*
x`*
x,+
x*+
x$+
x.+
x'+
x2+
x&+
x6+
x%+
xI+
xG+
xM+
xF+
xQ+
xE+
xU+
xD+
xh+
xf+
xl+
xe+
xp+
xd+
xt+
xc+
0z6
1x6
0q6
1p6
1n6
1l6
0*:
0m9
1h9
0?:
03:
0S:
1":
0j9
1(:
1p9
14:
1B9
0r:
0h:
0M:
0!;
